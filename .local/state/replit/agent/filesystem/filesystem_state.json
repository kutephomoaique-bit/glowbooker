{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Beauty Booking Website - HOME BASE Salon\n\n## Overview\n\nThis is a full-stack beauty salon booking website built for \"HOME BASE Beauty Salon,\" specializing in nail, eyelash, and facial services. The application provides a luxurious user experience with comprehensive booking management, admin controls, and customer engagement features. Built with modern web technologies, it offers both customer-facing features and administrative tools for managing services, bookings, and content.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for development/build tooling\n- **Routing**: Wouter for client-side routing with role-based page access\n- **UI Framework**: shadcn/ui components built on Radix UI primitives with Tailwind CSS\n- **Theme**: Pink and gold luxury aesthetic with custom CSS variables and gradients\n- **State Management**: TanStack Query (React Query) for server state management\n- **Form Handling**: React Hook Form with Zod validation schemas\n- **Authentication Flow**: Protected routes with user role checking (ADMIN/CUSTOMER)\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL (Neon serverless)\n- **Authentication**: Replit Auth integration with OpenID Connect\n- **Session Management**: Express sessions with PostgreSQL storage\n- **API Design**: RESTful API with centralized error handling and request logging\n- **File Structure**: Monolithic structure with shared schema between client and server\n\n### Database Schema Design\n- **User Management**: Users table with role-based access (ADMIN/CUSTOMER) \n- **Service Organization**: Hierarchical structure with service categories and individual services\n- **Booking System**: Complete booking lifecycle with status tracking (PENDING/CONFIRMED/CANCELLED/DONE)\n- **Content Management**: Dynamic content settings, gallery images, promotions, and customer feedback\n- **Promotional Features**: Event-based promotions with flexible scoping (global, category, or service-specific)\n\n### Authentication & Authorization\n- **Provider**: Replit Auth with OpenID Connect for seamless integration\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Role System**: Two-tier access control (ADMIN/CUSTOMER) with route protection\n- **User Management**: Automatic user creation/updates with profile information sync\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless for scalable data storage\n- **Session Store**: PostgreSQL-based session management via connect-pg-simple\n- **Authentication**: Replit Auth service for user identity management\n\n### Frontend Libraries\n- **UI Components**: Radix UI primitives for accessible component foundation\n- **Styling**: Tailwind CSS with custom design system variables\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Playfair Display, Inter)\n\n### Development & Build Tools\n- **Build System**: Vite with custom configuration for client/server separation\n- **TypeScript**: Full type safety across frontend, backend, and shared schemas\n- **Development Plugins**: Replit-specific plugins for error handling and development experience\n\n### Optional Integrations\n- **Image Storage**: Cloudinary support with local fallback for image uploads\n- **Email**: Potential integration for booking confirmations and notifications\n- **Payment Processing**: Architecture ready for payment gateway integration","size_bytes":3595},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      // Only log response data in development to prevent sensitive data leaks\n      if (capturedJsonResponse && process.env.NODE_ENV !== 'production') {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Production admin setup - ensure admin account exists on startup\n  if (process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1') {\n    try {\n      console.log('🔧 Setting up production admin account...');\n      const { exec } = await import('child_process');\n      const { promisify } = await import('util');\n      const execAsync = promisify(exec);\n      \n      await execAsync('node scripts/production-admin-setup.js');\n      console.log('✅ Production admin setup completed');\n    } catch (error) {\n      console.warn('⚠️  Production admin setup failed:', error instanceof Error ? error.message : String(error));\n    }\n  }\n\n  const server = await registerRoutes(app);\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    // Custom static serving to avoid catch-all route interfering with API routes\n    const path = await import(\"path\");\n    const fs = await import(\"fs\");\n    const distPath = path.resolve(import.meta.dirname, \"..\", \"dist/public\");\n\n    if (!fs.existsSync(distPath)) {\n      throw new Error(\n        `Could not find the build directory: ${distPath}, make sure to build the client first`,\n      );\n    }\n\n    // Serve static files\n    app.use(express.static(distPath));\n\n    // Only serve index.html for non-API routes\n    app.use((req, res, next) => {\n      // If this is an API route that wasn't matched, let it 404 properly\n      if (req.path.startsWith('/api/')) {\n        return res.status(404).json({ message: 'API endpoint not found' });\n      }\n      \n      // For all other routes, serve index.html for client-side routing\n      res.sendFile(path.resolve(distPath, \"index.html\"));\n    });\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  // Error handler - must be at the very end of middleware stack\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    // Log error in development\n    if (process.env.NODE_ENV !== 'production') {\n      console.error('Server error:', err);\n    }\n\n    res.status(status).json({ message });\n    // Don't throw error after sending response - this prevents process crashes\n  });\n\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3983},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    email: claims[\"email\"],\n    password: \"\", // OAuth users don't need password\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    phone: \"\", // Default empty phone for OAuth users\n    profileImageUrl: claims[\"profile_image_url\"],\n  }, claims[\"sub\"]);\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user: any = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    // Pass the user object with session data\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4371},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport { \n  insertServiceCategorySchema,\n  insertServiceSchema,\n  insertEventPromoSchema,\n  insertBookingSchema,\n  insertStaffSchema,\n  insertStaffAvailabilitySchema,\n  insertStaffServicesSchema,\n  insertGalleryImageSchema,\n  insertFeedbackSchema,\n  insertContactMessageSchema,\n  insertContentSettingsSchema,\n} from \"@shared/schema\";\nimport { calculateEffectivePrice } from \"../client/src/lib/pricing\";\nimport {\n  ObjectStorageService,\n  ObjectNotFoundError,\n} from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Note: Auth routes (/api/register, /api/login, /api/logout, /api/user) are now handled in auth.ts\n\n  // Public routes - Service Categories\n  app.get('/api/service-categories', async (req, res) => {\n    try {\n      const categories = await storage.getServiceCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching service categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch service categories\" });\n    }\n  });\n\n  // Public routes - Services\n  app.get('/api/services', async (req, res) => {\n    try {\n      const services = await storage.getServices();\n      const activePromos = await storage.getActiveEventPromos();\n      \n      // Calculate effective pricing for each service\n      const servicesWithPricing = services.map(service => {\n        const effectivePrice = calculateEffectivePrice(service, activePromos);\n        return {\n          ...service,\n          effectivePrice: effectivePrice.final,\n          originalPrice: effectivePrice.original,\n          discount: effectivePrice.discount,\n          hasDiscount: effectivePrice.hasDiscount,\n        };\n      });\n      \n      res.json(servicesWithPricing);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get('/api/services/:id', async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      \n      const activePromos = await storage.getActiveEventPromos();\n      const effectivePrice = calculateEffectivePrice(service, activePromos);\n      \n      res.json({\n        ...service,\n        effectivePrice: effectivePrice.final,\n        originalPrice: effectivePrice.original,\n        discount: effectivePrice.discount,\n        hasDiscount: effectivePrice.hasDiscount,\n      });\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ message: \"Failed to fetch service\" });\n    }\n  });\n\n  // Public routes - Gallery\n  app.get('/api/gallery', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const images = category \n        ? await storage.getGalleryImagesByCategory(category as string)\n        : await storage.getGalleryImages();\n      res.json(images);\n    } catch (error) {\n      console.error(\"Error fetching gallery:\", error);\n      res.status(500).json({ message: \"Failed to fetch gallery\" });\n    }\n  });\n\n  // Public routes - Feedback (approved only)\n  app.get('/api/feedback', async (req, res) => {\n    try {\n      const feedback = await storage.getApprovedFeedback();\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error fetching feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  // Public routes - Content Settings\n  app.get('/api/content-settings', async (req, res) => {\n    try {\n      const settings = await storage.getContentSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching content settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch content settings\" });\n    }\n  });\n\n  // Public routes - Active Promotions\n  app.get('/api/promotions', async (req, res) => {\n    try {\n      const promos = await storage.getActiveEventPromos();\n      res.json(promos);\n    } catch (error) {\n      console.error(\"Error fetching promotions:\", error);\n      res.status(500).json({ message: \"Failed to fetch promotions\" });\n    }\n  });\n\n  // Public routes - Staff\n  app.get('/api/staff', async (req, res) => {\n    try {\n      const staff = await storage.getActiveStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  // Public route - Staff by service\n  app.get('/api/staff/by-service/:serviceId', async (req, res) => {\n    try {\n      const staff = await storage.getStaffByService(req.params.serviceId);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff by service:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff by service\" });\n    }\n  });\n\n  // Public booking creation\n  app.post('/api/bookings', async (req, res) => {\n    try {\n      const bookingData = insertBookingSchema.parse(req.body);\n      const booking = await storage.createBooking(bookingData);\n      \n      // TODO: Send confirmation email (placeholder)\n      console.log('Booking confirmation email would be sent to:', bookingData.customerEmail);\n      \n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Public feedback submission\n  app.post('/api/feedback', async (req, res) => {\n    try {\n      const feedbackData = insertFeedbackSchema.parse(req.body);\n      const feedback = await storage.createFeedback(feedbackData);\n      res.status(201).json(feedback);\n    } catch (error) {\n      console.error(\"Error creating feedback:\", error);\n      res.status(500).json({ message: \"Failed to create feedback\" });\n    }\n  });\n\n  // Public contact message submission\n  app.post('/api/contact', async (req, res) => {\n    try {\n      const messageData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(messageData);\n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error creating contact message:\", error);\n      res.status(500).json({ message: \"Failed to create contact message\" });\n    }\n  });\n\n  // Object Storage routes - Public file serving\n  app.get(\"/public-objects/:filePath(*)\", async (req, res) => {\n    const filePath = req.params.filePath;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const file = await objectStorageService.searchPublicObject(filePath);\n      if (!file) {\n        return res.status(404).json({ error: \"File not found\" });\n      }\n      objectStorageService.downloadObject(file, res);\n    } catch (error) {\n      console.error(\"Error searching for public object:\", error);\n      return res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Object Storage routes - Protected file serving (public objects with ACL)\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(req.path);\n      // For gallery images, we want them to be publicly accessible for viewing\n      // but only admin-uploadable, so we don't require authentication for read access\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Protected routes - Customer bookings\n  app.get('/api/my-bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const bookings = await storage.getBookingsByUser(userId);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching user bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // Admin-only middleware\n  const isAdmin = async (req: any, res: any, next: any) => {\n    try {\n      const userId = req.user.id;\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      next();\n    } catch (error) {\n      res.status(500).json({ message: \"Error checking admin status\" });\n    }\n  };\n\n  // Admin routes - Service Categories\n  app.post('/api/admin/service-categories', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const categoryData = insertServiceCategorySchema.parse(req.body);\n      const category = await storage.createServiceCategory(categoryData);\n      res.status(201).json(category);\n    } catch (error) {\n      console.error(\"Error creating service category:\", error);\n      res.status(500).json({ message: \"Failed to create service category\" });\n    }\n  });\n\n  app.put('/api/admin/service-categories/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const categoryData = insertServiceCategorySchema.partial().parse(req.body);\n      const category = await storage.updateServiceCategory(req.params.id, categoryData);\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error updating service category:\", error);\n      res.status(500).json({ message: \"Failed to update service category\" });\n    }\n  });\n\n  app.delete('/api/admin/service-categories/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteServiceCategory(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting service category:\", error);\n      res.status(500).json({ message: \"Failed to delete service category\" });\n    }\n  });\n\n  // Admin routes - Services\n  app.post('/api/admin/services', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(serviceData);\n      res.status(201).json(service);\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put('/api/admin/services/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const serviceData = insertServiceSchema.partial().parse(req.body);\n      const service = await storage.updateService(req.params.id, serviceData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete('/api/admin/services/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteService(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Admin routes - Event Promos\n  app.get('/api/admin/event-promos', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const promos = await storage.getEventPromos();\n      res.json(promos);\n    } catch (error) {\n      console.error(\"Error fetching event promos:\", error);\n      res.status(500).json({ message: \"Failed to fetch event promos\" });\n    }\n  });\n\n  app.post('/api/admin/event-promos', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const promoData = insertEventPromoSchema.parse(req.body);\n      const promo = await storage.createEventPromo(promoData);\n      res.status(201).json(promo);\n    } catch (error) {\n      console.error(\"Error creating event promo:\", error);\n      res.status(500).json({ message: \"Failed to create event promo\" });\n    }\n  });\n\n  app.put('/api/admin/event-promos/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const promoData = insertEventPromoSchema.partial().parse(req.body);\n      const promo = await storage.updateEventPromo(req.params.id, promoData);\n      res.json(promo);\n    } catch (error) {\n      console.error(\"Error updating event promo:\", error);\n      res.status(500).json({ message: \"Failed to update event promo\" });\n    }\n  });\n\n  app.delete('/api/admin/event-promos/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteEventPromo(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting event promo:\", error);\n      res.status(500).json({ message: \"Failed to delete event promo\" });\n    }\n  });\n\n  // Admin routes - Bookings\n  app.get('/api/admin/bookings', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const bookings = await storage.getBookings();\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.put('/api/admin/bookings/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const bookingData = insertBookingSchema.partial().parse(req.body);\n      const booking = await storage.updateBooking(req.params.id, bookingData);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  // Admin routes - Object Storage Upload\n  app.post(\"/api/objects/upload\", isAuthenticated, isAdmin, async (req, res) => {\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // Admin routes - Gallery Image Upload (set ACL after upload)\n  app.put(\"/api/admin/gallery-upload\", isAuthenticated, isAdmin, async (req: any, res) => {\n    if (!req.body.imageURL || !req.body.category || !req.body.caption) {\n      return res.status(400).json({ error: \"imageURL, category, and caption are required\" });\n    }\n\n    const userId = req.user.id;\n\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        req.body.imageURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Gallery images should be publicly viewable\n        }\n      );\n\n      // Create database record with the normalized object path\n      const imageData = insertGalleryImageSchema.parse({\n        url: objectPath,\n        category: req.body.category,\n        caption: req.body.caption,\n        order: req.body.order || 0\n      });\n      \n      const image = await storage.createGalleryImage(imageData);\n      res.status(200).json({\n        objectPath: objectPath,\n        image: image\n      });\n    } catch (error) {\n      console.error(\"Error setting gallery image:\", error);\n      res.status(500).json({ error: \"Failed to save gallery image\" });\n    }\n  });\n\n  // Admin routes - Gallery\n  app.post('/api/admin/gallery', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const imageData = insertGalleryImageSchema.parse(req.body);\n      const image = await storage.createGalleryImage(imageData);\n      res.status(201).json(image);\n    } catch (error) {\n      console.error(\"Error creating gallery image:\", error);\n      res.status(500).json({ message: \"Failed to create gallery image\" });\n    }\n  });\n\n  app.put('/api/admin/gallery/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const imageData = insertGalleryImageSchema.partial().parse(req.body);\n      const image = await storage.updateGalleryImage(req.params.id, imageData);\n      res.json(image);\n    } catch (error) {\n      console.error(\"Error updating gallery image:\", error);\n      res.status(500).json({ message: \"Failed to update gallery image\" });\n    }\n  });\n\n  app.delete('/api/admin/gallery/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteGalleryImage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting gallery image:\", error);\n      res.status(500).json({ message: \"Failed to delete gallery image\" });\n    }\n  });\n\n  // Admin routes - Feedback Management\n  app.get('/api/admin/feedback', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const feedback = await storage.getFeedback();\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error fetching feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch feedback\" });\n    }\n  });\n\n  app.get('/api/admin/feedback/pending', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const feedback = await storage.getPendingFeedback();\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error fetching pending feedback:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending feedback\" });\n    }\n  });\n\n  // Admin Contact Messages routes\n  app.get('/api/admin/contact-messages', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const contactMessages = await storage.getContactMessages();\n      res.json(contactMessages);\n    } catch (error) {\n      console.error(\"Error fetching contact messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact messages\" });\n    }\n  });\n\n  app.put('/api/admin/feedback/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const feedbackData = insertFeedbackSchema.partial().parse(req.body);\n      const feedback = await storage.updateFeedback(req.params.id, feedbackData);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error updating feedback:\", error);\n      res.status(500).json({ message: \"Failed to update feedback\" });\n    }\n  });\n\n  app.delete('/api/admin/feedback/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteFeedback(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting feedback:\", error);\n      res.status(500).json({ message: \"Failed to delete feedback\" });\n    }\n  });\n\n  // Admin routes - Contact Messages\n  app.get('/api/admin/contact-messages', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching contact messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact messages\" });\n    }\n  });\n\n  app.put('/api/admin/contact-messages/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const messageData = insertContactMessageSchema.partial().parse(req.body);\n      const message = await storage.updateContactMessage(req.params.id, messageData);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error updating contact message:\", error);\n      res.status(500).json({ message: \"Failed to update contact message\" });\n    }\n  });\n\n  // Admin routes - Content Settings\n  app.put('/api/admin/content-settings', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const settingsData = insertContentSettingsSchema.parse(req.body);\n      const settings = await storage.updateContentSettings(settingsData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating content settings:\", error);\n      res.status(500).json({ message: \"Failed to update content settings\" });\n    }\n  });\n\n  // Admin routes - Staff Management\n  app.get('/api/admin/staff', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const staff = await storage.getStaff();\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error fetching staff:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff\" });\n    }\n  });\n\n  app.get('/api/admin/staff/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const staffMember = await storage.getStaffMember(req.params.id);\n      if (!staffMember) {\n        return res.status(404).json({ message: \"Staff member not found\" });\n      }\n      res.json(staffMember);\n    } catch (error) {\n      console.error(\"Error fetching staff member:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff member\" });\n    }\n  });\n\n  app.post('/api/admin/staff', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.parse(req.body);\n      const staff = await storage.createStaff(staffData);\n      res.status(201).json(staff);\n    } catch (error) {\n      console.error(\"Error creating staff:\", error);\n      res.status(500).json({ message: \"Failed to create staff\" });\n    }\n  });\n\n  app.put('/api/admin/staff/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const staffData = insertStaffSchema.partial().parse(req.body);\n      const staff = await storage.updateStaff(req.params.id, staffData);\n      res.json(staff);\n    } catch (error) {\n      console.error(\"Error updating staff:\", error);\n      res.status(500).json({ message: \"Failed to update staff\" });\n    }\n  });\n\n  app.delete('/api/admin/staff/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteStaff(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting staff:\", error);\n      res.status(500).json({ message: \"Failed to delete staff\" });\n    }\n  });\n\n  // Admin routes - Staff Availability\n  app.get('/api/admin/staff/:staffId/availability', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const availability = await storage.getStaffAvailability(req.params.staffId);\n      res.json(availability);\n    } catch (error) {\n      console.error(\"Error fetching staff availability:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff availability\" });\n    }\n  });\n\n  app.post('/api/admin/staff/availability', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const availabilityData = insertStaffAvailabilitySchema.parse(req.body);\n      const availability = await storage.createStaffAvailability(availabilityData);\n      res.status(201).json(availability);\n    } catch (error) {\n      console.error(\"Error creating staff availability:\", error);\n      res.status(500).json({ message: \"Failed to create staff availability\" });\n    }\n  });\n\n  app.put('/api/admin/staff/availability/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const availabilityData = insertStaffAvailabilitySchema.partial().parse(req.body);\n      const availability = await storage.updateStaffAvailability(req.params.id, availabilityData);\n      res.json(availability);\n    } catch (error) {\n      console.error(\"Error updating staff availability:\", error);\n      res.status(500).json({ message: \"Failed to update staff availability\" });\n    }\n  });\n\n  app.delete('/api/admin/staff/availability/:id', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteStaffAvailability(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting staff availability:\", error);\n      res.status(500).json({ message: \"Failed to delete staff availability\" });\n    }\n  });\n\n  // Admin routes - Staff Services\n  app.get('/api/admin/staff/:staffId/services', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const services = await storage.getStaffServices(req.params.staffId);\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching staff services:\", error);\n      res.status(500).json({ message: \"Failed to fetch staff services\" });\n    }\n  });\n\n  app.post('/api/admin/staff/:staffId/services/:serviceId', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const staffService = await storage.assignServiceToStaff(req.params.staffId, req.params.serviceId);\n      res.status(201).json(staffService);\n    } catch (error) {\n      console.error(\"Error assigning service to staff:\", error);\n      res.status(500).json({ message: \"Failed to assign service to staff\" });\n    }\n  });\n\n  app.delete('/api/admin/staff/:staffId/services/:serviceId', isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.removeServiceFromStaff(req.params.staffId, req.params.serviceId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing service from staff:\", error);\n      res.status(500).json({ message: \"Failed to remove service from staff\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":25128},"server/storage.ts":{"content":"import {\n  users,\n  serviceCategories,\n  services,\n  eventPromos,\n  bookings,\n  staff,\n  staffAvailability,\n  staffServices,\n  galleryImages,\n  feedback,\n  contactMessages,\n  contentSettings,\n  type User,\n  type UpsertUser,\n  type ServiceCategory,\n  type Service,\n  type EventPromo,\n  type Booking,\n  type Staff,\n  type StaffAvailability,\n  type StaffServices,\n  type GalleryImage,\n  type Feedback,\n  type ContactMessage,\n  type ContentSettings,\n  type InsertServiceCategory,\n  type InsertService,\n  type InsertEventPromo,\n  type InsertBooking,\n  type InsertStaff,\n  type InsertStaffAvailability,\n  type InsertStaffServices,\n  type InsertGalleryImage,\n  type InsertFeedback,\n  type InsertContactMessage,\n  type InsertContentSettings,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Auth.\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: UpsertUser): Promise<User>;\n  upsertUser(user: UpsertUser, id?: string): Promise<User>;\n  \n  // Service Category operations\n  getServiceCategories(): Promise<ServiceCategory[]>;\n  createServiceCategory(category: InsertServiceCategory): Promise<ServiceCategory>;\n  updateServiceCategory(id: string, category: Partial<InsertServiceCategory>): Promise<ServiceCategory>;\n  deleteServiceCategory(id: string): Promise<void>;\n  \n  // Service operations\n  getServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: Partial<InsertService>): Promise<Service>;\n  deleteService(id: string): Promise<void>;\n  \n  // Event/Promo operations\n  getActiveEventPromos(): Promise<EventPromo[]>;\n  getEventPromos(): Promise<EventPromo[]>;\n  createEventPromo(promo: InsertEventPromo): Promise<EventPromo>;\n  updateEventPromo(id: string, promo: Partial<InsertEventPromo>): Promise<EventPromo>;\n  deleteEventPromo(id: string): Promise<void>;\n  \n  // Booking operations\n  getBookings(): Promise<(Booking & { service: Service, user?: User, staff?: Staff })[]>;\n  getBookingsByUser(userId: string): Promise<(Booking & { service: Service, staff?: Staff })[]>;\n  getBooking(id: string): Promise<(Booking & { service: Service, user?: User, staff?: Staff }) | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking>;\n  deleteBooking(id: string): Promise<void>;\n  \n  // Staff operations\n  getStaff(): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] })[]>;\n  getActiveStaff(): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] })[]>;\n  getStaffByService(serviceId: string): Promise<(Staff & { availability: StaffAvailability[] })[]>;\n  getStaffMember(id: string): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] }) | undefined>;\n  createStaff(staff: InsertStaff): Promise<Staff>;\n  updateStaff(id: string, staff: Partial<InsertStaff>): Promise<Staff>;\n  deleteStaff(id: string): Promise<void>;\n  \n  // Staff Availability operations\n  getStaffAvailability(staffId: string): Promise<StaffAvailability[]>;\n  createStaffAvailability(availability: InsertStaffAvailability): Promise<StaffAvailability>;\n  updateStaffAvailability(id: string, availability: Partial<InsertStaffAvailability>): Promise<StaffAvailability>;\n  deleteStaffAvailability(id: string): Promise<void>;\n  \n  // Staff Services operations\n  getStaffServices(staffId: string): Promise<(StaffServices & { service: Service })[]>;\n  createStaffService(staffService: InsertStaffServices): Promise<StaffServices>;\n  deleteStaffService(id: string): Promise<void>;\n  assignServiceToStaff(staffId: string, serviceId: string): Promise<StaffServices>;\n  removeServiceFromStaff(staffId: string, serviceId: string): Promise<void>;\n  \n  // Gallery operations\n  getGalleryImages(): Promise<GalleryImage[]>;\n  getGalleryImagesByCategory(category: string): Promise<GalleryImage[]>;\n  createGalleryImage(image: InsertGalleryImage): Promise<GalleryImage>;\n  updateGalleryImage(id: string, image: Partial<InsertGalleryImage>): Promise<GalleryImage>;\n  deleteGalleryImage(id: string): Promise<void>;\n  \n  // Feedback operations\n  getFeedback(): Promise<(Feedback & { user?: User })[]>;\n  getApprovedFeedback(): Promise<(Feedback & { user?: User })[]>;\n  getPendingFeedback(): Promise<(Feedback & { user?: User })[]>;\n  createFeedback(feedback: InsertFeedback): Promise<Feedback>;\n  updateFeedback(id: string, feedback: Partial<InsertFeedback>): Promise<Feedback>;\n  deleteFeedback(id: string): Promise<void>;\n  \n  // Contact operations\n  getContactMessages(): Promise<ContactMessage[]>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  updateContactMessage(id: string, message: Partial<InsertContactMessage>): Promise<ContactMessage>;\n  deleteContactMessage(id: string): Promise<void>;\n  \n  // Content Settings operations\n  getContentSettings(): Promise<ContentSettings | undefined>;\n  updateContentSettings(settings: InsertContentSettings): Promise<ContentSettings>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT) these user operations are mandatory for Replit Auth.\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser, id?: string): Promise<User> {\n    const userWithId = id ? { ...userData, id } : userData;\n    const [user] = await db\n      .insert(users)\n      .values(userWithId)\n      .onConflictDoUpdate({\n        target: users.email,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n  \n  // Service Category operations\n  async getServiceCategories(): Promise<ServiceCategory[]> {\n    return await db.select().from(serviceCategories).orderBy(serviceCategories.order);\n  }\n  \n  async createServiceCategory(category: InsertServiceCategory): Promise<ServiceCategory> {\n    const [created] = await db.insert(serviceCategories).values(category).returning();\n    return created;\n  }\n  \n  async updateServiceCategory(id: string, category: Partial<InsertServiceCategory>): Promise<ServiceCategory> {\n    const [updated] = await db\n      .update(serviceCategories)\n      .set(category)\n      .where(eq(serviceCategories.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteServiceCategory(id: string): Promise<void> {\n    await db.delete(serviceCategories).where(eq(serviceCategories.id, id));\n  }\n  \n  // Service operations\n  async getServices(): Promise<Service[]> {\n    return await db.select().from(services);\n  }\n  \n  \n  async getService(id: string): Promise<Service | undefined> {\n    const [result] = await db\n      .select()\n      .from(services)\n      .where(eq(services.id, id));\n    \n    return result;\n  }\n  \n  async createService(service: InsertService): Promise<Service> {\n    // Ensure slug is unique by checking existing services\n    let uniqueSlug = service.slug;\n    let counter = 1;\n    \n    while (true) {\n      const existing = await db\n        .select({ id: services.id })\n        .from(services)\n        .where(eq(services.slug, uniqueSlug))\n        .limit(1);\n      \n      if (existing.length === 0) {\n        break; // Slug is unique, we can use it\n      }\n      \n      // Slug exists, append counter and try again\n      uniqueSlug = `${service.slug}-${counter}`;\n      counter++;\n    }\n    \n    const [created] = await db.insert(services).values({\n      ...service,\n      slug: uniqueSlug\n    }).returning();\n    return created;\n  }\n  \n  async updateService(id: string, service: Partial<InsertService>): Promise<Service> {\n    const [updated] = await db\n      .update(services)\n      .set(service)\n      .where(eq(services.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteService(id: string): Promise<void> {\n    await db.delete(services).where(eq(services.id, id));\n  }\n  \n  // Event/Promo operations\n  async getActiveEventPromos(): Promise<EventPromo[]> {\n    const now = new Date();\n    return await db\n      .select()\n      .from(eventPromos)\n      .where(\n        and(\n          eq(eventPromos.isActive, true),\n          lte(eventPromos.startAt, now),\n          gte(eventPromos.endAt, now)\n        )\n      );\n  }\n  \n  async getEventPromos(): Promise<EventPromo[]> {\n    return await db.select().from(eventPromos).orderBy(desc(eventPromos.createdAt));\n  }\n  \n  async createEventPromo(promo: InsertEventPromo): Promise<EventPromo> {\n    const [created] = await db.insert(eventPromos).values(promo).returning();\n    return created;\n  }\n  \n  async updateEventPromo(id: string, promo: Partial<InsertEventPromo>): Promise<EventPromo> {\n    const [updated] = await db\n      .update(eventPromos)\n      .set(promo)\n      .where(eq(eventPromos.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteEventPromo(id: string): Promise<void> {\n    await db.delete(eventPromos).where(eq(eventPromos.id, id));\n  }\n  \n  // Booking operations\n  async getBookings(): Promise<(Booking & { service: Service, user?: User, staff?: Staff })[]> {\n    const results = await db\n      .select()\n      .from(bookings)\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .leftJoin(staff, eq(bookings.staffId, staff.id))\n      .orderBy(desc(bookings.dateTime));\n    \n    return results.map(row => ({\n      ...row.bookings,\n      service: row.services!,\n      user: row.users || undefined,\n      staff: row.staff || undefined,\n    }));\n  }\n  \n  async getBookingsByUser(userId: string): Promise<(Booking & { service: Service, staff?: Staff })[]> {\n    const results = await db\n      .select()\n      .from(bookings)\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .leftJoin(staff, eq(bookings.staffId, staff.id))\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.dateTime));\n    \n    return results.map(row => ({\n      ...row.bookings,\n      service: row.services!,\n      staff: row.staff || undefined,\n    }));\n  }\n  \n  async getBooking(id: string): Promise<(Booking & { service: Service, user?: User, staff?: Staff }) | undefined> {\n    const [result] = await db\n      .select()\n      .from(bookings)\n      .leftJoin(services, eq(bookings.serviceId, services.id))\n      .leftJoin(users, eq(bookings.userId, users.id))\n      .leftJoin(staff, eq(bookings.staffId, staff.id))\n      .where(eq(bookings.id, id));\n    \n    if (!result) return undefined;\n    \n    return {\n      ...result.bookings,\n      service: result.services!,\n      user: result.users || undefined,\n      staff: result.staff || undefined,\n    };\n  }\n  \n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [created] = await db.insert(bookings).values(booking).returning();\n    return created;\n  }\n  \n  async updateBooking(id: string, booking: Partial<InsertBooking>): Promise<Booking> {\n    const [updated] = await db\n      .update(bookings)\n      .set(booking)\n      .where(eq(bookings.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteBooking(id: string): Promise<void> {\n    await db.delete(bookings).where(eq(bookings.id, id));\n  }\n  \n  // Staff operations\n  async getStaff(): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] })[]> {\n    const staffData = await db.select().from(staff).orderBy(staff.name);\n    \n    const enrichedStaff = await Promise.all(\n      staffData.map(async (staffMember) => {\n        const availability = await this.getStaffAvailability(staffMember.id);\n        const services = await this.getStaffServices(staffMember.id);\n        return { ...staffMember, availability, services };\n      })\n    );\n    \n    return enrichedStaff;\n  }\n  \n  async getActiveStaff(): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] })[]> {\n    const staffData = await db.select().from(staff).where(eq(staff.isActive, true)).orderBy(staff.name);\n    \n    const enrichedStaff = await Promise.all(\n      staffData.map(async (staffMember) => {\n        const availability = await this.getStaffAvailability(staffMember.id);\n        const services = await this.getStaffServices(staffMember.id);\n        return { ...staffMember, availability, services };\n      })\n    );\n    \n    return enrichedStaff;\n  }\n  \n  async getStaffByService(serviceId: string): Promise<(Staff & { availability: StaffAvailability[] })[]> {\n    const staffServiceData = await db\n      .select()\n      .from(staffServices)\n      .leftJoin(staff, eq(staffServices.staffId, staff.id))\n      .where(eq(staffServices.serviceId, serviceId));\n    \n    const enrichedStaff = await Promise.all(\n      staffServiceData.map(async (row) => {\n        if (!row.staff) return null;\n        const availability = await this.getStaffAvailability(row.staff.id);\n        return { ...row.staff, availability };\n      })\n    );\n    \n    return enrichedStaff.filter(Boolean) as (Staff & { availability: StaffAvailability[] })[];\n  }\n  \n  async getStaffMember(id: string): Promise<(Staff & { availability: StaffAvailability[], services: (StaffServices & { service: Service })[] }) | undefined> {\n    const [staffMember] = await db.select().from(staff).where(eq(staff.id, id));\n    if (!staffMember) return undefined;\n    \n    const availability = await this.getStaffAvailability(id);\n    const services = await this.getStaffServices(id);\n    return { ...staffMember, availability, services };\n  }\n  \n  async createStaff(staffData: InsertStaff): Promise<Staff> {\n    const [created] = await db.insert(staff).values(staffData).returning();\n    return created;\n  }\n  \n  async updateStaff(id: string, staffData: Partial<InsertStaff>): Promise<Staff> {\n    const [updated] = await db\n      .update(staff)\n      .set(staffData)\n      .where(eq(staff.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteStaff(id: string): Promise<void> {\n    // Delete related availability and services first\n    await db.delete(staffAvailability).where(eq(staffAvailability.staffId, id));\n    await db.delete(staffServices).where(eq(staffServices.staffId, id));\n    await db.delete(staff).where(eq(staff.id, id));\n  }\n  \n  // Staff Availability operations\n  async getStaffAvailability(staffId: string): Promise<StaffAvailability[]> {\n    return await db\n      .select()\n      .from(staffAvailability)\n      .where(eq(staffAvailability.staffId, staffId))\n      .orderBy(staffAvailability.dayOfWeek);\n  }\n  \n  async createStaffAvailability(availability: InsertStaffAvailability): Promise<StaffAvailability> {\n    const [created] = await db.insert(staffAvailability).values(availability).returning();\n    return created;\n  }\n  \n  async updateStaffAvailability(id: string, availability: Partial<InsertStaffAvailability>): Promise<StaffAvailability> {\n    const [updated] = await db\n      .update(staffAvailability)\n      .set(availability)\n      .where(eq(staffAvailability.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteStaffAvailability(id: string): Promise<void> {\n    await db.delete(staffAvailability).where(eq(staffAvailability.id, id));\n  }\n  \n  // Staff Services operations\n  async getStaffServices(staffId: string): Promise<(StaffServices & { service: Service })[]> {\n    const results = await db\n      .select()\n      .from(staffServices)\n      .leftJoin(services, eq(staffServices.serviceId, services.id))\n      .where(eq(staffServices.staffId, staffId));\n    \n    return results.map(row => ({\n      ...row.staff_services,\n      service: row.services!,\n    }));\n  }\n  \n  async createStaffService(staffService: InsertStaffServices): Promise<StaffServices> {\n    const [created] = await db.insert(staffServices).values(staffService).returning();\n    return created;\n  }\n  \n  async deleteStaffService(id: string): Promise<void> {\n    await db.delete(staffServices).where(eq(staffServices.id, id));\n  }\n  \n  async assignServiceToStaff(staffId: string, serviceId: string): Promise<StaffServices> {\n    const [created] = await db\n      .insert(staffServices)\n      .values({ staffId, serviceId })\n      .returning();\n    return created;\n  }\n  \n  async removeServiceFromStaff(staffId: string, serviceId: string): Promise<void> {\n    await db\n      .delete(staffServices)\n      .where(and(\n        eq(staffServices.staffId, staffId),\n        eq(staffServices.serviceId, serviceId)\n      ));\n  }\n  \n  // Gallery operations\n  async getGalleryImages(): Promise<GalleryImage[]> {\n    return await db.select().from(galleryImages).orderBy(galleryImages.order, galleryImages.createdAt);\n  }\n  \n  async getGalleryImagesByCategory(category: string): Promise<GalleryImage[]> {\n    return await db\n      .select()\n      .from(galleryImages)\n      .where(eq(galleryImages.category, category as any))\n      .orderBy(galleryImages.order, galleryImages.createdAt);\n  }\n  \n  async createGalleryImage(image: InsertGalleryImage): Promise<GalleryImage> {\n    const [created] = await db.insert(galleryImages).values(image).returning();\n    return created;\n  }\n  \n  async updateGalleryImage(id: string, image: Partial<InsertGalleryImage>): Promise<GalleryImage> {\n    const [updated] = await db\n      .update(galleryImages)\n      .set(image)\n      .where(eq(galleryImages.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteGalleryImage(id: string): Promise<void> {\n    await db.delete(galleryImages).where(eq(galleryImages.id, id));\n  }\n  \n  // Feedback operations\n  async getFeedback(): Promise<(Feedback & { user?: User })[]> {\n    const results = await db\n      .select()\n      .from(feedback)\n      .leftJoin(users, eq(feedback.userId, users.id))\n      .orderBy(desc(feedback.createdAt));\n    \n    return results.map(row => ({\n      ...row.feedback,\n      user: row.users || undefined,\n    }));\n  }\n  \n  async getApprovedFeedback(): Promise<(Feedback & { user?: User })[]> {\n    const results = await db\n      .select()\n      .from(feedback)\n      .leftJoin(users, eq(feedback.userId, users.id))\n      .where(eq(feedback.status, 'APPROVED'))\n      .orderBy(desc(feedback.createdAt));\n    \n    return results.map(row => ({\n      ...row.feedback,\n      user: row.users || undefined,\n    }));\n  }\n  \n  async getPendingFeedback(): Promise<(Feedback & { user?: User })[]> {\n    const results = await db\n      .select()\n      .from(feedback)\n      .leftJoin(users, eq(feedback.userId, users.id))\n      .where(eq(feedback.status, 'PENDING'))\n      .orderBy(desc(feedback.createdAt));\n    \n    return results.map(row => ({\n      ...row.feedback,\n      user: row.users || undefined,\n    }));\n  }\n  \n  async createFeedback(feedbackData: InsertFeedback): Promise<Feedback> {\n    const [created] = await db.insert(feedback).values(feedbackData).returning();\n    return created;\n  }\n  \n  async updateFeedback(id: string, feedbackData: Partial<InsertFeedback>): Promise<Feedback> {\n    const [updated] = await db\n      .update(feedback)\n      .set(feedbackData)\n      .where(eq(feedback.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteFeedback(id: string): Promise<void> {\n    await db.delete(feedback).where(eq(feedback.id, id));\n  }\n  \n  // Contact operations\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return await db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n  \n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [created] = await db.insert(contactMessages).values(message).returning();\n    return created;\n  }\n  \n  async updateContactMessage(id: string, message: Partial<InsertContactMessage>): Promise<ContactMessage> {\n    const [updated] = await db\n      .update(contactMessages)\n      .set(message)\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return updated;\n  }\n  \n  async deleteContactMessage(id: string): Promise<void> {\n    await db.delete(contactMessages).where(eq(contactMessages.id, id));\n  }\n  \n  // Content Settings operations\n  async getContentSettings(): Promise<ContentSettings | undefined> {\n    const [settings] = await db.select().from(contentSettings).limit(1);\n    return settings;\n  }\n  \n  async updateContentSettings(settings: InsertContentSettings): Promise<ContentSettings> {\n    // First try to update existing record\n    const existing = await this.getContentSettings();\n    \n    if (existing) {\n      const [updated] = await db\n        .update(contentSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(contentSettings.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new record if none exists\n      const [created] = await db.insert(contentSettings).values(settings).returning();\n      return created;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21584},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  boolean,\n  decimal,\n  index,\n  integer,\n  jsonb,\n  pgEnum,\n  pgTable,\n  text,\n  timestamp,\n  varchar,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from 'drizzle-orm';\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['ADMIN', 'CUSTOMER']);\nexport const bookingStatusEnum = pgEnum('booking_status', ['PENDING', 'CONFIRMED', 'CANCELLED', 'DONE']);\nexport const feedbackStatusEnum = pgEnum('feedback_status', ['PENDING', 'APPROVED', 'REJECTED']);\nexport const discountTypeEnum = pgEnum('discount_type', ['PERCENT', 'AMOUNT']);\nexport const scopeTypeEnum = pgEnum('scope_type', ['GLOBAL', 'CATEGORY', 'SERVICE']);\nexport const galleryCategoryEnum = pgEnum('gallery_category', ['Nail', 'Eyelash', 'Facial', 'General']);\nexport const dayOfWeekEnum = pgEnum('day_of_week', ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY']);\n\n// User storage table.\n// Updated to support custom email/password authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\"), // Made nullable for production compatibility\n  firstName: varchar(\"first_name\"), // Made nullable for production compatibility  \n  lastName: varchar(\"last_name\"), // Made nullable for production compatibility\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\"), // Made nullable for production compatibility\n  role: userRoleEnum(\"role\").default('CUSTOMER').notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const serviceCategories = pgTable(\"service_categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(), // Nail, Eyelash, Facial\n  slug: varchar(\"slug\").notNull().unique(),\n  order: integer(\"order\").default(0),\n});\n\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  slug: varchar(\"slug\").notNull().unique(),\n  description: text(\"description\"),\n  basePrice: decimal(\"base_price\", { precision: 10, scale: 2 }).notNull(),\n  durationMins: integer(\"duration_mins\").notNull(),\n  isNail: boolean(\"is_nail\").default(false),\n  isEyelash: boolean(\"is_eyelash\").default(false),\n  isFacial: boolean(\"is_facial\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventPromos = pgTable(\"event_promos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  discountType: discountTypeEnum(\"discount_type\").notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 2 }).notNull(),\n  startAt: timestamp(\"start_at\").notNull(),\n  endAt: timestamp(\"end_at\").notNull(),\n  scopeType: scopeTypeEnum(\"scope_type\").notNull(),\n  scopeId: varchar(\"scope_id\"), // nullable, references category or service id\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const staff = pgTable(\"staff\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  email: varchar(\"email\"),\n  phone: varchar(\"phone\"),\n  position: varchar(\"position\"),\n  bio: text(\"bio\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  skills: text(\"skills\").array(),\n  experienceYears: integer(\"experience_years\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id), // nullable for guest bookings\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  staffId: varchar(\"staff_id\").references(() => staff.id),\n  dateTime: timestamp(\"date_time\").notNull(),\n  durationMins: integer(\"duration_mins\").notNull(),\n  status: bookingStatusEnum(\"status\").default('PENDING').notNull(),\n  notes: text(\"notes\"),\n  customerName: varchar(\"customer_name\"),\n  customerPhone: varchar(\"customer_phone\"),\n  customerEmail: varchar(\"customer_email\"),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const galleryImages = pgTable(\"gallery_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  url: varchar(\"url\").notNull(),\n  category: galleryCategoryEnum(\"category\").notNull(),\n  caption: varchar(\"caption\"),\n  order: integer(\"order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const feedback = pgTable(\"feedback\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id), // nullable for anonymous feedback\n  rating: integer(\"rating\").notNull(), // 1-5\n  title: varchar(\"title\"),\n  comment: text(\"comment\"),\n  imageUrls: text(\"image_urls\").array(),\n  status: feedbackStatusEnum(\"status\").default('PENDING').notNull(),\n  isFeatured: boolean(\"is_featured\").default(false),\n  customerName: varchar(\"customer_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  phone: varchar(\"phone\"),\n  message: text(\"message\").notNull(),\n  handled: boolean(\"handled\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const staffAvailability = pgTable(\"staff_availability\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").references(() => staff.id).notNull(),\n  dayOfWeek: dayOfWeekEnum(\"day_of_week\").notNull(),\n  startTime: varchar(\"start_time\").notNull(), // Format: \"09:00\"\n  endTime: varchar(\"end_time\").notNull(), // Format: \"17:00\"\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const staffServices = pgTable(\"staff_services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  staffId: varchar(\"staff_id\").references(() => staff.id).notNull(),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contentSettings = pgTable(\"content_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  slogans: text(\"slogans\").array(),\n  address: text(\"address\"),\n  facebookUrl: varchar(\"facebook_url\"),\n  zaloUrl: varchar(\"zalo_url\"),\n  instagramUrl: varchar(\"instagram_url\"),\n  phone: varchar(\"phone\"),\n  openingHours: jsonb(\"opening_hours\"),\n  heroImages: text(\"hero_images\").array(),\n  seo: jsonb(\"seo\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\n// Service categories no longer have direct relations to services since services use boolean flags\n\nexport const servicesRelations = relations(services, ({ many }) => ({\n  bookings: many(bookings),\n  staffServices: many(staffServices),\n}));\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookings: many(bookings),\n  feedback: many(feedback),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  service: one(services, {\n    fields: [bookings.serviceId],\n    references: [services.id],\n  }),\n  staff: one(staff, {\n    fields: [bookings.staffId],\n    references: [staff.id],\n  }),\n}));\n\nexport const feedbackRelations = relations(feedback, ({ one }) => ({\n  user: one(users, {\n    fields: [feedback.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const staffRelations = relations(staff, ({ many }) => ({\n  bookings: many(bookings),\n  availability: many(staffAvailability),\n  staffServices: many(staffServices),\n}));\n\nexport const staffAvailabilityRelations = relations(staffAvailability, ({ one }) => ({\n  staff: one(staff, {\n    fields: [staffAvailability.staffId],\n    references: [staff.id],\n  }),\n}));\n\nexport const staffServicesRelations = relations(staffServices, ({ one }) => ({\n  staff: one(staff, {\n    fields: [staffServices.staffId],\n    references: [staff.id],\n  }),\n  service: one(services, {\n    fields: [staffServices.serviceId],\n    references: [services.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceCategorySchema = createInsertSchema(serviceCategories).omit({\n  id: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEventPromoSchema = createInsertSchema(eventPromos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  dateTime: z.string().or(z.date()).transform((val) => {\n    if (typeof val === 'string') {\n      return new Date(val);\n    }\n    return val;\n  }),\n});\n\nexport const insertGalleryImageSchema = createInsertSchema(galleryImages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFeedbackSchema = createInsertSchema(feedback).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContentSettingsSchema = createInsertSchema(contentSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertStaffSchema = createInsertSchema(staff).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStaffAvailabilitySchema = createInsertSchema(staffAvailability).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStaffServicesSchema = createInsertSchema(staffServices).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type UpsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type ServiceCategory = typeof serviceCategories.$inferSelect;\nexport type Service = typeof services.$inferSelect;\nexport type EventPromo = typeof eventPromos.$inferSelect;\nexport type Booking = typeof bookings.$inferSelect;\nexport type Staff = typeof staff.$inferSelect;\nexport type GalleryImage = typeof galleryImages.$inferSelect;\nexport type Feedback = typeof feedback.$inferSelect;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type ContentSettings = typeof contentSettings.$inferSelect;\nexport type StaffAvailability = typeof staffAvailability.$inferSelect;\nexport type StaffServices = typeof staffServices.$inferSelect;\n\nexport type InsertServiceCategory = z.infer<typeof insertServiceCategorySchema>;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type InsertEventPromo = z.infer<typeof insertEventPromoSchema>;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type InsertGalleryImage = z.infer<typeof insertGalleryImageSchema>;\nexport type InsertFeedback = z.infer<typeof insertFeedbackSchema>;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type InsertContentSettings = z.infer<typeof insertContentSettingsSchema>;\nexport type InsertStaff = z.infer<typeof insertStaffSchema>;\nexport type InsertStaffAvailability = z.infer<typeof insertStaffAvailabilitySchema>;\nexport type InsertStaffServices = z.infer<typeof insertStaffServicesSchema>;\n","size_bytes":12116},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"./pages/not-found\";\nimport AuthPage from \"./pages/AuthPage\";\nimport Landing from \"./pages/landing\";\nimport Home from \"./pages/home\";\nimport Services from \"./pages/services\";\nimport Booking from \"./pages/booking\";\nimport Gallery from \"./pages/gallery\";\nimport Feedback from \"./pages/feedback\";\nimport Contact from \"./pages/contact\";\nimport Account from \"./pages/account\";\nimport AdminDashboard from \"./pages/admin/dashboard\";\nimport AdminServices from \"./pages/admin/services\";\nimport AdminBookings from \"./pages/admin/bookings\";\nimport AdminStaff from \"./pages/admin/staff\";\nimport AdminGallery from \"./pages/admin/gallery\";\nimport AdminFeedback from \"./pages/admin/feedback\";\nimport AdminEvents from \"./pages/admin/events\";\nimport AdminSettings from \"./pages/admin/settings\";\nimport AdminLoginPage from \"./pages/admin/AdminLoginPage\";\n\nfunction Router() {\n  const { user } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes available to everyone */}\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/admin/login\" component={AdminLoginPage} />\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/booking\" component={Booking} />\n      <Route path=\"/gallery\" component={Gallery} />\n      <Route path=\"/feedback\" component={Feedback} />\n      <Route path=\"/contact\" component={Contact} />\n      \n      {/* Protected routes for authenticated users */}\n      <ProtectedRoute path=\"/account\" component={() => <Account />} />\n      <ProtectedRoute path=\"/home\" component={() => <Home />} />\n      \n      {/* Admin routes - protected and require ADMIN role */}\n      <Route path=\"/admin\">\n        {user?.role === 'ADMIN' ? <AdminDashboard /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/services\">\n        {user?.role === 'ADMIN' ? <AdminServices /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/bookings\">\n        {user?.role === 'ADMIN' ? <AdminBookings /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/staff\">\n        {user?.role === 'ADMIN' ? <AdminStaff /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/gallery\">\n        {user?.role === 'ADMIN' ? <AdminGallery /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/feedback\">\n        {user?.role === 'ADMIN' ? <AdminFeedback /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/events\">\n        {user?.role === 'ADMIN' ? <AdminEvents /> : <NotFound />}\n      </Route>\n      <Route path=\"/admin/settings\">\n        {user?.role === 'ADMIN' ? <AdminSettings /> : <NotFound />}\n      </Route>\n      \n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3321},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;500;600;700&family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(30, 40%, 98%);\n  --foreground: hsl(222, 84%, 5%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222, 84%, 5%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222, 84%, 5%);\n  --primary: hsl(330, 81%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(30, 12%, 90%);\n  --secondary-foreground: hsl(222, 47%, 11%);\n  --muted: hsl(30, 12%, 95%);\n  --muted-foreground: hsl(215, 16%, 47%);\n  --accent: hsl(45, 93%, 47%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(330, 81%, 60%);\n  --radius: 1rem;\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: Menlo, monospace;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 47%, 11%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(330, 81%, 60%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(222, 47%, 11%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(215, 16%, 47%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(45, 93%, 47%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(215, 16%, 47%);\n  --input: hsl(215, 16%, 47%);\n  --ring: hsl(330, 81%, 60%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .luxury-gradient {\n    background: linear-gradient(135deg, hsl(330, 81%, 60%) 0%, hsl(320, 70%, 55%) 50%, hsl(45, 93%, 47%) 100%);\n  }\n  \n  .glass-effect {\n    background: rgba(255, 255, 255, 0.25);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n  }\n  \n  .text-shadow {\n    text-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  }\n  \n  .hover-lift {\n    transition: all 0.3s ease;\n  }\n  \n  .hover-lift:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n}\n","size_bytes":2460},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminLayout.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Calendar, \n  Users, \n  Star, \n  Settings, \n  Image, \n  MessageSquare, \n  Home,\n  LogOut,\n  Menu,\n  X,\n  Sparkles\n} from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const { user, logoutMutation } = useAuth();\n  const [location] = useLocation();\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n\n  const navigation = [\n    { name: 'Dashboard', href: '/admin', icon: Home },\n    { name: 'Services', href: '/admin/services', icon: Sparkles },\n    { name: 'Bookings', href: '/admin/bookings', icon: Calendar },\n    { name: 'Staff', href: '/admin/staff', icon: Users },\n    { name: 'Gallery', href: '/admin/gallery', icon: Image },\n    { name: 'Feedback', href: '/admin/feedback', icon: MessageSquare },\n    { name: 'Events', href: '/admin/events', icon: Star },\n    { name: 'Settings', href: '/admin/settings', icon: Settings },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === '/admin') {\n      return location === href;\n    }\n    return location.startsWith(href);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Mobile sidebar backdrop */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n          data-testid=\"sidebar-backdrop\"\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`fixed inset-y-0 left-0 z-50 w-64 bg-card border-r transform transition-transform duration-200 ease-in-out lg:translate-x-0 ${\n        sidebarOpen ? 'translate-x-0' : '-translate-x-full'\n      }`} data-testid=\"admin-sidebar\">\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between h-16 px-6 border-b\">\n            <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"logo-link\">\n              <div className=\"w-8 h-8 luxury-gradient rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-sm\">✨</span>\n              </div>\n              <span className=\"text-lg font-serif font-bold text-primary\">HOME BASE</span>\n            </Link>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={() => setSidebarOpen(false)}\n              data-testid=\"close-sidebar\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          {/* User info */}\n          <div className=\"px-6 py-4 border-b\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-primary\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-foreground\" data-testid=\"admin-name\">\n                  {user?.firstName || 'Admin'}\n                </p>\n                <p className=\"text-sm text-muted-foreground\">Administrator</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex-1 px-4 py-4 space-y-2\" data-testid=\"admin-navigation\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <Button\n                    variant={isActive(item.href) ? \"default\" : \"ghost\"}\n                    className={`w-full justify-start ${\n                      isActive(item.href) \n                        ? 'bg-primary text-primary-foreground' \n                        : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                    }`}\n                    onClick={() => setSidebarOpen(false)}\n                    data-testid={`nav-${item.name.toLowerCase()}`}\n                  >\n                    <Icon className=\"w-4 h-4 mr-3\" />\n                    {item.name}\n                  </Button>\n                </Link>\n              );\n            })}\n          </nav>\n\n          <Separator />\n\n          {/* Footer actions */}\n          <div className=\"p-4 space-y-2\">\n            <Link href=\"/\">\n              <Button variant=\"ghost\" className=\"w-full justify-start text-muted-foreground\" data-testid=\"back-to-site\">\n                <Home className=\"w-4 h-4 mr-3\" />\n                Back to Site\n              </Button>\n            </Link>\n            <Button \n              variant=\"ghost\" \n              className=\"w-full justify-start text-muted-foreground\"\n              onClick={() => logoutMutation.mutate()}\n              data-testid=\"logout-button\"\n            >\n              <LogOut className=\"w-4 h-4 mr-3\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"lg:pl-64\">\n        {/* Top bar */}\n        <div className=\"sticky top-0 z-30 bg-background/95 backdrop-blur border-b\">\n          <div className=\"flex items-center justify-between h-16 px-4 sm:px-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"lg:hidden\"\n              onClick={() => setSidebarOpen(true)}\n              data-testid=\"open-sidebar\"\n            >\n              <Menu className=\"w-4 h-4\" />\n            </Button>\n            <div className=\"text-sm text-muted-foreground\">\n              Admin Panel\n            </div>\n          </div>\n        </div>\n\n        {/* Page content */}\n        <main className=\"p-4 sm:p-6\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5900},"client/src/components/ContactSection.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  MapPin, \n  Phone, \n  Clock, \n  Facebook, \n  Instagram, \n  MessageCircle, \n  Send,\n  Mail\n} from \"lucide-react\";\n\ninterface ContactSectionProps {\n  contentSettings?: any;\n}\n\nexport default function ContactSection({ contentSettings }: ContactSectionProps) {\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    message: \"\"\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      const response = await apiRequest(\"POST\", \"/api/contact\", messageData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for contacting us. We'll get back to you soon.\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: \"\",\n        phone: \"\",\n        message: \"\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim() || !formData.message.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in your name and message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMessageMutation.mutate(formData);\n  };\n\n  const contactInfo = {\n    address: contentSettings?.address || \"Blk 483A Yishun Ave 6 Singapore 761483\",\n    phone: contentSettings?.phone || \"+65 9712 1097\",\n    email: \"kellybeautyhomebase@gmail.com\",\n    facebook: contentSettings?.facebookUrl || \"#\",\n    instagram: contentSettings?.instagramUrl || \"#\",\n    zalo: contentSettings?.zaloUrl || \"#\"\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20\" data-testid=\"contact-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"contact-title\">\n            Get In Touch\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"contact-description\">\n            We'd love to hear from you and answer any questions\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Contact Information */}\n          <div className=\"space-y-8\">\n            <div>\n              <h3 className=\"text-2xl font-serif font-bold text-foreground mb-6\" data-testid=\"visit-salon-title\">\n                Visit Our Salon\n              </h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-address\">\n                  <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                    <MapPin className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Address</p>\n                    <p className=\"text-muted-foreground\" data-testid=\"address-text\">\n                      {contactInfo.address}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-phone\">\n                  <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                    <Phone className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Phone</p>\n                    <a \n                      href={`tel:${contactInfo.phone}`}\n                      className=\"text-muted-foreground hover:text-primary transition-colors\"\n                      data-testid=\"phone-link\"\n                    >\n                      {contactInfo.phone}\n                    </a>\n                  </div>\n                </div>\n\n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-email\">\n                  <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                    <Mail className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Email</p>\n                    <a \n                      href={`mailto:${contactInfo.email}`}\n                      className=\"text-muted-foreground hover:text-primary transition-colors\"\n                      data-testid=\"email-link\"\n                    >\n                      {contactInfo.email}\n                    </a>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-start space-x-4\" data-testid=\"contact-hours\">\n                  <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                    <Clock className=\"w-5 h-5 text-white\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">Opening Hours</p>\n                    <div className=\"text-muted-foreground text-sm\" data-testid=\"hours-text\">\n                      <p>Mon–Sun: 11:00AM – 7:00PM</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"text-xl font-serif font-bold text-foreground mb-4\" data-testid=\"follow-us-title\">\n                Follow Us\n              </h3>\n              <div className=\"flex space-x-4\" data-testid=\"social-links\">\n                <a \n                  href={contactInfo.facebook} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                  data-testid=\"link-facebook\"\n                >\n                  <Facebook className=\"w-5 h-5\" />\n                </a>\n                <a \n                  href={contactInfo.instagram} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                  data-testid=\"link-instagram\"\n                >\n                  <Instagram className=\"w-5 h-5\" />\n                </a>\n                <a \n                  href={contactInfo.zalo} \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"w-12 h-12 bg-accent rounded-xl flex items-center justify-center text-accent-foreground hover:bg-accent/90 transition-all\"\n                  data-testid=\"link-zalo\"\n                >\n                  <MessageCircle className=\"w-5 h-5\" />\n                </a>\n              </div>\n            </div>\n          </div>\n          \n          {/* Contact Form */}\n          <div>\n            <Card className=\"shadow-lg\" data-testid=\"contact-form-card\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-serif\" data-testid=\"form-title\">\n                  Send Us a Message\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"contact-form\">\n                  <div>\n                    <Label htmlFor=\"contactName\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                      Full Name *\n                    </Label>\n                    <Input\n                      id=\"contactName\"\n                      type=\"text\"\n                      placeholder=\"Your full name\"\n                      value={formData.name}\n                      onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                      data-testid=\"input-contact-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"contactPhone\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                      Phone Number\n                    </Label>\n                    <Input\n                      id=\"contactPhone\"\n                      type=\"tel\"\n                      placeholder=\"Your phone number\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-contact-phone\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"contactMessage\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                      Message\n                    </Label>\n                    <Textarea\n                      id=\"contactMessage\"\n                      rows={4}\n                      placeholder=\"How can we help you?\"\n                      value={formData.message}\n                      onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n                      data-testid=\"textarea-contact-message\"\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    disabled={createMessageMutation.isPending}\n                    className=\"w-full bg-primary text-primary-foreground py-4 rounded-xl font-semibold hover:bg-primary/90 transition-all\"\n                    data-testid=\"button-send-contact-message\"\n                  >\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    {createMessageMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":10572},"client/src/components/Footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Facebook, Instagram, MessageCircle } from \"lucide-react\";\n\ninterface FooterProps {\n  contentSettings?: any;\n}\n\nexport default function Footer({ contentSettings }: FooterProps) {\n  const contactInfo = {\n    address: contentSettings?.address || \"Blk 483A Yishun Ave 6 Singapore 761483\",\n    phone: contentSettings?.phone || \"+65 9712 1097\",\n    email: \"kellybeautyhomebase@gmail.com\",\n    facebook: contentSettings?.facebookUrl || \"#\",\n    instagram: contentSettings?.instagramUrl || \"#\",\n    zalo: contentSettings?.zaloUrl || \"#\"\n  };\n\n  return (\n    <footer className=\"bg-foreground text-background py-16\" data-testid=\"footer\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <Link href=\"/\" className=\"flex items-center space-x-2 mb-6\" data-testid=\"footer-logo\">\n              <div className=\"w-10 h-10 luxury-gradient rounded-full flex items-center justify-center\">\n                <span className=\"text-white text-lg\">✨</span>\n              </div>\n              <span className=\"text-2xl font-serif font-bold text-primary\">HOME BASE</span>\n            </Link>\n            <p className=\"text-background/80 mb-6 max-w-md\" data-testid=\"footer-description\">\n              Your premier destination for luxury beauty services. Experience elegance in every detail with our professional nail, eyelash, and facial treatments.\n            </p>\n            <div className=\"flex space-x-4\" data-testid=\"footer-social-links\">\n              <a \n                href={contactInfo.facebook}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                data-testid=\"footer-facebook\"\n              >\n                <Facebook className=\"w-4 h-4\" />\n              </a>\n              <a \n                href={contactInfo.instagram}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                data-testid=\"footer-instagram\"\n              >\n                <Instagram className=\"w-4 h-4\" />\n              </a>\n              <a \n                href={contactInfo.zalo}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 bg-accent rounded-lg flex items-center justify-center text-accent-foreground hover:bg-accent/90 transition-all\"\n                data-testid=\"footer-zalo\"\n              >\n                <MessageCircle className=\"w-4 h-4\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-serif font-bold text-background mb-4\" data-testid=\"footer-quick-links-title\">\n              Quick Links\n            </h4>\n            <ul className=\"space-y-2 text-background/80\" data-testid=\"footer-quick-links\">\n              <li>\n                <Link href=\"/\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-link-home\">\n                  Home\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/services\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-link-services\">\n                  Services\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/gallery\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-link-gallery\">\n                  Gallery\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-link-contact\">\n                  Contact\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/booking\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-link-booking\">\n                  Book Now\n                </Link>\n              </li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-serif font-bold text-background mb-4\" data-testid=\"footer-contact-info-title\">\n              Contact Info\n            </h4>\n            <div className=\"space-y-2 text-background/80 text-sm\" data-testid=\"footer-contact-info\">\n              <p data-testid=\"footer-address\">\n                {contactInfo.address}\n              </p>\n              <p data-testid=\"footer-phone\">\n                Phone: {contactInfo.phone}\n              </p>\n              <p data-testid=\"footer-email\">\n                Email: {contactInfo.email}\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-background/20 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-background/60 text-sm\" data-testid=\"footer-copyright\">\n            © 2024 HOME BASE Beauty Salon. All rights reserved.\n          </p>\n          <div className=\"flex space-x-6 text-background/60 text-sm mt-4 md:mt-0\" data-testid=\"footer-legal-links\">\n            <a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-privacy\">\n              Privacy Policy\n            </a>\n            <a href=\"#\" className=\"hover:text-primary transition-colors\" data-testid=\"footer-terms\">\n              Terms of Service\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5685},"client/src/components/GallerySection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport customEyelashImage from \"@assets/Thiết kế chưa có tên (8)_1757850541617.png\";\n\ninterface GalleryImage {\n  id: string;\n  url: string;\n  category: 'Nail' | 'Eyelash' | 'Facial' | 'General';\n  caption?: string;\n}\n\ninterface GallerySectionProps {\n  images?: GalleryImage[];\n}\n\nexport default function GallerySection({ images = [] }: GallerySectionProps) {\n  const [activeFilter, setActiveFilter] = useState<string>('all');\n\n  const categories = ['all', 'Nail', 'Eyelash', 'Facial'];\n  \n  const filteredImages = activeFilter === 'all' \n    ? images \n    : images.filter(image => image.category === activeFilter);\n\n  // Fallback images if no images are provided\n  const fallbackImages = [\n    {\n      id: '1',\n      url: \"https://images.unsplash.com/photo-1632345031435-8727f6897d53?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Nail' as const,\n      caption: \"Elegant nail art designs\"\n    },\n    {\n      id: '2', \n      url: customEyelashImage,\n      category: 'Eyelash' as const,\n      caption: \"Beautiful eyelash extensions\"\n    },\n    {\n      id: '3',\n      url: \"https://images.unsplash.com/photo-1570172619644-dfd03ed5d881?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Facial' as const,\n      caption: \"Glowing skin after facial treatment\"\n    },\n    {\n      id: '4',\n      url: \"https://images.unsplash.com/photo-1604654894610-df63bc536371?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Nail' as const,\n      caption: \"Vibrant nail polish colors\"\n    },\n    {\n      id: '5',\n      url: customEyelashImage,\n      category: 'Eyelash' as const,\n      caption: \"Professional makeup with perfect lashes\"\n    },\n    {\n      id: '6',\n      url: \"https://images.unsplash.com/photo-1560750588-73207b1ef5b8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Facial' as const,\n      caption: \"Serene spa facial treatment\"\n    }\n  ];\n\n  const displayImages = images.length > 0 ? filteredImages : fallbackImages.filter(img => \n    activeFilter === 'all' || img.category === activeFilter\n  );\n\n  return (\n    <section id=\"gallery\" className=\"py-20\" data-testid=\"gallery-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"gallery-title\">\n            Our Gallery\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"gallery-description\">\n            Showcasing our beautiful work and transformations\n          </p>\n        </div>\n        \n        <div className=\"flex justify-center mb-8\">\n          <div className=\"bg-muted rounded-full p-1\">\n            <div className=\"flex space-x-1\">\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  onClick={() => setActiveFilter(category)}\n                  variant={activeFilter === category ? \"default\" : \"ghost\"}\n                  className={`px-6 py-2 rounded-full font-medium ${\n                    activeFilter === category \n                      ? 'bg-primary text-primary-foreground' \n                      : 'text-muted-foreground hover:text-foreground'\n                  }`}\n                  data-testid={`filter-${category.toLowerCase()}`}\n                >\n                  {category === 'all' ? 'All' : category}\n                </Button>\n              ))}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {displayImages.map((image) => (\n            <div \n              key={image.id} \n              className=\"group cursor-pointer hover-lift\"\n              data-testid={`gallery-image-${image.id}`}\n            >\n              <img \n                src={image.url} \n                alt={image.caption || `Gallery image ${image.id}`} \n                className=\"w-full h-80 object-cover rounded-2xl\"\n                data-testid={`img-${image.id}`}\n              />\n              {image.caption && (\n                <p className=\"text-center text-sm text-muted-foreground mt-2\" data-testid={`caption-${image.id}`}>\n                  {image.caption}\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n        \n        {displayImages.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-images\">\n              No images available for the selected category.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4725},"client/src/components/HeroSection.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, Users, Award } from \"lucide-react\";\n\ninterface HeroSectionProps {\n  contentSettings?: any;\n  showWelcome?: boolean;\n}\n\nexport default function HeroSection({ contentSettings, showWelcome = true }: HeroSectionProps) {\n  const slogans = contentSettings?.slogans || [\n    \"Elegance in Every Detail\",\n    \"Your Beauty, Perfectly Timed\", \n    \"HOME BASE • Shine • Sophistication\"\n  ];\n\n  if (!showWelcome) {\n    return null;\n  }\n\n  return (\n    <section id=\"home\" className=\"relative min-h-screen flex items-center overflow-hidden\" data-testid=\"hero-section\">\n      {/* Background */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-pink-50 via-rose-50 to-amber-50\"></div>\n      <div \n        className=\"absolute inset-0 opacity-20\" \n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1560750588-73207b1ef5b8?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')\",\n          backgroundSize: 'cover',\n          backgroundPosition: 'center'\n        }}\n      ></div>\n      \n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-5xl lg:text-7xl font-serif font-bold text-foreground leading-tight\" data-testid=\"hero-title\">\n                <span className=\"text-shadow\">{slogans[0]?.split(' ').slice(0, -2).join(' ') || 'Elegance in'}</span><br />\n                <span className=\"bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                  {slogans[0]?.split(' ').slice(-2).join(' ') || 'Every Detail'}\n                </span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-lg\" data-testid=\"hero-description\">\n                Experience luxury beauty services with our expert team. Specializing in premium nail care, eyelash extensions, and rejuvenating facial treatments.\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Link href=\"/booking\">\n                <Button \n                  size=\"lg\"\n                  className=\"bg-primary text-primary-foreground px-8 py-4 rounded-full text-lg font-semibold hover:bg-primary/90 hover-lift\"\n                  data-testid=\"button-book-appointment\"\n                >\n                  Book Appointment\n                </Button>\n              </Link>\n              <Link href=\"/services\">\n                <Button \n                  variant=\"outline\"\n                  size=\"lg\"\n                  className=\"border-2 border-primary text-primary px-8 py-4 rounded-full text-lg font-semibold hover:bg-primary hover:text-primary-foreground\"\n                  data-testid=\"button-view-services\"\n                >\n                  View Services\n                </Button>\n              </Link>\n            </div>\n            \n            <div className=\"flex items-center space-x-8 text-sm text-muted-foreground\">\n              <div className=\"flex items-center space-x-2\" data-testid=\"hero-stat-rating\">\n                <Star className=\"w-4 h-4 text-accent fill-current\" />\n                <span>5.0 Rating</span>\n              </div>\n              <div className=\"flex items-center space-x-2\" data-testid=\"hero-stat-clients\">\n                <Users className=\"w-4 h-4 text-accent\" />\n                <span>1000+ Happy Clients</span>\n              </div>\n              <div className=\"flex items-center space-x-2\" data-testid=\"hero-stat-professionals\">\n                <Award className=\"w-4 h-4 text-accent\" />\n                <span>Licensed Professionals</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"relative\">\n            <div className=\"relative z-10\">\n              <img \n                src=\"https://images.unsplash.com/photo-1632345031435-8727f6897d53?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Luxury beauty treatments showcase\" \n                className=\"rounded-3xl shadow-2xl w-full\"\n                data-testid=\"hero-image\"\n              />\n            </div>\n            <div className=\"absolute -top-4 -right-4 w-72 h-72 luxury-gradient rounded-full opacity-20 blur-3xl\"></div>\n            <div className=\"absolute -bottom-4 -left-4 w-64 h-64 bg-accent/30 rounded-full opacity-20 blur-3xl\"></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4595},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  NavigationMenu, \n  NavigationMenuContent, \n  NavigationMenuItem, \n  NavigationMenuLink, \n  NavigationMenuList, \n  NavigationMenuTrigger \n} from \"@/components/ui/navigation-menu\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu, User, LogOut, Settings, Calendar } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport default function Navigation() {\n  const { user, isAuthenticated, logoutMutation } = useAuth();\n  const [location] = useLocation();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/services\", label: \"Services\" },\n    { href: \"/gallery\", label: \"Gallery\" },\n    { href: \"/contact\", label: \"Contact\" },\n  ];\n\n  const isActive = (href: string) => location === href;\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-effect\" data-testid=\"navigation-main\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-logo\">\n            <div className=\"w-10 h-10 luxury-gradient rounded-full flex items-center justify-center\">\n              <span className=\"text-white text-lg\">✨</span>\n            </div>\n            <span className=\"text-2xl font-serif font-bold text-primary\">HOME BASE</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={`transition-colors ${\n                  isActive(item.href)\n                    ? \"text-primary font-medium\"\n                    : \"text-foreground hover:text-primary\"\n                }`}\n                data-testid={`link-${item.label.toLowerCase()}`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n          \n          {/* Desktop Actions */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link href=\"/booking\">\n              <Button \n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-book-now\"\n              >\n                Book Now\n              </Button>\n            </Link>\n            \n            {isAuthenticated ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-user-menu\">\n                    <User className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" data-testid=\"dropdown-user-menu\">\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/account\" className=\"flex items-center\" data-testid=\"link-account\">\n                      <User className=\"w-4 h-4 mr-2\" />\n                      My Account\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/account\" className=\"flex items-center\" data-testid=\"link-my-bookings\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      My Bookings\n                    </Link>\n                  </DropdownMenuItem>\n                  {user?.role === 'ADMIN' && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\" className=\"flex items-center\" data-testid=\"link-admin\">\n                        <Settings className=\"w-4 h-4 mr-2\" />\n                        HOME BASE Admin\n                      </Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem asChild>\n                    <button \n                      onClick={() => logoutMutation.mutate()} \n                      className=\"flex items-center w-full\" \n                      data-testid=\"button-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Logout\n                    </button>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button variant=\"ghost\" asChild data-testid=\"button-login\">\n                <Link href=\"/auth\">\n                  <User className=\"w-4 h-4 mr-2\" />\n                  Login\n                </Link>\n              </Button>\n            )}\n          </div>\n          \n          {/* Mobile Menu */}\n          <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\" data-testid=\"button-mobile-menu\">\n                <Menu className=\"w-4 h-4\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent data-testid=\"sheet-mobile-menu\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    onClick={() => setMobileOpen(false)}\n                    className={`text-lg transition-colors ${\n                      isActive(item.href)\n                        ? \"text-primary font-medium\"\n                        : \"text-foreground hover:text-primary\"\n                    }`}\n                    data-testid={`mobile-link-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n                \n                <div className=\"pt-4 space-y-2\">\n                  <Link href=\"/booking\" onClick={() => setMobileOpen(false)}>\n                    <Button className=\"w-full\" data-testid=\"mobile-button-book-now\">\n                      Book Now\n                    </Button>\n                  </Link>\n                  \n                  {isAuthenticated ? (\n                    <>\n                      <Link href=\"/account\" onClick={() => setMobileOpen(false)}>\n                        <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"mobile-link-account\">\n                          <User className=\"w-4 h-4 mr-2\" />\n                          My Account\n                        </Button>\n                      </Link>\n                      {user?.role === 'ADMIN' && (\n                        <Link href=\"/admin\" onClick={() => setMobileOpen(false)}>\n                          <Button variant=\"outline\" className=\"w-full justify-start\" data-testid=\"mobile-link-admin\">\n                            <Settings className=\"w-4 h-4 mr-2\" />\n                            HOME BASE Admin\n                          </Button>\n                        </Link>\n                      )}\n                      <Button \n                        variant=\"outline\" \n                        className=\"w-full justify-start\" \n                        onClick={() => logoutMutation.mutate()}\n                        data-testid=\"mobile-button-logout\"\n                      >\n                        <LogOut className=\"w-4 h-4 mr-2\" />\n                        Logout\n                      </Button>\n                    </>\n                  ) : (\n                    <Button variant=\"outline\" className=\"w-full justify-start\" asChild data-testid=\"mobile-button-login\">\n                      <Link href=\"/auth\">\n                        <User className=\"w-4 h-4 mr-2\" />\n                        Login\n                      </Link>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8091},"client/src/components/PromotionsSection.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Percent } from \"lucide-react\";\n\ninterface EventPromo {\n  id: string;\n  title: string;\n  description: string;\n  discountType: 'PERCENT' | 'AMOUNT';\n  value: string;\n  startAt: string;\n  endAt: string;\n  scopeType: 'GLOBAL' | 'CATEGORY' | 'SERVICE';\n}\n\ninterface PromotionsSectionProps {\n  promotions?: EventPromo[];\n}\n\nexport default function PromotionsSection({ promotions = [] }: PromotionsSectionProps) {\n  if (!promotions || promotions.length === 0) {\n    return null;\n  }\n\n  const formatDiscountValue = (promo: EventPromo) => {\n    if (promo.discountType === 'PERCENT') {\n      return `${parseFloat(promo.value)}% OFF`;\n    } else {\n      return `$${parseFloat(promo.value)} OFF`;\n    }\n  };\n\n  const formatEndDate = (endDate: string) => {\n    return new Date(endDate).toLocaleDateString('en-US', { \n      year: 'numeric', \n      month: 'short', \n      day: 'numeric' \n    });\n  };\n\n  return (\n    <section className=\"py-20\" data-testid=\"promotions-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"promotions-title\">\n            Special Offers\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"promotions-description\">\n            Limited time promotions for our valued clients\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n          {promotions.slice(0, 2).map((promo, index) => (\n            <div \n              key={promo.id}\n              className={`relative overflow-hidden rounded-3xl p-8 text-white ${\n                index === 0 \n                  ? 'luxury-gradient' \n                  : 'bg-gradient-to-br from-accent/20 to-accent/5 border border-accent/20 text-foreground'\n              }`}\n              data-testid={`promotion-${promo.id}`}\n            >\n              <div className=\"relative z-10\">\n                <div className={`inline-block px-4 py-2 rounded-full text-sm font-semibold mb-4 ${\n                  index === 0 \n                    ? 'bg-white/20 text-white' \n                    : 'bg-accent text-accent-foreground'\n                }`}>\n                  <Badge variant=\"secondary\" data-testid={`badge-${promo.id}`}>\n                    <Clock className=\"w-3 h-3 mr-1\" />\n                    Limited Time\n                  </Badge>\n                </div>\n                \n                <h3 className={`text-3xl font-serif font-bold mb-4 ${\n                  index === 0 ? 'text-white' : 'text-foreground'\n                }`} data-testid={`title-${promo.id}`}>\n                  {promo.title}\n                </h3>\n                \n                <p className={`mb-6 ${\n                  index === 0 ? 'text-white/90' : 'text-muted-foreground'\n                }`} data-testid={`description-${promo.id}`}>\n                  {promo.description}\n                </p>\n                \n                <div className=\"flex items-center space-x-4 mb-6\">\n                  <span className={`text-2xl font-bold flex items-center ${\n                    index === 0 ? 'text-white' : 'text-foreground'\n                  }`} data-testid={`discount-${promo.id}`}>\n                    <Percent className=\"w-5 h-5 mr-1\" />\n                    {formatDiscountValue(promo)}\n                  </span>\n                  <span className={`${\n                    index === 0 ? 'text-white/80' : 'text-muted-foreground'\n                  }`} data-testid={`valid-until-${promo.id}`}>\n                    Valid until {formatEndDate(promo.endAt)}\n                  </span>\n                </div>\n                \n                <Link href=\"/booking\">\n                  <Button \n                    className={`${\n                      index === 0 \n                        ? 'bg-white text-primary hover:bg-white/90' \n                        : 'bg-primary text-primary-foreground hover:bg-primary/90'\n                    } font-semibold transition-all`}\n                    data-testid={`button-claim-${promo.id}`}\n                  >\n                    {index === 0 ? 'Claim Offer' : 'Book Package'}\n                  </Button>\n                </Link>\n              </div>\n              \n              {index === 0 && (\n                <div className=\"absolute top-0 right-0 w-32 h-32 bg-white/10 rounded-full -mr-16 -mt-16\"></div>\n              )}\n            </div>\n          ))}\n        </div>\n        \n        {promotions.length > 2 && (\n          <div className=\"text-center mt-8\">\n            <Link href=\"/services\">\n              <Button variant=\"outline\" data-testid=\"button-view-all-offers\">\n                View All Offers\n              </Button>\n            </Link>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4949},"client/src/components/ServicesSection.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Sparkles, Eye, Leaf } from \"lucide-react\";\nimport customEyelashImage from \"@assets/Thiết kế chưa có tên (8)_1757850541617.png\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  basePrice: string;\n  effectivePrice?: number;\n  hasDiscount?: boolean;\n  isNail: boolean;\n  isEyelash: boolean;\n  isFacial: boolean;\n}\n\ninterface ServicesSectionProps {\n  services?: Service[];\n}\n\nexport default function ServicesSection({ services = [] }: ServicesSectionProps) {\n  // Group services by category based on boolean flags\n  const servicesByCategory = services.reduce((acc, service) => {\n    // Add service to multiple categories if it belongs to multiple\n    if (service.isNail) {\n      if (!acc[\"Nail\"]) acc[\"Nail\"] = [];\n      acc[\"Nail\"].push(service);\n    }\n    if (service.isEyelash) {\n      if (!acc[\"Eyelash\"]) acc[\"Eyelash\"] = [];\n      acc[\"Eyelash\"].push(service);\n    }\n    if (service.isFacial) {\n      if (!acc[\"Facial\"]) acc[\"Facial\"] = [];\n      acc[\"Facial\"].push(service);\n    }\n    return acc;\n  }, {} as Record<string, Service[]>);\n\n  const getCategoryIcon = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case 'nail':\n        return <Sparkles className=\"text-white text-2xl\" />;\n      case 'eyelash':\n        return <Eye className=\"text-white text-2xl\" />;\n      case 'facial':\n        return <Leaf className=\"text-white text-2xl\" />;\n      default:\n        return <Sparkles className=\"text-white text-2xl\" />;\n    }\n  };\n\n  const getCategoryImage = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case 'nail':\n        return \"https://images.unsplash.com/photo-1604654894610-df63bc536371?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n      case 'eyelash':\n        return customEyelashImage;\n      case 'facial':\n        return \"https://images.unsplash.com/photo-1570172619644-dfd03ed5d881?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n      default:\n        return \"https://images.unsplash.com/photo-1560750588-73207b1ef5b8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n    }\n  };\n\n  const getCategoryDescription = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case 'nail':\n        return \"Premium manicures, pedicures, nail art, and gel treatments using top-quality products for lasting beauty.\";\n      case 'eyelash':\n        return \"Professional eyelash extensions, lifts, and tinting to enhance your natural beauty and create stunning looks.\";\n      case 'facial':\n        return \"Rejuvenating facial treatments tailored to your skin type, using premium products for radiant, healthy skin.\";\n      default:\n        return \"Professional beauty services tailored to your needs.\";\n    }\n  };\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-muted/30\" data-testid=\"services-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"services-title\">\n            Our Signature Services\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"services-description\">\n            Indulge in our comprehensive beauty treatments designed to enhance your natural radiance\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {Object.entries(servicesByCategory).map(([categoryName, categoryServices]) => (\n            <div \n              key={categoryName} \n              className=\"bg-card rounded-3xl p-8 shadow-lg hover-lift group\"\n              data-testid={`service-category-${categoryName.toLowerCase()}`}\n            >\n              <div className=\"mb-6\">\n                <img \n                  src={getCategoryImage(categoryName)} \n                  alt={`Professional ${categoryName.toLowerCase()} services`} \n                  className=\"w-full h-48 object-cover rounded-2xl mb-4\"\n                  data-testid={`img-${categoryName.toLowerCase()}`}\n                />\n                <div className=\"w-16 h-16 luxury-gradient rounded-2xl flex items-center justify-center mb-4\">\n                  {getCategoryIcon(categoryName)}\n                </div>\n              </div>\n              \n              <h3 className=\"text-2xl font-serif font-bold text-foreground mb-3\" data-testid={`title-${categoryName.toLowerCase()}`}>\n                {categoryName} Services\n              </h3>\n              \n              <p className=\"text-muted-foreground mb-6\" data-testid={`description-${categoryName.toLowerCase()}`}>\n                {getCategoryDescription(categoryName)}\n              </p>\n              \n              <div className=\"space-y-2 mb-6\">\n                {categoryServices.slice(0, 3).map((service) => (\n                  <div key={service.id} className=\"flex justify-between items-center\" data-testid={`service-${service.id}`}>\n                    <span className=\"text-sm\" data-testid={`service-name-${service.id}`}>{service.name}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      {service.hasDiscount && service.effectivePrice ? (\n                        <>\n                          <span className=\"text-xs text-muted-foreground line-through\" data-testid={`original-price-${service.id}`}>\n                            ${parseFloat(service.basePrice).toFixed(2)}\n                          </span>\n                          <span className=\"text-primary font-semibold\" data-testid={`effective-price-${service.id}`}>\n                            ${service.effectivePrice.toFixed(2)}\n                          </span>\n                          <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`discount-badge-${service.id}`}>\n                            SALE\n                          </Badge>\n                        </>\n                      ) : (\n                        <span className=\"text-primary font-semibold\" data-testid={`price-${service.id}`}>\n                          ${parseFloat(service.basePrice).toFixed(2)}\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <Link href=\"/booking\">\n                <Button \n                  className=\"w-full bg-primary/10 text-primary hover:bg-primary hover:text-primary-foreground transition-all group-hover:bg-primary group-hover:text-primary-foreground\"\n                  data-testid={`button-book-${categoryName.toLowerCase()}`}\n                >\n                  Book {categoryName} Service\n                </Button>\n              </Link>\n            </div>\n          ))}\n        </div>\n        \n        {Object.keys(servicesByCategory).length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-services\">\n              No services available at the moment. Please check back later.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":7245},"client/src/components/TestimonialsSection.tsx":{"content":"import { Star } from \"lucide-react\";\n\ninterface Feedback {\n  id: string;\n  rating: number;\n  title?: string;\n  comment: string;\n  customerName?: string;\n  user?: {\n    firstName?: string;\n    lastName?: string;\n  };\n}\n\ninterface TestimonialsSectionProps {\n  feedback?: Feedback[];\n}\n\nexport default function TestimonialsSection({ feedback = [] }: TestimonialsSectionProps) {\n  // Fallback testimonials if no feedback is provided\n  const fallbackTestimonials = [\n    {\n      id: '1',\n      rating: 5,\n      comment: \"Absolutely amazing service! The nail art was exactly what I wanted and the staff was so professional. Will definitely be coming back!\",\n      customerName: \"Sarah Johnson\",\n      role: \"Regular Client\"\n    },\n    {\n      id: '2',\n      rating: 5, \n      comment: \"The facial treatment was incredible! My skin has never looked better. The atmosphere is so relaxing and luxurious.\",\n      customerName: \"Emma Davis\",\n      role: \"Facial Client\"\n    },\n    {\n      id: '3',\n      rating: 5,\n      comment: \"Best eyelash extensions I've ever had! They look so natural yet dramatic. The technician was skilled and gentle.\",\n      customerName: \"Maya Rodriguez\", \n      role: \"Lash Client\"\n    }\n  ];\n\n  const displayTestimonials = feedback.length > 0 \n    ? feedback.filter(f => f.rating >= 4).slice(0, 3)\n    : fallbackTestimonials;\n\n  const getCustomerName = (testimonial: any) => {\n    if (testimonial.customerName) return testimonial.customerName;\n    if (testimonial.user?.firstName) {\n      return `${testimonial.user.firstName} ${testimonial.user.lastName || ''}`.trim();\n    }\n    return \"Anonymous Customer\";\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star \n        key={i} \n        className={`w-4 h-4 ${i < rating ? 'text-accent fill-current' : 'text-muted-foreground'}`}\n      />\n    ));\n  };\n\n  return (\n    <section className=\"py-20 bg-muted/30\" data-testid=\"testimonials-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-4xl font-serif font-bold text-foreground mb-4\" data-testid=\"testimonials-title\">\n            What Our Clients Say\n          </h2>\n          <p className=\"text-xl text-muted-foreground\" data-testid=\"testimonials-description\">\n            Real feedback from our satisfied customers\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {displayTestimonials.map((testimonial) => (\n            <div \n              key={testimonial.id} \n              className=\"bg-card rounded-3xl p-8 shadow-lg\"\n              data-testid={`testimonial-${testimonial.id}`}\n            >\n              <div className=\"flex items-center mb-4\" data-testid={`rating-${testimonial.id}`}>\n                <div className=\"flex\">\n                  {renderStars(testimonial.rating)}\n                </div>\n              </div>\n              \n              <p className=\"text-muted-foreground mb-6\" data-testid={`comment-${testimonial.id}`}>\n                \"{testimonial.comment}\"\n              </p>\n              \n              <div className=\"flex items-center\">\n                <img \n                  src={`https://api.dicebear.com/7.x/avataaars/svg?seed=${getCustomerName(testimonial)}`}\n                  alt={`${getCustomerName(testimonial)} avatar`} \n                  className=\"w-12 h-12 rounded-full object-cover mr-4\"\n                  data-testid={`avatar-${testimonial.id}`}\n                />\n                <div>\n                  <h4 className=\"font-semibold text-foreground\" data-testid={`name-${testimonial.id}`}>\n                    {getCustomerName(testimonial)}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\" data-testid={`role-${testimonial.id}`}>\n                    {(testimonial as any).role || \"Valued Client\"}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {displayTestimonials.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground\" data-testid=\"text-no-testimonials\">\n              No customer testimonials available yet.\n            </p>\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4351},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/pricing.ts":{"content":"import { Service, EventPromo } from \"@shared/schema\";\n\nexport interface EffectivePrice {\n  original: number;\n  final: number;\n  discount: number;\n  hasDiscount: boolean;\n  appliedPromo?: EventPromo;\n}\n\nexport function calculateEffectivePrice(service: Service, activePromos: EventPromo[]): EffectivePrice {\n  const basePrice = parseFloat(service.basePrice);\n  let finalPrice = basePrice;\n  let discount = 0;\n  let appliedPromo: EventPromo | undefined;\n\n  // Find the best applicable promo\n  const applicablePromos = activePromos.filter(promo => {\n    if (promo.scopeType === 'GLOBAL') return true;\n    if (promo.scopeType === 'CATEGORY') return promo.scopeId === service.categoryId;\n    if (promo.scopeType === 'SERVICE') return promo.scopeId === service.id;\n    return false;\n  });\n\n  // Apply the best discount (highest absolute value)\n  for (const promo of applicablePromos) {\n    let promoDiscount = 0;\n    \n    if (promo.discountType === 'PERCENT') {\n      promoDiscount = (basePrice * parseFloat(promo.value)) / 100;\n    } else {\n      promoDiscount = parseFloat(promo.value);\n    }\n\n    if (promoDiscount > discount) {\n      discount = promoDiscount;\n      appliedPromo = promo;\n    }\n  }\n\n  finalPrice = Math.max(0, basePrice - discount);\n\n  return {\n    original: basePrice,\n    final: finalPrice,\n    discount,\n    hasDiscount: discount > 0,\n    appliedPromo,\n  };\n}\n","size_bytes":1376},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/account.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  User, \n  Calendar, \n  Clock, \n  MapPin, \n  Phone, \n  Mail, \n  Star,\n  CheckCircle,\n  XCircle,\n  AlertCircle\n} from \"lucide-react\";\n\nexport default function Account() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    document.title = \"My Account - HOME BASE Beauty Salon\";\n    \n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: bookings = [], isLoading: bookingsLoading, error: bookingsError } = useQuery<any[], Error>({\n    queryKey: [\"/api/my-bookings\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  const { data: contentSettings } = useQuery({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  // Handle unauthorized error\n  useEffect(() => {\n    if (bookingsError && isUnauthorizedError(bookingsError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [bookingsError, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 pb-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-12 bg-muted rounded w-1/2 mx-auto mb-4\"></div>\n              <div className=\"h-6 bg-muted rounded w-1/3 mx-auto\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null; // Will redirect to login\n  }\n\n  const upcomingBookings = (bookings as any[]).filter(\n    (booking: any) => new Date(booking.dateTime) > new Date() && booking.status !== 'CANCELLED'\n  );\n\n  const pastBookings = (bookings as any[]).filter(\n    (booking: any) => new Date(booking.dateTime) <= new Date() || booking.status === 'DONE'\n  );\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      case 'DONE':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'PENDING':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'CANCELLED':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'DONE':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"account-title\">\n              My Account\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"account-description\">\n              Welcome back, {user?.firstName || 'Beautiful'}!\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-20\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Tabs defaultValue=\"profile\" className=\"w-full\" data-testid=\"account-tabs\">\n            <TabsList className=\"grid w-full grid-cols-3 mb-8\" data-testid=\"tabs-list\">\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">Profile</TabsTrigger>\n              <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">Upcoming</TabsTrigger>\n              <TabsTrigger value=\"history\" data-testid=\"tab-history\">History</TabsTrigger>\n            </TabsList>\n\n            {/* Profile Tab */}\n            <TabsContent value=\"profile\" data-testid=\"tab-content-profile\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                <Card data-testid=\"profile-info-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <User className=\"w-5 h-5 text-primary\" />\n                      <span>Profile Information</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div data-testid=\"profile-name\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Full Name</p>\n                      <p className=\"text-foreground\" data-testid=\"text-full-name\">\n                        {`${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Not provided'}\n                      </p>\n                    </div>\n                    <div data-testid=\"profile-email\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                      <p className=\"text-foreground\" data-testid=\"text-email\">\n                        {user?.email || 'Not provided'}\n                      </p>\n                    </div>\n                    <div data-testid=\"profile-phone\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Phone</p>\n                      <p className=\"text-foreground\" data-testid=\"text-phone\">\n                        {user?.phone || 'Not provided'}\n                      </p>\n                    </div>\n                    <div data-testid=\"profile-role\">\n                      <p className=\"text-sm font-medium text-muted-foreground\">Account Type</p>\n                      <Badge variant={user?.role === 'ADMIN' ? 'default' : 'secondary'} data-testid=\"badge-role\">\n                        {user?.role === 'ADMIN' ? 'Administrator' : 'Customer'}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"account-stats-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Star className=\"w-5 h-5 text-primary\" />\n                      <span>Account Statistics</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-muted/30 rounded-lg\" data-testid=\"stat-total-bookings\">\n                        <p className=\"text-2xl font-bold text-primary\" data-testid=\"text-total-bookings\">\n                          {bookings.length}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">Total Bookings</p>\n                      </div>\n                      <div className=\"text-center p-4 bg-muted/30 rounded-lg\" data-testid=\"stat-upcoming-bookings\">\n                        <p className=\"text-2xl font-bold text-accent\" data-testid=\"text-upcoming-bookings\">\n                          {upcomingBookings.length}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">Upcoming</p>\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-muted/30 rounded-lg\" data-testid=\"stat-member-since\">\n                      <p className=\"text-sm text-muted-foreground\">Member Since</p>\n                      <p className=\"font-semibold text-foreground\" data-testid=\"text-member-since\">\n                        {user?.createdAt ? new Date(user.createdAt).toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long' \n                        }) : 'Recently'}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Upcoming Bookings Tab */}\n            <TabsContent value=\"upcoming\" data-testid=\"tab-content-upcoming\">\n              <Card data-testid=\"upcoming-bookings-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Calendar className=\"w-5 h-5 text-primary\" />\n                    <span>Upcoming Appointments</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {bookingsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 3 }, (_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-20 bg-muted rounded-lg\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : upcomingBookings.length > 0 ? (\n                    <div className=\"space-y-4\" data-testid=\"upcoming-bookings-list\">\n                      {upcomingBookings.map((booking: any) => (\n                        <div \n                          key={booking.id} \n                          className=\"p-4 border rounded-lg hover:bg-muted/30 transition-colors\"\n                          data-testid={`upcoming-booking-${booking.id}`}\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <h3 className=\"font-semibold text-foreground\" data-testid={`service-name-${booking.id}`}>\n                                  {booking.service.name}\n                                </h3>\n                                <Badge className={getStatusColor(booking.status)} data-testid={`status-${booking.id}`}>\n                                  <span className=\"flex items-center space-x-1\">\n                                    {getStatusIcon(booking.status)}\n                                    <span>{booking.status}</span>\n                                  </span>\n                                </Badge>\n                              </div>\n                              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center space-x-1\" data-testid={`date-${booking.id}`}>\n                                  <Calendar className=\"w-4 h-4\" />\n                                  <span>{new Date(booking.dateTime).toLocaleDateString()}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\" data-testid={`time-${booking.id}`}>\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span>{new Date(booking.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\" data-testid={`duration-${booking.id}`}>\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span>{booking.durationMins} mins</span>\n                                </div>\n                              </div>\n                              {booking.staff && (\n                                <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`staff-${booking.id}`}>\n                                  with {booking.staff.name}\n                                </p>\n                              )}\n                              {booking.notes && (\n                                <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`notes-${booking.id}`}>\n                                  Note: {booking.notes}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold text-primary\" data-testid={`price-${booking.id}`}>\n                                ${parseFloat(booking.totalPrice || booking.service.basePrice).toFixed(2)}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Calendar className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-upcoming\">\n                        No upcoming appointments\n                      </p>\n                      <Button asChild data-testid=\"button-book-appointment\">\n                        <a href=\"/booking\">Book Your Next Appointment</a>\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Booking History Tab */}\n            <TabsContent value=\"history\" data-testid=\"tab-content-history\">\n              <Card data-testid=\"booking-history-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Clock className=\"w-5 h-5 text-primary\" />\n                    <span>Booking History</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {bookingsLoading ? (\n                    <div className=\"space-y-4\">\n                      {Array.from({ length: 5 }, (_, i) => (\n                        <div key={i} className=\"animate-pulse\">\n                          <div className=\"h-20 bg-muted rounded-lg\"></div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : pastBookings.length > 0 ? (\n                    <div className=\"space-y-4\" data-testid=\"booking-history-list\">\n                      {pastBookings.map((booking: any) => (\n                        <div \n                          key={booking.id} \n                          className=\"p-4 border rounded-lg\"\n                          data-testid={`history-booking-${booking.id}`}\n                        >\n                          <div className=\"flex items-start justify-between\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <h3 className=\"font-semibold text-foreground\" data-testid={`history-service-name-${booking.id}`}>\n                                  {booking.service.name}\n                                </h3>\n                                <Badge className={getStatusColor(booking.status)} data-testid={`history-status-${booking.id}`}>\n                                  <span className=\"flex items-center space-x-1\">\n                                    {getStatusIcon(booking.status)}\n                                    <span>{booking.status}</span>\n                                  </span>\n                                </Badge>\n                              </div>\n                              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center space-x-1\" data-testid={`history-date-${booking.id}`}>\n                                  <Calendar className=\"w-4 h-4\" />\n                                  <span>{new Date(booking.dateTime).toLocaleDateString()}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\" data-testid={`history-time-${booking.id}`}>\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span>{new Date(booking.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n                                </div>\n                                <div className=\"flex items-center space-x-1\" data-testid={`history-duration-${booking.id}`}>\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span>{booking.durationMins} mins</span>\n                                </div>\n                              </div>\n                              {booking.staff && (\n                                <p className=\"text-sm text-muted-foreground mt-1\" data-testid={`history-staff-${booking.id}`}>\n                                  with {booking.staff.name}\n                                </p>\n                              )}\n                            </div>\n                            <div className=\"text-right\">\n                              <p className=\"font-semibold text-foreground\" data-testid={`history-price-${booking.id}`}>\n                                ${parseFloat(booking.totalPrice || booking.service.basePrice).toFixed(2)}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <Clock className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"text-no-history\">\n                        No booking history yet\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":18813},"client/src/pages/booking.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertBookingSchema } from \"@shared/schema\";\nimport { format, addDays, isAfter, isBefore, setHours, setMinutes } from \"date-fns\";\nimport { CalendarIcon, Clock, MapPin, User } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function Booking() {\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedService, setSelectedService] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [selectedTime, setSelectedTime] = useState(\"\");\n  const [customerInfo, setCustomerInfo] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\",\n    notes: \"\"\n  });\n\n  useEffect(() => {\n    document.title = \"Book Appointment - HOME BASE Beauty Salon\";\n    \n    // Pre-fill customer info if logged in\n    if (user) {\n      setCustomerInfo(prev => ({\n        ...prev,\n        name: `${user.firstName || ''} ${user.lastName || ''}`.trim(),\n        email: user.email || '',\n        phone: user.phone || ''\n      }));\n    }\n  }, [user]);\n\n  const { data: services = [] } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n\n  const { data: contentSettings = {} } = useQuery<any>({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const selectedServiceData = services.find((s: any) => s.id === selectedService);\n\n  // Generate available time slots during salon operating hours (11:00 AM - 7:00 PM)\n  const generateTimeSlots = () => {\n    const slots = [];\n    const openHour = 11; // 11:00 AM\n    const closeHour = 19; // 7:00 PM\n    \n    for (let hour = openHour; hour < closeHour; hour++) {\n      slots.push(`${hour.toString().padStart(2, '0')}:00`);\n      if (hour < closeHour - 1) {\n        slots.push(`${hour.toString().padStart(2, '0')}:30`);\n      }\n    }\n    return slots;\n  };\n\n  const timeSlots = generateTimeSlots();\n\n  const calculateTotal = () => {\n    if (!selectedServiceData) return 0;\n    return selectedServiceData.effectivePrice || parseFloat(selectedServiceData.basePrice);\n  };\n\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return apiRequest(\"POST\", \"/api/bookings\", bookingData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your appointment has been successfully booked. We'll contact you shortly.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/my-bookings\"] });\n      \n      // Reset form\n      setSelectedService(\"\");\n      setSelectedDate(undefined);\n      setSelectedTime(\"\");\n      setCustomerInfo({\n        name: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() : \"\",\n        phone: user?.phone || \"\",\n        email: user?.email || \"\",\n        notes: \"\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!selectedService || !selectedDate || !selectedTime || !customerInfo.name || !customerInfo.phone || !customerInfo.email) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const [hours, minutes] = selectedTime.split(':').map(Number);\n    const bookingDateTime = setMinutes(setHours(selectedDate, hours), minutes);\n\n    const bookingData = {\n      userId: user?.id || null,\n      serviceId: selectedService,\n      staffId: null,\n      dateTime: bookingDateTime.toISOString(),\n      durationMins: selectedServiceData?.durationMins || 60,\n      customerName: customerInfo.name,\n      customerPhone: customerInfo.phone,\n      customerEmail: customerInfo.email,\n      notes: customerInfo.notes || null,\n      totalPrice: calculateTotal().toString(),\n    };\n\n    createBookingMutation.mutate(bookingData);\n  };\n\n  const isDateDisabled = (date: Date) => {\n    const today = new Date();\n    const maxDate = addDays(today, 60); // Allow booking up to 60 days in advance\n    return isBefore(date, today) || isAfter(date, maxDate);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"booking-title\">\n              Book Your Appointment\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"booking-description\">\n              Choose your preferred service and time slot\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Booking Form */}\n      <section className=\"py-20\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <form onSubmit={handleSubmit} data-testid=\"booking-form\">\n            <div className=\"bg-card rounded-3xl p-8 shadow-lg\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                {/* Service Selection */}\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Select Service *\n                    </Label>\n                    <RadioGroup \n                      value={selectedService} \n                      onValueChange={setSelectedService}\n                      className=\"space-y-3\"\n                      data-testid=\"service-selection\"\n                    >\n                      {services.map((service: any) => (\n                        <div key={service.id} className=\"flex items-center space-x-3 p-3 border rounded-lg hover:bg-muted/50\" data-testid={`service-option-${service.id}`}>\n                          <RadioGroupItem value={service.id} id={service.id} />\n                          <Label htmlFor={service.id} className=\"flex-1 cursor-pointer\">\n                            <div className=\"flex items-center justify-between\">\n                              <div>\n                                <p className=\"font-medium text-foreground\" data-testid={`service-name-${service.id}`}>\n                                  {service.name}\n                                </p>\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`service-category-${service.id}`}>\n                                  {[\n                                    service.isNail && \"Nail\",\n                                    service.isEyelash && \"Eyelash\", \n                                    service.isFacial && \"Facial\"\n                                  ].filter(Boolean).join(\", \") || \"General\"} • {service.durationMins} mins\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                {service.hasDiscount && service.effectivePrice ? (\n                                  <div>\n                                    <span className=\"text-sm text-muted-foreground line-through\" data-testid={`original-price-${service.id}`}>\n                                      ${parseFloat(service.basePrice).toFixed(2)}\n                                    </span>\n                                    <p className=\"text-primary font-semibold\" data-testid={`effective-price-${service.id}`}>\n                                      ${service.effectivePrice.toFixed(2)}\n                                    </p>\n                                    <Badge variant=\"secondary\" className=\"text-xs\" data-testid={`discount-badge-${service.id}`}>\n                                      SALE\n                                    </Badge>\n                                  </div>\n                                ) : (\n                                  <span className=\"text-primary font-semibold\" data-testid={`price-${service.id}`}>\n                                    ${parseFloat(service.basePrice).toFixed(2)}\n                                  </span>\n                                )}\n                              </div>\n                            </div>\n                          </Label>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Preferred Date *\n                    </Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"w-full justify-start text-left font-normal\",\n                            !selectedDate && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"date-picker-trigger\"\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {selectedDate ? format(selectedDate, \"PPP\") : \"Select date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" data-testid=\"date-picker-content\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={selectedDate}\n                          onSelect={setSelectedDate}\n                          disabled={isDateDisabled}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Available Time Slots *\n                    </Label>\n                    <Select \n                      value={selectedTime} \n                      onValueChange={setSelectedTime} \n                      data-testid=\"time-selection\"\n                      disabled={!selectedDate}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder={selectedDate ? \"Select time\" : \"Select date first\"} />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {timeSlots.length > 0 ? (\n                          timeSlots.map((time) => (\n                            <SelectItem key={time} value={time} data-testid={`time-option-${time}`}>\n                              {time}\n                            </SelectItem>\n                          ))\n                        ) : (\n                          <SelectItem value=\"\" disabled>\n                            {selectedDate ? 'No available times for this date' : 'Select a date first'}\n                          </SelectItem>\n                        )}\n                      </SelectContent>\n                    </Select>\n                    {selectedDate && timeSlots.length === 0 && (\n                      <p className=\"text-sm text-muted-foreground mt-2\">\n                        No available time slots for this date. Please select a different date.\n                      </p>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Customer Information */}\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Full Name *\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      type=\"text\"\n                      placeholder=\"Enter your full name\"\n                      value={customerInfo.name}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"phone\" className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Phone Number *\n                    </Label>\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"Enter your phone number\"\n                      value={customerInfo.phone}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, phone: e.target.value }))}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"email\" className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Email Address *\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"Enter your email\"\n                      value={customerInfo.email}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"notes\" className=\"text-sm font-semibold text-foreground mb-3 block\">\n                      Special Requests (Optional)\n                    </Label>\n                    <Textarea\n                      id=\"notes\"\n                      rows={3}\n                      placeholder=\"Any special requests or notes...\"\n                      value={customerInfo.notes}\n                      onChange={(e) => setCustomerInfo(prev => ({ ...prev, notes: e.target.value }))}\n                      data-testid=\"textarea-notes\"\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-8 pt-6 border-t border-border\">\n                <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n                  <div className=\"text-center sm:text-left\">\n                    <p className=\"text-sm text-muted-foreground\">Estimated Total</p>\n                    <p className=\"text-2xl font-bold text-foreground\" data-testid=\"total-price\">\n                      ${calculateTotal().toFixed(2)}\n                    </p>\n                  </div>\n                  <Button\n                    type=\"submit\"\n                    size=\"lg\"\n                    disabled={createBookingMutation.isPending}\n                    className=\"bg-primary text-primary-foreground px-8 py-4 rounded-full text-lg font-semibold hover:bg-primary/90\"\n                    data-testid=\"button-confirm-booking\"\n                  >\n                    {createBookingMutation.isPending ? \"Booking...\" : \"Confirm Booking\"}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </form>\n          \n          {/* Info Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-8\">\n            <Card data-testid=\"info-card-location\">\n              <CardContent className=\"p-6 text-center\">\n                <MapPin className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Location</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {contentSettings?.address || \"Blk 483A Yishun Ave 6 Singapore 761483\"}\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"info-card-hours\">\n              <CardContent className=\"p-6 text-center\">\n                <Clock className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Hours</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Mon–Sun: 11:00AM – 7:00PM\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card data-testid=\"info-card-contact\">\n              <CardContent className=\"p-6 text-center\">\n                <User className=\"w-8 h-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold text-foreground mb-2\">Contact</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {contentSettings?.phone || \"+65 9712 1097\"}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":17835},"client/src/pages/contact.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/Navigation\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertContactMessageSchema } from \"@shared/schema\";\nimport { \n  MapPin, \n  Phone, \n  Clock, \n  Facebook, \n  Instagram, \n  MessageCircle, \n  Send,\n  Mail\n} from \"lucide-react\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  \n  const [formData, setFormData] = useState({\n    name: \"\",\n    phone: \"\",\n    message: \"\"\n  });\n\n  useEffect(() => {\n    document.title = \"Contact Us - HOME BASE Beauty Salon\";\n  }, []);\n\n  const { data: contentSettings } = useQuery({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async (messageData: any) => {\n      return apiRequest(\"POST\", \"/api/contact\", messageData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent!\",\n        description: \"Thank you for contacting us. We'll get back to you soon.\",\n      });\n      \n      // Reset form\n      setFormData({\n        name: \"\",\n        phone: \"\",\n        message: \"\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Failed to Send Message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name.trim() || !formData.message.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in your name and message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMessageMutation.mutate(formData);\n  };\n\n  const contactInfo = {\n    address: contentSettings?.address || \"Blk 483A Yishun Ave 6 Singapore 761483\",\n    phone: contentSettings?.phone || \"+65 9712 1097\",\n    email: \"kellybeautyhomebase@gmail.com\",\n    facebook: contentSettings?.facebookUrl || \"#\",\n    instagram: contentSettings?.instagramUrl || \"#\",\n    zalo: contentSettings?.zaloUrl || \"#\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"contact-title\">\n              Get In Touch\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"contact-description\">\n              We'd love to hear from you and answer any questions\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"text-2xl font-serif font-bold text-foreground mb-6\" data-testid=\"visit-salon-title\">\n                  Visit Our Salon\n                </h2>\n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-address\">\n                    <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <MapPin className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Address</p>\n                      <p className=\"text-muted-foreground\" data-testid=\"address-text\">\n                        {contactInfo.address}\n                      </p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-phone\">\n                    <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <Phone className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Phone</p>\n                      <a \n                        href={`tel:${contactInfo.phone}`}\n                        className=\"text-muted-foreground hover:text-primary transition-colors\"\n                        data-testid=\"phone-link\"\n                      >\n                        {contactInfo.phone}\n                      </a>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-email\">\n                    <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <Mail className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Email</p>\n                      <a \n                        href={`mailto:${contactInfo.email}`}\n                        className=\"text-muted-foreground hover:text-primary transition-colors\"\n                        data-testid=\"email-link\"\n                      >\n                        {contactInfo.email}\n                      </a>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\" data-testid=\"contact-hours\">\n                    <div className=\"w-12 h-12 luxury-gradient rounded-xl flex items-center justify-center flex-shrink-0\">\n                      <Clock className=\"w-5 h-5 text-white\" />\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-foreground\">Opening Hours</p>\n                      <div className=\"text-muted-foreground text-sm\" data-testid=\"hours-text\">\n                        <p>Mon–Sun: 11:00AM – 7:00PM</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-xl font-serif font-bold text-foreground mb-4\" data-testid=\"follow-us-title\">\n                  Follow Us\n                </h3>\n                <div className=\"flex space-x-4\" data-testid=\"social-links\">\n                  <a \n                    href={contactInfo.facebook} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                    data-testid=\"link-facebook\"\n                  >\n                    <Facebook className=\"w-5 h-5\" />\n                  </a>\n                  <a \n                    href={contactInfo.instagram} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"w-12 h-12 bg-primary rounded-xl flex items-center justify-center text-primary-foreground hover:bg-primary/90 transition-all\"\n                    data-testid=\"link-instagram\"\n                  >\n                    <Instagram className=\"w-5 h-5\" />\n                  </a>\n                  <a \n                    href={contactInfo.zalo} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"w-12 h-12 bg-accent rounded-xl flex items-center justify-center text-accent-foreground hover:bg-accent/90 transition-all\"\n                    data-testid=\"link-zalo\"\n                  >\n                    <MessageCircle className=\"w-5 h-5\" />\n                  </a>\n                </div>\n              </div>\n\n              {/* Map Placeholder */}\n              <div className=\"rounded-2xl overflow-hidden\" data-testid=\"map-placeholder\">\n                <div className=\"w-full h-64 bg-muted flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <MapPin className=\"w-12 h-12 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">Interactive Map</p>\n                    <p className=\"text-sm text-muted-foreground\">{contactInfo.address}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Contact Form */}\n            <div>\n              <Card className=\"shadow-lg\" data-testid=\"contact-form-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl font-serif\" data-testid=\"form-title\">\n                    Send Us a Message\n                  </CardTitle>\n                  <p className=\"text-muted-foreground\" data-testid=\"form-description\">\n                    Have a question or want to book an appointment? Get in touch!\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"contact-form\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Full Name *\n                      </Label>\n                      <Input\n                        id=\"name\"\n                        type=\"text\"\n                        placeholder=\"Your full name\"\n                        value={formData.name}\n                        onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                        data-testid=\"input-name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"phone\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Phone Number\n                      </Label>\n                      <Input\n                        id=\"phone\"\n                        type=\"tel\"\n                        placeholder=\"Your phone number\"\n                        value={formData.phone}\n                        onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                        data-testid=\"input-phone\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"message\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Message *\n                      </Label>\n                      <Textarea\n                        id=\"message\"\n                        rows={4}\n                        placeholder=\"How can we help you?\"\n                        value={formData.message}\n                        onChange={(e) => setFormData(prev => ({ ...prev, message: e.target.value }))}\n                        data-testid=\"textarea-message\"\n                      />\n                    </div>\n                    \n                    <Button\n                      type=\"submit\"\n                      disabled={createMessageMutation.isPending}\n                      className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                      data-testid=\"button-send-message\"\n                    >\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      {createMessageMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":12200},"client/src/pages/feedback.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertFeedbackSchema } from \"@shared/schema\";\nimport { Star, Send } from \"lucide-react\";\n\nexport default function Feedback() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [rating, setRating] = useState(0);\n  const [hoverRating, setHoverRating] = useState(0);\n  const [formData, setFormData] = useState({\n    title: \"\",\n    comment: \"\",\n    customerName: \"\"\n  });\n\n  useEffect(() => {\n    document.title = \"Leave Feedback - HOME BASE Beauty Salon\";\n    \n    // Pre-fill customer name if logged in\n    if (user) {\n      setFormData(prev => ({\n        ...prev,\n        customerName: `${user.firstName || ''} ${user.lastName || ''}`.trim()\n      }));\n    }\n  }, [user]);\n\n  const { data: approvedFeedback = [] } = useQuery({\n    queryKey: [\"/api/feedback\"],\n  });\n\n  const { data: contentSettings } = useQuery({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const createFeedbackMutation = useMutation({\n    mutationFn: async (feedbackData: any) => {\n      return apiRequest(\"POST\", \"/api/feedback\", feedbackData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Feedback Submitted!\",\n        description: \"Thank you for your feedback. It will be reviewed before appearing on our site.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n      \n      // Reset form\n      setRating(0);\n      setFormData({\n        title: \"\",\n        comment: \"\",\n        customerName: user ? `${user.firstName || ''} ${user.lastName || ''}`.trim() : \"\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: error.message || \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (rating === 0 || !formData.comment.trim() || !formData.customerName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide a rating, comment, and your name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const feedbackData = {\n      userId: user?.id || null,\n      rating,\n      title: formData.title.trim() || null,\n      comment: formData.comment.trim(),\n      customerName: formData.customerName.trim(),\n      imageUrls: [], // TODO: Add image upload functionality\n    };\n\n    createFeedbackMutation.mutate(feedbackData);\n  };\n\n  const renderStars = (count: number, interactive = false) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-6 h-6 cursor-pointer transition-colors ${\n          i < (interactive ? (hoverRating || rating) : count)\n            ? 'text-accent fill-current' \n            : 'text-muted-foreground'\n        }`}\n        onClick={interactive ? () => setRating(i + 1) : undefined}\n        onMouseEnter={interactive ? () => setHoverRating(i + 1) : undefined}\n        onMouseLeave={interactive ? () => setHoverRating(0) : undefined}\n        data-testid={interactive ? `star-input-${i + 1}` : `star-display-${i + 1}`}\n      />\n    ));\n  };\n\n  const getCustomerName = (feedback: any) => {\n    if (feedback.customerName) return feedback.customerName;\n    if (feedback.user?.firstName) {\n      return `${feedback.user.firstName} ${feedback.user.lastName || ''}`.trim();\n    }\n    return \"Anonymous Customer\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"feedback-title\">\n              Share Your Experience\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"feedback-description\">\n              We value your feedback and use it to improve our services\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <section className=\"py-20\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Feedback Form */}\n            <div>\n              <Card className=\"shadow-lg\" data-testid=\"feedback-form-card\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl font-serif\" data-testid=\"form-title\">\n                    Leave Your Feedback\n                  </CardTitle>\n                  <p className=\"text-muted-foreground\" data-testid=\"form-description\">\n                    Help us serve you better by sharing your experience\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"feedback-form\">\n                    <div>\n                      <Label className=\"text-sm font-semibold text-foreground mb-3 block\">\n                        Your Rating *\n                      </Label>\n                      <div className=\"flex space-x-1\" data-testid=\"rating-input\">\n                        {renderStars(5, true)}\n                      </div>\n                      <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"rating-text\">\n                        {rating > 0 ? `${rating} out of 5 stars` : \"Click to rate\"}\n                      </p>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"customerName\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Your Name *\n                      </Label>\n                      <Input\n                        id=\"customerName\"\n                        type=\"text\"\n                        placeholder=\"Enter your name\"\n                        value={formData.customerName}\n                        onChange={(e) => setFormData(prev => ({ ...prev, customerName: e.target.value }))}\n                        data-testid=\"input-customer-name\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"title\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Title (Optional)\n                      </Label>\n                      <Input\n                        id=\"title\"\n                        type=\"text\"\n                        placeholder=\"Brief title for your review\"\n                        value={formData.title}\n                        onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n                        data-testid=\"input-title\"\n                      />\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"comment\" className=\"text-sm font-semibold text-foreground mb-2 block\">\n                        Your Review *\n                      </Label>\n                      <Textarea\n                        id=\"comment\"\n                        rows={4}\n                        placeholder=\"Tell us about your experience...\"\n                        value={formData.comment}\n                        onChange={(e) => setFormData(prev => ({ ...prev, comment: e.target.value }))}\n                        data-testid=\"textarea-comment\"\n                      />\n                    </div>\n\n                    <Button\n                      type=\"submit\"\n                      disabled={createFeedbackMutation.isPending}\n                      className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90\"\n                      data-testid=\"button-submit-feedback\"\n                    >\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      {createFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Existing Feedback */}\n            <div>\n              <h2 className=\"text-2xl font-serif font-bold text-foreground mb-6\" data-testid=\"reviews-title\">\n                What Our Clients Say\n              </h2>\n              \n              <div className=\"space-y-6 max-h-[600px] overflow-y-auto\" data-testid=\"reviews-list\">\n                {approvedFeedback.length > 0 ? (\n                  approvedFeedback.map((feedback: any) => (\n                    <Card key={feedback.id} className=\"shadow-sm\" data-testid={`review-${feedback.id}`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <div>\n                            <h4 className=\"font-semibold text-foreground\" data-testid={`review-name-${feedback.id}`}>\n                              {getCustomerName(feedback)}\n                            </h4>\n                            {feedback.title && (\n                              <p className=\"text-sm font-medium text-primary\" data-testid={`review-title-${feedback.id}`}>\n                                {feedback.title}\n                              </p>\n                            )}\n                          </div>\n                          {feedback.isFeatured && (\n                            <Badge variant=\"secondary\" data-testid={`featured-badge-${feedback.id}`}>\n                              Featured\n                            </Badge>\n                          )}\n                        </div>\n                        \n                        <div className=\"flex mb-3\" data-testid={`review-rating-${feedback.id}`}>\n                          {renderStars(feedback.rating)}\n                        </div>\n                        \n                        <p className=\"text-muted-foreground\" data-testid={`review-comment-${feedback.id}`}>\n                          \"{feedback.comment}\"\n                        </p>\n                        \n                        <p className=\"text-xs text-muted-foreground mt-3\" data-testid={`review-date-${feedback.id}`}>\n                          {new Date(feedback.createdAt).toLocaleDateString()}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ))\n                ) : (\n                  <Card className=\"shadow-sm\">\n                    <CardContent className=\"p-6 text-center\">\n                      <p className=\"text-muted-foreground\" data-testid=\"text-no-reviews\">\n                        No reviews yet. Be the first to share your experience!\n                      </p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":11562},"client/src/pages/gallery.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { GalleryImage, ContentSettings } from \"@shared/schema\";\n\nexport default function Gallery() {\n  const [activeFilter, setActiveFilter] = useState<string>('all');\n  const [selectedImage, setSelectedImage] = useState<GalleryImage | null>(null);\n\n  useEffect(() => {\n    document.title = \"Gallery - HOME BASE Beauty Salon\";\n  }, []);\n\n  const { data: images = [], isLoading } = useQuery<GalleryImage[]>({\n    queryKey: activeFilter === 'all' ? [\"/api/gallery\"] : [\"/api/gallery\", { category: activeFilter }],\n  });\n\n  const { data: contentSettings } = useQuery<ContentSettings>({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const categories = ['all', 'Nail', 'Eyelash', 'Facial'];\n  \n  // Fallback images if no images are provided\n  const fallbackImages: GalleryImage[] = [\n    {\n      id: '1',\n      url: \"https://images.unsplash.com/photo-1632345031435-8727f6897d53?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Nail' as const,\n      caption: \"Elegant nail art designs\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '2', \n      url: \"https://images.unsplash.com/photo-1616394584738-fc6e612e71b9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Eyelash' as const,\n      caption: \"Beautiful eyelash extensions\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '3',\n      url: \"https://images.unsplash.com/photo-1570172619644-dfd03ed5d881?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Facial' as const,\n      caption: \"Glowing skin after facial treatment\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '4',\n      url: \"https://images.unsplash.com/photo-1604654894610-df63bc536371?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Nail' as const,\n      caption: \"Vibrant nail polish colors\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '5',\n      url: \"https://images.unsplash.com/photo-1487412947147-5cebf100ffc2?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Eyelash' as const,\n      caption: \"Professional makeup with perfect lashes\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '6',\n      url: \"https://images.unsplash.com/photo-1560750588-73207b1ef5b8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Facial' as const,\n      caption: \"Serene spa facial treatment\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '7',\n      url: \"https://images.unsplash.com/photo-1522335789203-aabd1fc54bc9?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Nail' as const,\n      caption: \"French manicure perfection\",\n      order: 0,\n      createdAt: new Date()\n    },\n    {\n      id: '8',\n      url: \"https://images.unsplash.com/photo-1515377905703-c4788e51af15?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=600\",\n      category: 'Facial' as const,\n      caption: \"Relaxing spa environment\",\n      order: 0,\n      createdAt: new Date()\n    }\n  ];\n\n  const displayImages = images.length > 0 ? images : fallbackImages.filter(img => \n    activeFilter === 'all' || img.category === activeFilter\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 pb-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-12 bg-muted rounded w-1/2 mx-auto mb-4\"></div>\n                <div className=\"h-6 bg-muted rounded w-1/3 mx-auto\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"gallery-title\">\n              Our Gallery\n            </h1>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"gallery-description\">\n              Showcasing our beautiful work and transformations\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Gallery Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          {/* Filter Buttons */}\n          <div className=\"flex justify-center mb-8\">\n            <div className=\"bg-muted rounded-full p-1\">\n              <div className=\"flex space-x-1\">\n                {categories.map((category) => (\n                  <Button\n                    key={category}\n                    onClick={() => setActiveFilter(category)}\n                    variant={activeFilter === category ? \"default\" : \"ghost\"}\n                    className={`px-6 py-2 rounded-full font-medium ${\n                      activeFilter === category \n                        ? 'bg-primary text-primary-foreground' \n                        : 'text-muted-foreground hover:text-foreground'\n                    }`}\n                    data-testid={`filter-${category.toLowerCase()}`}\n                  >\n                    {category === 'all' ? 'All' : category}\n                  </Button>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          {/* Gallery Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {displayImages.map((image: GalleryImage) => (\n              <Dialog key={image.id}>\n                <DialogTrigger asChild>\n                  <div \n                    className=\"group cursor-pointer hover-lift relative overflow-hidden rounded-2xl\"\n                    data-testid={`gallery-image-${image.id}`}\n                    onClick={() => setSelectedImage(image)}\n                  >\n                    <img \n                      src={image.url} \n                      alt={image.caption || `Gallery image ${image.id}`} \n                      className=\"w-full h-80 object-cover transition-transform duration-300 group-hover:scale-105\"\n                      data-testid={`img-${image.id}`}\n                    />\n                    <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300\" />\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge variant=\"secondary\" className=\"bg-white/90 text-black\" data-testid={`badge-${image.id}`}>\n                        {image.category}\n                      </Badge>\n                    </div>\n                    {image.caption && (\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4\">\n                        <p className=\"text-white text-sm font-medium\" data-testid={`caption-${image.id}`}>\n                          {image.caption}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-4xl w-full p-0\" data-testid={`dialog-${image.id}`}>\n                  <div className=\"relative\">\n                    <img \n                      src={image.url} \n                      alt={image.caption || `Gallery image ${image.id}`}\n                      className=\"w-full h-auto max-h-[80vh] object-contain\"\n                      data-testid={`dialog-img-${image.id}`}\n                    />\n                    <div className=\"absolute top-4 right-4\">\n                      <Badge variant=\"secondary\" data-testid={`dialog-badge-${image.id}`}>\n                        {image.category}\n                      </Badge>\n                    </div>\n                    {image.caption && (\n                      <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-6\">\n                        <p className=\"text-white text-lg font-medium\" data-testid={`dialog-caption-${image.id}`}>\n                          {image.caption}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </DialogContent>\n              </Dialog>\n            ))}\n          </div>\n          \n          {displayImages.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-images\">\n                No images available for the selected category.\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":9202},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport ServicesSection from \"@/components/ServicesSection\";\nimport PromotionsSection from \"@/components/PromotionsSection\";\nimport GallerySection from \"@/components/GallerySection\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  useEffect(() => {\n    document.title = \"HOME BASE Beauty Salon - Welcome Back\";\n  }, []);\n\n  const { data: contentSettings } = useQuery({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: promotions } = useQuery({\n    queryKey: [\"/api/promotions\"],\n  });\n\n  const { data: gallery } = useQuery({\n    queryKey: [\"/api/gallery\"],\n  });\n\n  const { data: feedback } = useQuery({\n    queryKey: [\"/api/feedback\"],\n  });\n\n  const { data: myBookings } = useQuery({\n    queryKey: [\"/api/my-bookings\"],\n  });\n\n  const upcomingBookings = myBookings?.filter(\n    booking => new Date(booking.dateTime) > new Date() && booking.status !== 'CANCELLED'\n  )?.slice(0, 3);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Welcome Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\">\n              Welcome back, {user?.firstName || 'Beautiful'}!\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Ready for your next beauty transformation?\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {/* Quick Actions */}\n            <Card data-testid=\"quick-actions-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"w-5 h-5 text-primary\" />\n                  <span>Quick Actions</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Link href=\"/booking\">\n                  <Button className=\"w-full\" data-testid=\"button-book-now\">\n                    Book New Appointment\n                  </Button>\n                </Link>\n                <Link href=\"/account\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-my-account\">\n                    <User className=\"w-4 h-4 mr-2\" />\n                    My Account\n                  </Button>\n                </Link>\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Bookings */}\n            <Card data-testid=\"upcoming-bookings-card\">\n              <CardHeader>\n                <CardTitle>Your Upcoming Appointments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {upcomingBookings && upcomingBookings.length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {upcomingBookings.map((booking) => (\n                      <div \n                        key={booking.id} \n                        className=\"p-3 bg-muted/30 rounded-lg\"\n                        data-testid={`booking-${booking.id}`}\n                      >\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <p className=\"font-medium text-foreground\" data-testid={`text-service-${booking.id}`}>\n                              {booking.service.name}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`text-datetime-${booking.id}`}>\n                              {new Date(booking.dateTime).toLocaleDateString()} at{' '}\n                              {new Date(booking.dateTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                            </p>\n                          </div>\n                          <span \n                            className={`px-2 py-1 rounded-full text-xs ${\n                              booking.status === 'CONFIRMED' \n                                ? 'bg-green-100 text-green-800' \n                                : 'bg-yellow-100 text-yellow-800'\n                            }`}\n                            data-testid={`status-${booking.id}`}\n                          >\n                            {booking.status}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                    <Link href=\"/account\">\n                      <Button variant=\"ghost\" className=\"w-full text-sm\" data-testid=\"link-view-all-bookings\">\n                        View All Bookings\n                      </Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-muted-foreground mb-4\" data-testid=\"text-no-bookings\">\n                      No upcoming appointments\n                    </p>\n                    <Link href=\"/booking\">\n                      <Button size=\"sm\" data-testid=\"button-book-first\">\n                        Book Your First Appointment\n                      </Button>\n                    </Link>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      <HeroSection contentSettings={contentSettings} showWelcome={false} />\n      <ServicesSection services={services} />\n      <PromotionsSection promotions={promotions} />\n      <GallerySection images={gallery} />\n      <TestimonialsSection feedback={feedback} />\n      <ContactSection contentSettings={contentSettings} />\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":6471},"client/src/pages/landing.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Service, EventPromo, GalleryImage, Feedback, ContentSettings } from \"@shared/schema\";\nimport Navigation from \"@/components/Navigation\";\nimport HeroSection from \"@/components/HeroSection\";\nimport ServicesSection from \"@/components/ServicesSection\";\nimport PromotionsSection from \"@/components/PromotionsSection\";\nimport GallerySection from \"@/components/GallerySection\";\nimport TestimonialsSection from \"@/components/TestimonialsSection\";\nimport ContactSection from \"@/components/ContactSection\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Landing() {\n  useEffect(() => {\n    document.title = \"HOME BASE Beauty Salon - Luxury Nail, Eyelash & Facial Services\";\n  }, []);\n\n  const { data: contentSettings } = useQuery<ContentSettings>({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  const { data: services } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: promotions } = useQuery<any[]>({\n    queryKey: [\"/api/promotions\"],\n  });\n\n  const { data: gallery } = useQuery<any[]>({\n    queryKey: [\"/api/gallery\"],\n  });\n\n  const { data: feedback } = useQuery<any[]>({\n    queryKey: [\"/api/feedback\"],\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <HeroSection contentSettings={contentSettings} />\n      <ServicesSection services={services} />\n      <PromotionsSection promotions={promotions} />\n      <GallerySection images={gallery} />\n      <TestimonialsSection feedback={feedback} />\n      <ContactSection contentSettings={contentSettings} />\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":1710},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/services.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Service, ServiceCategory, ContentSettings } from \"@shared/schema\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Link } from \"wouter\";\nimport { Sparkles, Eye, Leaf, Clock, Star } from \"lucide-react\";\nimport customEyelashImage from \"@assets/Thiết kế chưa có tên (8)_1757850541617.png\";\n\nexport default function Services() {\n  useEffect(() => {\n    document.title = \"Services - HOME BASE Beauty Salon\";\n  }, []);\n\n  const { data: services = [], isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: categories = [] } = useQuery<ServiceCategory[]>({\n    queryKey: [\"/api/service-categories\"],\n  });\n\n  const { data: contentSettings } = useQuery<ContentSettings>({\n    queryKey: [\"/api/content-settings\"],\n  });\n\n  // Group services by category using boolean flags\n  const servicesByCategory = services.reduce((acc: Record<string, Service[]>, service: Service) => {\n    const categoryNames: string[] = [];\n    if (service.isNail) categoryNames.push('Nail');\n    if (service.isEyelash) categoryNames.push('Eyelash');\n    if (service.isFacial) categoryNames.push('Facial');\n    \n    // If no categories set, put in \"General\"\n    if (categoryNames.length === 0) categoryNames.push('General');\n    \n    categoryNames.forEach(categoryName => {\n      if (!acc[categoryName]) {\n        acc[categoryName] = [];\n      }\n      acc[categoryName].push(service);\n    });\n    \n    return acc;\n  }, {} as Record<string, Service[]>);\n\n  // Helper function to get category names from boolean flags\n  const getServiceCategories = (service: Service): string[] => {\n    const categories: string[] = [];\n    if (service.isNail) categories.push('Nail');\n    if (service.isEyelash) categories.push('Eyelash');\n    if (service.isFacial) categories.push('Facial');\n    return categories.length > 0 ? categories : ['General'];\n  };\n\n  const getCategoryIcon = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case 'nail':\n        return <Sparkles className=\"w-6 h-6\" />;\n      case 'eyelash':\n        return <Eye className=\"w-6 h-6\" />;\n      case 'facial':\n        return <Leaf className=\"w-6 h-6\" />;\n      default:\n        return <Sparkles className=\"w-6 h-6\" />;\n    }\n  };\n\n  const getCategoryImage = (categoryName: string) => {\n    switch (categoryName.toLowerCase()) {\n      case 'nail':\n        return \"https://images.unsplash.com/photo-1604654894610-df63bc536371?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n      case 'eyelash':\n        return customEyelashImage;\n      case 'facial':\n        return \"https://images.unsplash.com/photo-1570172619644-dfd03ed5d881?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n      default:\n        return \"https://images.unsplash.com/photo-1560750588-73207b1ef5b8?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=400\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Navigation />\n        <div className=\"pt-24 pb-12\">\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <div className=\"animate-pulse\">\n                <div className=\"h-12 bg-muted rounded w-1/2 mx-auto mb-4\"></div>\n                <div className=\"h-6 bg-muted rounded w-1/3 mx-auto\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"pt-24 pb-12 bg-gradient-to-br from-primary/5 to-accent/5\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl lg:text-5xl font-serif font-bold text-foreground mb-4\" data-testid=\"services-title\">\n              Our Signature Services\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"services-description\">\n              Indulge in our comprehensive beauty treatments designed to enhance your natural radiance\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <Tabs defaultValue=\"all\" className=\"w-full\" data-testid=\"services-tabs\">\n            <TabsList className=\"grid w-full grid-cols-4 mb-12\" data-testid=\"tabs-list\">\n              <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Services</TabsTrigger>\n              <TabsTrigger value=\"Nail\" data-testid=\"tab-nail\">Nail</TabsTrigger>\n              <TabsTrigger value=\"Eyelash\" data-testid=\"tab-eyelash\">Eyelash</TabsTrigger>\n              <TabsTrigger value=\"Facial\" data-testid=\"tab-facial\">Facial</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"all\" data-testid=\"tab-content-all\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {services.map((service: any) => (\n                  <Card key={service.id} className=\"hover-lift\" data-testid={`service-card-${service.id}`}>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"w-12 h-12 luxury-gradient rounded-2xl flex items-center justify-center text-white\">\n                          {getCategoryIcon(getServiceCategories(service)[0])}\n                        </div>\n                        {service.hasDiscount && (\n                          <Badge variant=\"secondary\" data-testid={`discount-badge-${service.id}`}>\n                            SALE\n                          </Badge>\n                        )}\n                      </div>\n                      <CardTitle className=\"text-xl\" data-testid={`service-name-${service.id}`}>\n                        {service.name}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`service-category-${service.id}`}>\n                        {getServiceCategories(service).join(\", \")} Service\n                      </p>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground mb-4\" data-testid={`service-description-${service.id}`}>\n                        {service.description || `Professional ${getServiceCategories(service)[0].toLowerCase()} service with premium products and expert care.`}\n                      </p>\n                      \n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                          <span className=\"text-sm text-muted-foreground\" data-testid={`service-duration-${service.id}`}>\n                            {service.durationMins} mins\n                          </span>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {service.hasDiscount && service.effectivePrice ? (\n                            <>\n                              <span className=\"text-sm text-muted-foreground line-through\" data-testid={`original-price-${service.id}`}>\n                                ${parseFloat(service.basePrice).toFixed(2)}\n                              </span>\n                              <span className=\"text-xl font-bold text-primary\" data-testid={`effective-price-${service.id}`}>\n                                ${service.effectivePrice.toFixed(2)}\n                              </span>\n                            </>\n                          ) : (\n                            <span className=\"text-xl font-bold text-primary\" data-testid={`price-${service.id}`}>\n                              ${parseFloat(service.basePrice).toFixed(2)}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <Link href=\"/booking\" state={{ selectedService: service.id }}>\n                        <Button className=\"w-full\" data-testid={`button-book-${service.id}`}>\n                          Book This Service\n                        </Button>\n                      </Link>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            {Object.entries(servicesByCategory).map(([categoryName, categoryServices]: [string, any]) => (\n              <TabsContent key={categoryName} value={categoryName} data-testid={`tab-content-${categoryName.toLowerCase()}`}>\n                <div className=\"mb-8\">\n                  <div className=\"relative rounded-3xl overflow-hidden mb-8\">\n                    <img \n                      src={getCategoryImage(categoryName)} \n                      alt={`${categoryName} services`}\n                      className=\"w-full h-64 object-cover\"\n                      data-testid={`category-image-${categoryName.toLowerCase()}`}\n                    />\n                    <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                      <div className=\"text-center text-white\">\n                        <div className=\"w-16 h-16 luxury-gradient rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                          {getCategoryIcon(categoryName)}\n                        </div>\n                        <h2 className=\"text-3xl font-serif font-bold\" data-testid={`category-title-${categoryName.toLowerCase()}`}>\n                          {categoryName} Services\n                        </h2>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                  {categoryServices.map((service: any) => (\n                    <Card key={service.id} className=\"hover-lift\" data-testid={`category-service-card-${service.id}`}>\n                      <CardHeader>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <CardTitle className=\"text-xl\" data-testid={`category-service-name-${service.id}`}>\n                            {service.name}\n                          </CardTitle>\n                          {service.hasDiscount && (\n                            <Badge variant=\"secondary\" data-testid={`category-discount-badge-${service.id}`}>\n                              SALE\n                            </Badge>\n                          )}\n                        </div>\n                      </CardHeader>\n                      <CardContent>\n                        <p className=\"text-muted-foreground mb-4\" data-testid={`category-service-description-${service.id}`}>\n                          {service.description || `Professional ${getServiceCategories(service)[0].toLowerCase()} service with premium products and expert care.`}\n                        </p>\n                        \n                        <div className=\"flex items-center justify-between mb-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                            <span className=\"text-sm text-muted-foreground\" data-testid={`category-service-duration-${service.id}`}>\n                              {service.durationMins} mins\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {service.hasDiscount && service.effectivePrice ? (\n                              <>\n                                <span className=\"text-sm text-muted-foreground line-through\" data-testid={`category-original-price-${service.id}`}>\n                                  ${parseFloat(service.basePrice).toFixed(2)}\n                                </span>\n                                <span className=\"text-xl font-bold text-primary\" data-testid={`category-effective-price-${service.id}`}>\n                                  ${service.effectivePrice.toFixed(2)}\n                                </span>\n                              </>\n                            ) : (\n                              <span className=\"text-xl font-bold text-primary\" data-testid={`category-price-${service.id}`}>\n                                ${parseFloat(service.basePrice).toFixed(2)}\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                        \n                        <Link href=\"/booking\" state={{ selectedService: service.id }}>\n                          <Button className=\"w-full\" data-testid={`category-button-book-${service.id}`}>\n                            Book This Service\n                          </Button>\n                        </Link>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {services.length === 0 && (\n            <div className=\"text-center py-12\">\n              <p className=\"text-muted-foreground\" data-testid=\"text-no-services\">\n                No services available at the moment. Please check back later.\n              </p>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer contentSettings={contentSettings} />\n    </div>\n  );\n}\n","size_bytes":14004},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/bookings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport CalendarView from \"@/components/CalendarView\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Calendar as CalendarIcon, \n  Clock, \n  User, \n  Phone, \n  Mail, \n  Edit, \n  CheckCircle, \n  XCircle, \n  AlertCircle,\n  Filter\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { BookingWithRelations } from \"@/components/CalendarView\";\n\nexport default function AdminBookings() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [selectedDate, setSelectedDate] = useState<Date>();\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [editingBooking, setEditingBooking] = useState<BookingWithRelations | null>(null);\n  const [editDialog, setEditDialog] = useState(false);\n\n  useEffect(() => {\n    document.title = \"Bookings Management - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: bookings = [], error: bookingsError } = useQuery<BookingWithRelations[]>({\n    queryKey: [\"/api/admin/bookings\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (bookingsError && isUnauthorizedError(bookingsError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin session expired. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [bookingsError, toast]);\n\n  const updateBookingMutation = useMutation({\n    mutationFn: async ({ id, ...bookingData }: { id: string; [key: string]: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/bookings/${id}`, bookingData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Booking updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      setEditDialog(false);\n      setEditingBooking(null);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update booking.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      case 'DONE':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'PENDING':\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case 'CANCELLED':\n        return <XCircle className=\"w-4 h-4\" />;\n      case 'DONE':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const filteredBookings = bookings.filter((booking: BookingWithRelations) => {\n    if (statusFilter !== \"all\" && booking.status !== statusFilter) {\n      return false;\n    }\n    if (selectedDate) {\n      const bookingDate = new Date(booking.dateTime);\n      return (\n        bookingDate.getDate() === selectedDate.getDate() &&\n        bookingDate.getMonth() === selectedDate.getMonth() &&\n        bookingDate.getFullYear() === selectedDate.getFullYear()\n      );\n    }\n    return true;\n  });\n\n  const upcomingBookings = bookings.filter((booking: BookingWithRelations) => \n    new Date(booking.dateTime) > new Date() && booking.status !== 'CANCELLED'\n  );\n\n  const todayBookings = bookings.filter((booking: BookingWithRelations) => {\n    const today = new Date();\n    const bookingDate = new Date(booking.dateTime);\n    return (\n      bookingDate.getDate() === today.getDate() &&\n      bookingDate.getMonth() === today.getMonth() &&\n      bookingDate.getFullYear() === today.getFullYear()\n    );\n  });\n\n  const updateBookingStatus = (bookingId: string, status: string) => {\n    updateBookingMutation.mutate({ id: bookingId, status });\n  };\n\n  const openEditDialog = (booking: BookingWithRelations) => {\n    setEditingBooking(booking);\n    setEditDialog(true);\n  };\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }, (_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"bookings-title\">\n            Bookings Management\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"bookings-description\">\n            Manage customer appointments and schedules\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card data-testid=\"stat-total-bookings\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Bookings</CardTitle>\n              <CalendarIcon className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"total-bookings-count\">\n                {bookings.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-today-bookings\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Today's Bookings</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"today-bookings-count\">\n                {todayBookings.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-upcoming-bookings\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Upcoming</CardTitle>\n              <AlertCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"upcoming-bookings-count\">\n                {upcomingBookings.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"all\" className=\"w-full\" data-testid=\"bookings-tabs\">\n          <TabsList className=\"grid w-full grid-cols-4\" data-testid=\"tabs-list\">\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">All Bookings</TabsTrigger>\n            <TabsTrigger value=\"today\" data-testid=\"tab-today\">Today</TabsTrigger>\n            <TabsTrigger value=\"upcoming\" data-testid=\"tab-upcoming\">Upcoming</TabsTrigger>\n            <TabsTrigger value=\"calendar\" data-testid=\"tab-calendar\">Calendar</TabsTrigger>\n          </TabsList>\n\n          {/* All Bookings Tab */}\n          <TabsContent value=\"all\" data-testid=\"tab-content-all\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>All Bookings</CardTitle>\n                  <div className=\"flex items-center space-x-4\">\n                    <Select value={statusFilter} onValueChange={setStatusFilter} data-testid=\"status-filter\">\n                      <SelectTrigger className=\"w-40\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Status</SelectItem>\n                        <SelectItem value=\"PENDING\">Pending</SelectItem>\n                        <SelectItem value=\"CONFIRMED\">Confirmed</SelectItem>\n                        <SelectItem value=\"DONE\">Done</SelectItem>\n                        <SelectItem value=\"CANCELLED\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"all-bookings-list\">\n                  {filteredBookings.length > 0 ? (\n                    filteredBookings.map((booking: BookingWithRelations) => (\n                      <div \n                        key={booking.id} \n                        className=\"p-4 border rounded-lg hover:bg-muted/30 transition-colors\"\n                        data-testid={`booking-${booking.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1 grid grid-cols-1 md:grid-cols-3 gap-4\">\n                            <div>\n                              <h3 className=\"font-semibold text-foreground\" data-testid={`booking-service-${booking.id}`}>\n                                {booking.service.name}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground\" data-testid={`booking-category-${booking.id}`}>\n                                {[\n                                  booking.service.isNail && \"Nail\",\n                                  booking.service.isEyelash && \"Eyelash\", \n                                  booking.service.isFacial && \"Facial\"\n                                ].filter(Boolean).join(\", \") || \"No categories\"}\n                              </p>\n                            </div>\n                            \n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center space-x-1 text-sm\">\n                                <User className=\"w-4 h-4 text-muted-foreground\" />\n                                <span data-testid={`booking-customer-${booking.id}`}>\n                                  {booking.customerName || booking.user?.firstName || 'Guest'}\n                                </span>\n                              </div>\n                              {booking.customerPhone && (\n                                <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                                  <Phone className=\"w-4 h-4\" />\n                                  <span data-testid={`booking-phone-${booking.id}`}>\n                                    {booking.customerPhone}\n                                  </span>\n                                </div>\n                              )}\n                              {booking.customerEmail && (\n                                <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                                  <Mail className=\"w-4 h-4\" />\n                                  <span data-testid={`booking-email-${booking.id}`}>\n                                    {booking.customerEmail}\n                                  </span>\n                                </div>\n                              )}\n                            </div>\n                            \n                            <div className=\"space-y-1\">\n                              <div className=\"flex items-center space-x-1 text-sm\">\n                                <CalendarIcon className=\"w-4 h-4 text-muted-foreground\" />\n                                <span data-testid={`booking-date-${booking.id}`}>\n                                  {format(new Date(booking.dateTime), 'MMM dd, yyyy')}\n                                </span>\n                              </div>\n                              <div className=\"flex items-center space-x-1 text-sm text-muted-foreground\">\n                                <Clock className=\"w-4 h-4\" />\n                                <span data-testid={`booking-time-${booking.id}`}>\n                                  {format(new Date(booking.dateTime), 'h:mm a')} ({booking.durationMins}m)\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(booking.status)} data-testid={`booking-status-${booking.id}`}>\n                              <span className=\"flex items-center space-x-1\">\n                                {getStatusIcon(booking.status)}\n                                <span>{booking.status}</span>\n                              </span>\n                            </Badge>\n                            <Button \n                              variant=\"outline\" \n                              size=\"sm\" \n                              onClick={() => openEditDialog(booking)}\n                              data-testid={`button-edit-booking-${booking.id}`}\n                            >\n                              <Edit className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                        \n                        {booking.notes && (\n                          <div className=\"mt-3 p-2 bg-muted/30 rounded text-sm\" data-testid={`booking-notes-${booking.id}`}>\n                            <strong>Notes:</strong> {booking.notes}\n                          </div>\n                        )}\n                        \n                        <div className=\"mt-3 flex items-center space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant={booking.status === 'CONFIRMED' ? 'default' : 'outline'}\n                            onClick={() => updateBookingStatus(booking.id, 'CONFIRMED')}\n                            disabled={booking.status === 'CONFIRMED'}\n                            data-testid={`button-confirm-${booking.id}`}\n                          >\n                            Confirm\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant={booking.status === 'DONE' ? 'default' : 'outline'}\n                            onClick={() => updateBookingStatus(booking.id, 'DONE')}\n                            disabled={booking.status === 'DONE'}\n                            data-testid={`button-complete-${booking.id}`}\n                          >\n                            Complete\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant={booking.status === 'CANCELLED' ? 'destructive' : 'outline'}\n                            onClick={() => updateBookingStatus(booking.id, 'CANCELLED')}\n                            disabled={booking.status === 'CANCELLED'}\n                            data-testid={`button-cancel-${booking.id}`}\n                          >\n                            Cancel\n                          </Button>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\" data-testid=\"no-bookings-text\">\n                        No bookings found matching the current filters.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Today Tab */}\n          <TabsContent value=\"today\" data-testid=\"tab-content-today\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Today's Appointments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"today-bookings-list\">\n                  {todayBookings.length > 0 ? (\n                    todayBookings.map((booking: BookingWithRelations) => (\n                      <div \n                        key={booking.id} \n                        className=\"p-4 border rounded-lg\"\n                        data-testid={`today-booking-${booking.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\" data-testid={`today-service-${booking.id}`}>\n                              {booking.service.name}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`today-customer-${booking.id}`}>\n                              {booking.customerName || booking.user?.firstName || 'Guest'} • {format(new Date(booking.dateTime), 'h:mm a')}\n                            </p>\n                          </div>\n                          <Badge className={getStatusColor(booking.status)} data-testid={`today-status-${booking.id}`}>\n                            {booking.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\" data-testid=\"no-today-bookings\">\n                        No appointments scheduled for today.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Upcoming Tab */}\n          <TabsContent value=\"upcoming\" data-testid=\"tab-content-upcoming\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Upcoming Appointments</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"upcoming-bookings-list\">\n                  {upcomingBookings.length > 0 ? (\n                    upcomingBookings.slice(0, 10).map((booking: BookingWithRelations) => (\n                      <div \n                        key={booking.id} \n                        className=\"p-4 border rounded-lg\"\n                        data-testid={`upcoming-booking-${booking.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h3 className=\"font-semibold\" data-testid={`upcoming-service-${booking.id}`}>\n                              {booking.service.name}\n                            </h3>\n                            <p className=\"text-sm text-muted-foreground\" data-testid={`upcoming-details-${booking.id}`}>\n                              {booking.customerName || booking.user?.firstName || 'Guest'} • {format(new Date(booking.dateTime), 'MMM dd, h:mm a')}\n                            </p>\n                          </div>\n                          <Badge className={getStatusColor(booking.status)} data-testid={`upcoming-status-${booking.id}`}>\n                            {booking.status}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <p className=\"text-muted-foreground\" data-testid=\"no-upcoming-bookings\">\n                        No upcoming appointments.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Calendar Tab */}\n          <TabsContent value=\"calendar\" data-testid=\"tab-content-calendar\">\n            <CalendarView \n              bookings={bookings}\n              onUpdateBookingStatus={updateBookingStatus}\n              onEditBooking={openEditDialog}\n            />\n          </TabsContent>\n        </Tabs>\n\n        {/* Edit Booking Dialog */}\n        <Dialog open={editDialog} onOpenChange={setEditDialog}>\n          <DialogContent data-testid=\"edit-booking-dialog\">\n            <DialogHeader>\n              <DialogTitle>Edit Booking</DialogTitle>\n            </DialogHeader>\n            {editingBooking && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <strong>Service:</strong> {editingBooking.service.name}\n                  </div>\n                  <div>\n                    <strong>Customer:</strong> {editingBooking.customerName || editingBooking.user?.firstName || 'Guest'}\n                  </div>\n                  <div>\n                    <strong>Date:</strong> {format(new Date(editingBooking.dateTime), 'MMM dd, yyyy')}\n                  </div>\n                  <div>\n                    <strong>Time:</strong> {format(new Date(editingBooking.dateTime), 'h:mm a')}\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Status</label>\n                  <Select\n                    value={editingBooking.status}\n                    onValueChange={(value) => setEditingBooking({ ...editingBooking, status: value as 'PENDING' | 'CONFIRMED' | 'CANCELLED' | 'DONE' })}\n                    data-testid=\"edit-status-select\"\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"PENDING\">Pending</SelectItem>\n                      <SelectItem value=\"CONFIRMED\">Confirmed</SelectItem>\n                      <SelectItem value=\"DONE\">Done</SelectItem>\n                      <SelectItem value=\"CANCELLED\">Cancelled</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button variant=\"outline\" onClick={() => setEditDialog(false)} data-testid=\"button-cancel-edit\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={() => updateBookingMutation.mutate({ id: editingBooking.id, status: editingBooking.status })}\n                    disabled={updateBookingMutation.isPending}\n                    data-testid=\"button-save-edit\"\n                  >\n                    Save Changes\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":24492},"client/src/pages/admin/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Calendar, \n  Users, \n  DollarSign, \n  Star, \n  TrendingUp, \n  Clock,\n  CheckCircle,\n  AlertCircle\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function AdminDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    document.title = \"Admin Dashboard - HOME BASE Beauty Salon\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting to login...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: bookings = [], error: bookingsError } = useQuery({\n    queryKey: [\"/api/admin/bookings\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  const { data: pendingFeedback = [], error: feedbackError } = useQuery({\n    queryKey: [\"/api/admin/feedback/pending\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    const errors = [bookingsError, feedbackError].filter(Boolean);\n    for (const error of errors) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [bookingsError, feedbackError, toast]);\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }, (_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  // Calculate statistics\n  const thisWeekStart = new Date();\n  thisWeekStart.setDate(thisWeekStart.getDate() - thisWeekStart.getDay());\n  thisWeekStart.setHours(0, 0, 0, 0);\n\n  const thisWeekBookings = bookings.filter((booking: any) => \n    new Date(booking.createdAt) >= thisWeekStart\n  );\n\n  const upcomingBookings = bookings.filter((booking: any) => \n    new Date(booking.dateTime) > new Date() && booking.status !== 'CANCELLED'\n  );\n\n  const totalRevenue = bookings\n    .filter((booking: any) => booking.status === 'DONE')\n    .reduce((sum: number, booking: any) => sum + parseFloat(booking.totalPrice || 0), 0);\n\n  const monthlyRevenue = bookings\n    .filter((booking: any) => {\n      const bookingDate = new Date(booking.dateTime);\n      const currentMonth = new Date().getMonth();\n      const currentYear = new Date().getFullYear();\n      return booking.status === 'DONE' && \n             bookingDate.getMonth() === currentMonth && \n             bookingDate.getFullYear() === currentYear;\n    })\n    .reduce((sum: number, booking: any) => sum + parseFloat(booking.totalPrice || 0), 0);\n\n  const recentBookings = bookings\n    .slice()\n    .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 5);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800';\n      case 'DONE':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Page Header */}\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"dashboard-title\">\n            Dashboard Overview\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"dashboard-description\">\n            Welcome back, {user?.firstName}! Here's what's happening at your salon.\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card data-testid=\"stat-weekly-bookings\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">This Week's Bookings</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"weekly-bookings-count\">\n                {thisWeekBookings.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                New appointments this week\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-total-customers\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Customers</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"total-customers-count\">\n                {new Set(bookings.map((b: any) => b.userId || b.customerEmail)).size}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Unique customers served\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-monthly-revenue\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"monthly-revenue-amount\">\n                ${monthlyRevenue.toFixed(2)}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Revenue this month\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-reviews\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Reviews</CardTitle>\n              <Star className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"pending-reviews-count\">\n                {pendingFeedback.length}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Awaiting moderation\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Activity */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Bookings */}\n          <Card data-testid=\"recent-bookings-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Recent Bookings</span>\n                <Link href=\"/admin/bookings\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-bookings\">\n                    View All\n                  </Button>\n                </Link>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\" data-testid=\"recent-bookings-list\">\n                {recentBookings.length > 0 ? (\n                  recentBookings.map((booking: any) => (\n                    <div \n                      key={booking.id} \n                      className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\"\n                      data-testid={`recent-booking-${booking.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-foreground\" data-testid={`booking-customer-${booking.id}`}>\n                          {booking.customerName || booking.user?.firstName || 'Guest'}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`booking-service-${booking.id}`}>\n                          {booking.service.name} • {new Date(booking.dateTime).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <Badge className={getStatusColor(booking.status)} data-testid={`booking-status-${booking.id}`}>\n                        {booking.status}\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-recent-bookings\">\n                    No recent bookings\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Pending Reviews */}\n          <Card data-testid=\"pending-reviews-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Pending Reviews</span>\n                <Link href=\"/admin/feedback\">\n                  <Button variant=\"outline\" size=\"sm\" data-testid=\"button-view-all-feedback\">\n                    View All\n                  </Button>\n                </Link>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\" data-testid=\"pending-reviews-list\">\n                {pendingFeedback.length > 0 ? (\n                  pendingFeedback.slice(0, 3).map((feedback: any) => (\n                    <div \n                      key={feedback.id} \n                      className=\"p-3 bg-muted/30 rounded-lg\"\n                      data-testid={`pending-review-${feedback.id}`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <p className=\"font-medium text-foreground\" data-testid={`review-customer-${feedback.id}`}>\n                          {feedback.customerName || feedback.user?.firstName || 'Anonymous'}\n                        </p>\n                        <div className=\"flex text-accent text-sm\" data-testid={`review-rating-${feedback.id}`}>\n                          {Array.from({ length: feedback.rating }, (_, i) => (\n                            <Star key={i} className=\"w-4 h-4 fill-current\" />\n                          ))}\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`review-comment-${feedback.id}`}>\n                        \"{feedback.comment}\"\n                      </p>\n                    </div>\n                  ))\n                ) : (\n                  <p className=\"text-center text-muted-foreground py-4\" data-testid=\"no-pending-reviews\">\n                    No pending reviews\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <Card data-testid=\"quick-actions-card\">\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\" data-testid=\"quick-actions-grid\">\n              <Link href=\"/admin/services\">\n                <Button variant=\"outline\" className=\"w-full h-16 flex flex-col space-y-2\" data-testid=\"button-manage-services\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  <span>Manage Services</span>\n                </Button>\n              </Link>\n              \n              <Link href=\"/admin/events\">\n                <Button variant=\"outline\" className=\"w-full h-16 flex flex-col space-y-2\" data-testid=\"button-create-promotion\">\n                  <Star className=\"w-5 h-5\" />\n                  <span>Create Promotion</span>\n                </Button>\n              </Link>\n              \n              <Link href=\"/admin/gallery\">\n                <Button variant=\"outline\" className=\"w-full h-16 flex flex-col space-y-2\" data-testid=\"button-update-gallery\">\n                  <Calendar className=\"w-5 h-5\" />\n                  <span>Update Gallery</span>\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":13239},"client/src/pages/admin/events.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, Star, CalendarIcon, Percent, DollarSign, Target } from \"lucide-react\";\nimport { format, addDays } from \"date-fns\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function AdminEvents() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [promoDialog, setPromoDialog] = useState(false);\n  const [editingPromo, setEditingPromo] = useState<any>(null);\n  const [promoForm, setPromoForm] = useState({\n    title: \"\",\n    description: \"\",\n    discountType: \"PERCENT\",\n    value: \"\",\n    startAt: undefined as Date | undefined,\n    endAt: undefined as Date | undefined,\n    scopeType: \"GLOBAL\",\n    scopeId: \"\",\n    isActive: true\n  });\n\n  useEffect(() => {\n    document.title = \"Events & Promotions - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: promotions = [], error: promotionsError } = useQuery({\n    queryKey: [\"/api/admin/event-promos\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  const { data: services = [], error: servicesError } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  const { data: categories = [], error: categoriesError } = useQuery({\n    queryKey: [\"/api/service-categories\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    const errors = [promotionsError, servicesError, categoriesError].filter(Boolean);\n    for (const error of errors) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [promotionsError, servicesError, categoriesError, toast]);\n\n  const createPromoMutation = useMutation({\n    mutationFn: async (promoData: any) => {\n      return apiRequest(\"POST\", \"/api/admin/event-promos\", promoData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Promotion created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/event-promos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setPromoDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create promotion.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePromoMutation = useMutation({\n    mutationFn: async ({ id, ...promoData }: any) => {\n      return apiRequest(\"PUT\", `/api/admin/event-promos/${id}`, promoData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Promotion updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/event-promos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setPromoDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update promotion.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePromoMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/event-promos/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Promotion deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/event-promos\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/promotions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete promotion.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setPromoForm({\n      title: \"\",\n      description: \"\",\n      discountType: \"PERCENT\",\n      value: \"\",\n      startAt: undefined,\n      endAt: undefined,\n      scopeType: \"GLOBAL\",\n      scopeId: \"\",\n      isActive: true\n    });\n    setEditingPromo(null);\n  };\n\n  const openEditDialog = (promo: any) => {\n    setEditingPromo(promo);\n    setPromoForm({\n      title: promo.title,\n      description: promo.description || \"\",\n      discountType: promo.discountType,\n      value: promo.value,\n      startAt: new Date(promo.startAt),\n      endAt: new Date(promo.endAt),\n      scopeType: promo.scopeType,\n      scopeId: promo.scopeId || \"\",\n      isActive: promo.isActive\n    });\n    setPromoDialog(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!promoForm.title.trim() || !promoForm.value || !promoForm.startAt || !promoForm.endAt) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (promoForm.endAt <= promoForm.startAt) {\n      toast({\n        title: \"Invalid Dates\",\n        description: \"End date must be after start date.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const promoData = {\n      title: promoForm.title.trim(),\n      description: promoForm.description.trim() || null,\n      discountType: promoForm.discountType,\n      value: parseFloat(promoForm.value),\n      startAt: promoForm.startAt.toISOString(),\n      endAt: promoForm.endAt.toISOString(),\n      scopeType: promoForm.scopeType,\n      scopeId: promoForm.scopeId || null,\n      isActive: promoForm.isActive\n    };\n\n    if (editingPromo) {\n      updatePromoMutation.mutate({ id: editingPromo.id, ...promoData });\n    } else {\n      createPromoMutation.mutate(promoData);\n    }\n  };\n\n  const getStatusColor = (promo: any) => {\n    const now = new Date();\n    const startDate = new Date(promo.startAt);\n    const endDate = new Date(promo.endAt);\n\n    if (!promo.isActive) return 'bg-gray-100 text-gray-800';\n    if (now < startDate) return 'bg-blue-100 text-blue-800';\n    if (now > endDate) return 'bg-red-100 text-red-800';\n    return 'bg-green-100 text-green-800';\n  };\n\n  const getStatusText = (promo: any) => {\n    const now = new Date();\n    const startDate = new Date(promo.startAt);\n    const endDate = new Date(promo.endAt);\n\n    if (!promo.isActive) return 'Inactive';\n    if (now < startDate) return 'Scheduled';\n    if (now > endDate) return 'Expired';\n    return 'Active';\n  };\n\n  const getScopeText = (promo: any) => {\n    if (promo.scopeType === 'GLOBAL') return 'All Services';\n    if (promo.scopeType === 'CATEGORY') {\n      const category = categories.find((c: any) => c.id === promo.scopeId);\n      return category ? `${category.name} Services` : 'Category';\n    }\n    if (promo.scopeType === 'SERVICE') {\n      const service = services.find((s: any) => s.id === promo.scopeId);\n      return service ? service.name : 'Specific Service';\n    }\n    return 'Unknown';\n  };\n\n  const formatDiscountValue = (promo: any) => {\n    if (promo.discountType === 'PERCENT') {\n      return `${parseFloat(promo.value)}% OFF`;\n    } else {\n      return `$${parseFloat(promo.value)} OFF`;\n    }\n  };\n\n  const activePromotions = promotions.filter((promo: any) => {\n    const now = new Date();\n    const startDate = new Date(promo.startAt);\n    const endDate = new Date(promo.endAt);\n    return promo.isActive && now >= startDate && now <= endDate;\n  });\n\n  const scheduledPromotions = promotions.filter((promo: any) => {\n    const now = new Date();\n    const startDate = new Date(promo.startAt);\n    return promo.isActive && now < startDate;\n  });\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }, (_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"events-title\">\n              Events & Promotions\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"events-description\">\n              Manage promotional campaigns and discount events\n            </p>\n          </div>\n          <Dialog open={promoDialog} onOpenChange={setPromoDialog}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} data-testid=\"button-add-promotion\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Promotion\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl\" data-testid=\"promotion-dialog\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"dialog-title\">\n                  {editingPromo ? \"Edit Promotion\" : \"Create New Promotion\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"promotion-form\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"title\" className=\"text-sm font-semibold mb-2 block\">\n                      Promotion Title *\n                    </Label>\n                    <Input\n                      id=\"title\"\n                      value={promoForm.title}\n                      onChange={(e) => setPromoForm(prev => ({ ...prev, title: e.target.value }))}\n                      placeholder=\"Enter promotion title\"\n                      data-testid=\"input-title\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"discountType\" className=\"text-sm font-semibold mb-2 block\">\n                      Discount Type *\n                    </Label>\n                    <Select \n                      value={promoForm.discountType} \n                      onValueChange={(value) => setPromoForm(prev => ({ ...prev, discountType: value }))}\n                      data-testid=\"select-discount-type\"\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"PERCENT\" data-testid=\"discount-type-percent\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Percent className=\"w-4 h-4\" />\n                            <span>Percentage</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"AMOUNT\" data-testid=\"discount-type-amount\">\n                          <div className=\"flex items-center space-x-2\">\n                            <DollarSign className=\"w-4 h-4\" />\n                            <span>Fixed Amount</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\" className=\"text-sm font-semibold mb-2 block\">\n                    Description\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    value={promoForm.description}\n                    onChange={(e) => setPromoForm(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Promotion description\"\n                    rows={3}\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"value\" className=\"text-sm font-semibold mb-2 block\">\n                      Discount Value *\n                    </Label>\n                    <Input\n                      id=\"value\"\n                      type=\"number\"\n                      step={promoForm.discountType === 'PERCENT' ? \"1\" : \"0.01\"}\n                      value={promoForm.value}\n                      onChange={(e) => setPromoForm(prev => ({ ...prev, value: e.target.value }))}\n                      placeholder={promoForm.discountType === 'PERCENT' ? \"20\" : \"10.00\"}\n                      data-testid=\"input-value\"\n                    />\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {promoForm.discountType === 'PERCENT' ? 'Percentage (1-100)' : 'Dollar amount'}\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-semibold mb-2 block\">\n                      Start Date *\n                    </Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"w-full justify-start text-left font-normal\",\n                            !promoForm.startAt && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"start-date-picker-trigger\"\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {promoForm.startAt ? format(promoForm.startAt, \"PPP\") : \"Select start date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" data-testid=\"start-date-picker-content\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={promoForm.startAt}\n                          onSelect={(date) => setPromoForm(prev => ({ ...prev, startAt: date }))}\n                          disabled={(date) => date < new Date()}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-semibold mb-2 block\">\n                      End Date *\n                    </Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button\n                          variant=\"outline\"\n                          className={cn(\n                            \"w-full justify-start text-left font-normal\",\n                            !promoForm.endAt && \"text-muted-foreground\"\n                          )}\n                          data-testid=\"end-date-picker-trigger\"\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                          {promoForm.endAt ? format(promoForm.endAt, \"PPP\") : \"Select end date\"}\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\" data-testid=\"end-date-picker-content\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={promoForm.endAt}\n                          onSelect={(date) => setPromoForm(prev => ({ ...prev, endAt: date }))}\n                          disabled={(date) => date < (promoForm.startAt || new Date())}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"scopeType\" className=\"text-sm font-semibold mb-2 block\">\n                      Apply To *\n                    </Label>\n                    <Select \n                      value={promoForm.scopeType} \n                      onValueChange={(value) => setPromoForm(prev => ({ ...prev, scopeType: value, scopeId: \"\" }))}\n                      data-testid=\"select-scope-type\"\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"GLOBAL\" data-testid=\"scope-type-global\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Star className=\"w-4 h-4\" />\n                            <span>All Services</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"CATEGORY\" data-testid=\"scope-type-category\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Target className=\"w-4 h-4\" />\n                            <span>Service Category</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"SERVICE\" data-testid=\"scope-type-service\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Target className=\"w-4 h-4\" />\n                            <span>Specific Service</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  {promoForm.scopeType === 'CATEGORY' && (\n                    <div>\n                      <Label htmlFor=\"scopeId\" className=\"text-sm font-semibold mb-2 block\">\n                        Select Category *\n                      </Label>\n                      <Select \n                        value={promoForm.scopeId} \n                        onValueChange={(value) => setPromoForm(prev => ({ ...prev, scopeId: value }))}\n                        data-testid=\"select-category\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Choose category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories.map((category: any) => (\n                            <SelectItem key={category.id} value={category.id} data-testid={`category-option-${category.id}`}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                  \n                  {promoForm.scopeType === 'SERVICE' && (\n                    <div>\n                      <Label htmlFor=\"scopeId\" className=\"text-sm font-semibold mb-2 block\">\n                        Select Service *\n                      </Label>\n                      <Select \n                        value={promoForm.scopeId} \n                        onValueChange={(value) => setPromoForm(prev => ({ ...prev, scopeId: value }))}\n                        data-testid=\"select-service\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Choose service\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {services.map((service: any) => (\n                            <SelectItem key={service.id} value={service.id} data-testid={`service-option-${service.id}`}>\n                              {service.name} ({[\n                                service.isNail && \"Nail\",\n                                service.isEyelash && \"Eyelash\", \n                                service.isFacial && \"Facial\"\n                              ].filter(Boolean).join(\", \") || \"General\"})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"isActive\"\n                    checked={promoForm.isActive}\n                    onChange={(e) => setPromoForm(prev => ({ ...prev, isActive: e.target.checked }))}\n                    className=\"rounded border-border\"\n                    data-testid=\"checkbox-active\"\n                  />\n                  <Label htmlFor=\"isActive\" className=\"text-sm\">\n                    Promotion is active\n                  </Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setPromoDialog(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createPromoMutation.isPending || updatePromoMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {editingPromo ? \"Update\" : \"Create\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n          <Card data-testid=\"stat-total-promotions\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Promotions</CardTitle>\n              <Star className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"total-promotions-count\">\n                {promotions.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-active-promotions\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Now</CardTitle>\n              <Target className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"active-promotions-count\">\n                {activePromotions.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-scheduled-promotions\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Scheduled</CardTitle>\n              <CalendarIcon className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"scheduled-promotions-count\">\n                {scheduledPromotions.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Promotions Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"promotions-grid\">\n          {promotions.map((promo: any) => (\n            <Card key={promo.id} className=\"hover-lift\" data-testid={`promotion-card-${promo.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\" data-testid={`promotion-title-${promo.id}`}>\n                      {promo.title}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`promotion-scope-${promo.id}`}>\n                      {getScopeText(promo)}\n                    </p>\n                  </div>\n                  <Badge className={getStatusColor(promo)} data-testid={`promotion-status-${promo.id}`}>\n                    {getStatusText(promo)}\n                  </Badge>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {promo.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`promotion-description-${promo.id}`}>\n                      {promo.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-1\" data-testid={`promotion-discount-${promo.id}`}>\n                      {promo.discountType === 'PERCENT' ? (\n                        <Percent className=\"w-4 h-4 text-primary\" />\n                      ) : (\n                        <DollarSign className=\"w-4 h-4 text-primary\" />\n                      )}\n                      <span className=\"font-semibold text-lg\">{formatDiscountValue(promo)}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground space-y-1\">\n                    <div className=\"flex items-center space-x-1\" data-testid={`promotion-dates-${promo.id}`}>\n                      <CalendarIcon className=\"w-3 h-3\" />\n                      <span>\n                        {format(new Date(promo.startAt), 'MMM dd')} - {format(new Date(promo.endAt), 'MMM dd, yyyy')}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2 mt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    onClick={() => openEditDialog(promo)}\n                    data-testid={`button-edit-${promo.id}`}\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\" size=\"sm\" data-testid={`button-delete-${promo.id}`}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent data-testid={`delete-dialog-${promo.id}`}>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Promotion</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{promo.title}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel data-testid={`cancel-delete-${promo.id}`}>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deletePromoMutation.mutate(promo.id)}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                          data-testid={`confirm-delete-${promo.id}`}\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {promotions.length === 0 && (\n          <Card className=\"text-center py-12\" data-testid=\"no-promotions-card\">\n            <CardContent>\n              <Star className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"no-promotions-text\">\n                No promotions found. Create your first promotion to boost sales.\n              </p>\n              <Button onClick={() => setPromoDialog(true)} data-testid=\"button-create-first-promotion\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create First Promotion\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":31373},"client/src/pages/admin/feedback.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Star, \n  CheckCircle, \n  XCircle, \n  AlertTriangle, \n  Trash2, \n  Eye,\n  MessageSquare\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport type { Feedback, ContactMessage } from \"@shared/schema\";\n\nexport default function AdminFeedback() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n\n  useEffect(() => {\n    document.title = \"Feedback Management - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: allFeedback = [], error: feedbackError } = useQuery<(Feedback & { user?: any })[]>({\n    queryKey: [\"/api/admin/feedback\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  const { data: pendingFeedback = [], error: pendingError } = useQuery<(Feedback & { user?: any })[]>({\n    queryKey: [\"/api/admin/feedback/pending\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  const { data: contactMessages = [], error: contactError } = useQuery<ContactMessage[]>({\n    queryKey: [\"/api/admin/contact-messages\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    const errors = [feedbackError, pendingError, contactError].filter(Boolean);\n    for (const error of errors) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [feedbackError, pendingError, toast]);\n\n  const updateFeedbackMutation = useMutation({\n    mutationFn: async ({ id, ...feedbackData }: any) => {\n      return apiRequest(\"PUT\", `/api/admin/feedback/${id}`, feedbackData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Feedback updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/feedback\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/feedback/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update feedback.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteFeedbackMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/feedback/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Feedback deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/feedback\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/feedback/pending\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/feedback\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete feedback.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return 'bg-green-100 text-green-800';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'REJECTED':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'APPROVED':\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case 'PENDING':\n        return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'REJECTED':\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <AlertTriangle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star \n        key={i} \n        className={`w-4 h-4 ${i < rating ? 'text-accent fill-current' : 'text-muted-foreground'}`}\n      />\n    ));\n  };\n\n  const getCustomerName = (feedback: any) => {\n    if (feedback.customerName) return feedback.customerName;\n    if (feedback.user?.firstName) {\n      return `${feedback.user.firstName} ${feedback.user.lastName || ''}`.trim();\n    }\n    return \"Anonymous Customer\";\n  };\n\n  const approveFeedback = (id: string) => {\n    updateFeedbackMutation.mutate({ id, status: 'APPROVED' });\n  };\n\n  const rejectFeedback = (id: string) => {\n    updateFeedbackMutation.mutate({ id, status: 'REJECTED' });\n  };\n\n  const toggleFeatured = (id: string, isFeatured: boolean) => {\n    updateFeedbackMutation.mutate({ id, isFeatured: !isFeatured });\n  };\n\n  const filteredFeedback = statusFilter === \"all\" \n    ? allFeedback \n    : allFeedback.filter((feedback: any) => feedback.status === statusFilter);\n\n  const approvedFeedback = allFeedback.filter((feedback: any) => feedback.status === 'APPROVED');\n  const rejectedFeedback = allFeedback.filter((feedback: any) => feedback.status === 'REJECTED');\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }, (_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"feedback-title\">\n            Feedback Management\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"feedback-description\">\n            Moderate customer reviews and feedback\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card data-testid=\"stat-total-feedback\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Feedback</CardTitle>\n              <MessageSquare className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"total-feedback-count\">\n                {allFeedback.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-pending-feedback\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending Review</CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"pending-feedback-count\">\n                {pendingFeedback.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-approved-feedback\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"approved-feedback-count\">\n                {approvedFeedback.length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card data-testid=\"stat-rejected-feedback\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n              <XCircle className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"rejected-feedback-count\">\n                {rejectedFeedback.length}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Tabs */}\n        <Tabs defaultValue=\"pending\" className=\"w-full\" data-testid=\"feedback-tabs\">\n          <TabsList className=\"grid w-full grid-cols-5\" data-testid=\"tabs-list\">\n            <TabsTrigger value=\"pending\" data-testid=\"tab-pending\">\n              Pending ({pendingFeedback.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"approved\" data-testid=\"tab-approved\">\n              Approved ({approvedFeedback.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"rejected\" data-testid=\"tab-rejected\">\n              Rejected ({rejectedFeedback.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"all\" data-testid=\"tab-all\">All</TabsTrigger>\n            <TabsTrigger value=\"messages\" data-testid=\"tab-messages\">\n              Messages ({contactMessages.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Pending Tab */}\n          <TabsContent value=\"pending\" data-testid=\"tab-content-pending\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Pending Reviews</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\" data-testid=\"pending-feedback-list\">\n                  {pendingFeedback.length > 0 ? (\n                    pendingFeedback.map((feedback: any) => (\n                      <div \n                        key={feedback.id} \n                        className=\"p-6 border rounded-lg bg-yellow-50 border-yellow-200\"\n                        data-testid={`pending-feedback-${feedback.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-4\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-foreground\" data-testid={`pending-customer-${feedback.id}`}>\n                                {getCustomerName(feedback)}\n                              </h3>\n                              <div className=\"flex\" data-testid={`pending-rating-${feedback.id}`}>\n                                {renderStars(feedback.rating)}\n                              </div>\n                            </div>\n                            {feedback.title && (\n                              <p className=\"font-medium text-primary mb-2\" data-testid={`pending-title-${feedback.id}`}>\n                                {feedback.title}\n                              </p>\n                            )}\n                            <p className=\"text-muted-foreground mb-3\" data-testid={`pending-comment-${feedback.id}`}>\n                              \"{feedback.comment}\"\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`pending-date-${feedback.id}`}>\n                              Submitted on {format(new Date(feedback.createdAt), 'MMM dd, yyyy at h:mm a')}\n                            </p>\n                          </div>\n                          <Badge className={getStatusColor(feedback.status)} data-testid={`pending-status-${feedback.id}`}>\n                            <span className=\"flex items-center space-x-1\">\n                              {getStatusIcon(feedback.status)}\n                              <span>{feedback.status}</span>\n                            </span>\n                          </Badge>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <Button \n                            size=\"sm\" \n                            className=\"bg-green-600 hover:bg-green-700\"\n                            onClick={() => approveFeedback(feedback.id)}\n                            disabled={updateFeedbackMutation.isPending}\n                            data-testid={`button-approve-${feedback.id}`}\n                          >\n                            <CheckCircle className=\"w-4 h-4 mr-1\" />\n                            Approve\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"destructive\"\n                            onClick={() => rejectFeedback(feedback.id)}\n                            disabled={updateFeedbackMutation.isPending}\n                            data-testid={`button-reject-${feedback.id}`}\n                          >\n                            <XCircle className=\"w-4 h-4 mr-1\" />\n                            Reject\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-pending-${feedback.id}`}>\n                                <Trash2 className=\"w-4 h-4\" />\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent data-testid={`delete-pending-dialog-${feedback.id}`}>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Delete Feedback</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to delete this feedback? This action cannot be undone.\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel data-testid={`cancel-delete-pending-${feedback.id}`}>Cancel</AlertDialogCancel>\n                                <AlertDialogAction\n                                  onClick={() => deleteFeedbackMutation.mutate(feedback.id)}\n                                  className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                  data-testid={`confirm-delete-pending-${feedback.id}`}\n                                >\n                                  Delete\n                                </AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <AlertTriangle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"no-pending-feedback\">\n                        No pending feedback to review.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Approved Tab */}\n          <TabsContent value=\"approved\" data-testid=\"tab-content-approved\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Approved Reviews</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"approved-feedback-list\">\n                  {approvedFeedback.length > 0 ? (\n                    approvedFeedback.map((feedback: any) => (\n                      <div \n                        key={feedback.id} \n                        className=\"p-4 border rounded-lg bg-green-50 border-green-200\"\n                        data-testid={`approved-feedback-${feedback.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-foreground\" data-testid={`approved-customer-${feedback.id}`}>\n                                {getCustomerName(feedback)}\n                              </h3>\n                              <div className=\"flex\" data-testid={`approved-rating-${feedback.id}`}>\n                                {renderStars(feedback.rating)}\n                              </div>\n                              {feedback.isFeatured && (\n                                <Badge variant=\"secondary\" data-testid={`featured-badge-${feedback.id}`}>\n                                  Featured\n                                </Badge>\n                              )}\n                            </div>\n                            {feedback.title && (\n                              <p className=\"font-medium text-primary mb-2\" data-testid={`approved-title-${feedback.id}`}>\n                                {feedback.title}\n                              </p>\n                            )}\n                            <p className=\"text-muted-foreground mb-2\" data-testid={`approved-comment-${feedback.id}`}>\n                              \"{feedback.comment}\"\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`approved-date-${feedback.id}`}>\n                              {format(new Date(feedback.createdAt), 'MMM dd, yyyy')}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              variant={feedback.isFeatured ? \"default\" : \"outline\"}\n                              onClick={() => toggleFeatured(feedback.id, feedback.isFeatured)}\n                              disabled={updateFeedbackMutation.isPending}\n                              data-testid={`button-feature-${feedback.id}`}\n                            >\n                              <Star className=\"w-4 h-4 mr-1\" />\n                              {feedback.isFeatured ? \"Unfeature\" : \"Feature\"}\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => rejectFeedback(feedback.id)}\n                              disabled={updateFeedbackMutation.isPending}\n                              data-testid={`button-unapprove-${feedback.id}`}\n                            >\n                              <XCircle className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <CheckCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"no-approved-feedback\">\n                        No approved feedback yet.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Rejected Tab */}\n          <TabsContent value=\"rejected\" data-testid=\"tab-content-rejected\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Rejected Reviews</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"rejected-feedback-list\">\n                  {rejectedFeedback.length > 0 ? (\n                    rejectedFeedback.map((feedback: any) => (\n                      <div \n                        key={feedback.id} \n                        className=\"p-4 border rounded-lg bg-red-50 border-red-200\"\n                        data-testid={`rejected-feedback-${feedback.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-foreground\" data-testid={`rejected-customer-${feedback.id}`}>\n                                {getCustomerName(feedback)}\n                              </h3>\n                              <div className=\"flex\" data-testid={`rejected-rating-${feedback.id}`}>\n                                {renderStars(feedback.rating)}\n                              </div>\n                            </div>\n                            {feedback.title && (\n                              <p className=\"font-medium text-primary mb-2\" data-testid={`rejected-title-${feedback.id}`}>\n                                {feedback.title}\n                              </p>\n                            )}\n                            <p className=\"text-muted-foreground mb-2\" data-testid={`rejected-comment-${feedback.id}`}>\n                              \"{feedback.comment}\"\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`rejected-date-${feedback.id}`}>\n                              {format(new Date(feedback.createdAt), 'MMM dd, yyyy')}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              className=\"bg-green-600 hover:bg-green-700\"\n                              onClick={() => approveFeedback(feedback.id)}\n                              disabled={updateFeedbackMutation.isPending}\n                              data-testid={`button-approve-rejected-${feedback.id}`}\n                            >\n                              <CheckCircle className=\"w-4 h-4\" />\n                            </Button>\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button variant=\"destructive\" size=\"sm\" data-testid={`button-delete-rejected-${feedback.id}`}>\n                                  <Trash2 className=\"w-4 h-4\" />\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent data-testid={`delete-rejected-dialog-${feedback.id}`}>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>Delete Feedback</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    Are you sure you want to delete this feedback? This action cannot be undone.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel data-testid={`cancel-delete-rejected-${feedback.id}`}>Cancel</AlertDialogCancel>\n                                  <AlertDialogAction\n                                    onClick={() => deleteFeedbackMutation.mutate(feedback.id)}\n                                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                                    data-testid={`confirm-delete-rejected-${feedback.id}`}\n                                  >\n                                    Delete\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <XCircle className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"no-rejected-feedback\">\n                        No rejected feedback.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* All Tab */}\n          <TabsContent value=\"all\" data-testid=\"tab-content-all\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>All Feedback</CardTitle>\n                  <Select value={statusFilter} onValueChange={setStatusFilter} data-testid=\"status-filter\">\n                    <SelectTrigger className=\"w-40\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"PENDING\">Pending</SelectItem>\n                      <SelectItem value=\"APPROVED\">Approved</SelectItem>\n                      <SelectItem value=\"REJECTED\">Rejected</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\" data-testid=\"all-feedback-list\">\n                  {filteredFeedback.length > 0 ? (\n                    filteredFeedback.map((feedback: any) => (\n                      <div \n                        key={feedback.id} \n                        className=\"p-4 border rounded-lg\"\n                        data-testid={`all-feedback-${feedback.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-2\">\n                              <h3 className=\"font-semibold text-foreground\" data-testid={`all-customer-${feedback.id}`}>\n                                {getCustomerName(feedback)}\n                              </h3>\n                              <div className=\"flex\" data-testid={`all-rating-${feedback.id}`}>\n                                {renderStars(feedback.rating)}\n                              </div>\n                              {feedback.isFeatured && (\n                                <Badge variant=\"secondary\" data-testid={`all-featured-${feedback.id}`}>\n                                  Featured\n                                </Badge>\n                              )}\n                            </div>\n                            {feedback.title && (\n                              <p className=\"font-medium text-primary mb-2\" data-testid={`all-title-${feedback.id}`}>\n                                {feedback.title}\n                              </p>\n                            )}\n                            <p className=\"text-muted-foreground mb-2\" data-testid={`all-comment-${feedback.id}`}>\n                              \"{feedback.comment}\"\n                            </p>\n                            <p className=\"text-xs text-muted-foreground\" data-testid={`all-date-${feedback.id}`}>\n                              {format(new Date(feedback.createdAt), 'MMM dd, yyyy')}\n                            </p>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge className={getStatusColor(feedback.status)} data-testid={`all-status-${feedback.id}`}>\n                              <span className=\"flex items-center space-x-1\">\n                                {getStatusIcon(feedback.status)}\n                                <span>{feedback.status}</span>\n                              </span>\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8\">\n                      <MessageSquare className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <p className=\"text-muted-foreground\" data-testid=\"no-all-feedback\">\n                        No feedback found matching the current filter.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Contact Messages Tab */}\n          <TabsContent value=\"messages\" data-testid=\"tab-content-messages\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  Contact Messages\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {contactMessages.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {contactMessages.map((message) => (\n                      <Card key={message.id} className=\"p-4\" data-testid={`message-card-${message.id}`}>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-start justify-between\">\n                            <div>\n                              <h4 className=\"font-semibold text-foreground\" data-testid={`message-name-${message.id}`}>\n                                {message.name}\n                              </h4>\n                              {message.phone && (\n                                <p className=\"text-sm text-muted-foreground\" data-testid={`message-phone-${message.id}`}>\n                                  📞 {message.phone}\n                                </p>\n                              )}\n                            </div>\n                            <span className=\"text-xs text-muted-foreground\" data-testid={`message-date-${message.id}`}>\n                              {message.createdAt ? format(new Date(message.createdAt), \"MMM dd, yyyy 'at' h:mm a\") : \"No date\"}\n                            </span>\n                          </div>\n                          \n                          <div className=\"bg-muted/30 p-3 rounded-lg\">\n                            <p className=\"text-foreground whitespace-pre-wrap\" data-testid={`message-content-${message.id}`}>\n                              {message.message}\n                            </p>\n                          </div>\n                          \n                          <div className=\"flex justify-end\">\n                            <Button\n                              variant=\"outline\" \n                              size=\"sm\"\n                              onClick={() => {\n                                // Copy phone number and email for easy contact\n                                const contactInfo = `${message.name}${message.phone ? ` - ${message.phone}` : ''}`;\n                                navigator.clipboard.writeText(contactInfo);\n                                toast({\n                                  title: \"Contact Info Copied\",\n                                  description: \"Customer contact information copied to clipboard\",\n                                });\n                              }}\n                              data-testid={`button-copy-contact-${message.id}`}\n                            >\n                              Copy Contact\n                            </Button>\n                          </div>\n                        </div>\n                      </Card>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\" data-testid=\"no-messages\">\n                    <MessageSquare className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                    <p>No contact messages yet</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":34077},"client/src/pages/admin/gallery.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, Image as ImageIcon, Upload, Link as LinkIcon } from \"lucide-react\";\nimport type { UploadResult } from \"@uppy/core\";\n\nexport default function AdminGallery() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [imageDialog, setImageDialog] = useState(false);\n  const [editingImage, setEditingImage] = useState<any>(null);\n  const [categoryFilter, setCategoryFilter] = useState<string>(\"all\");\n  const [activeTab, setActiveTab] = useState<string>(\"upload\");\n  const [uploadedImageUrl, setUploadedImageUrl] = useState<string>(\"\");\n  const [imageForm, setImageForm] = useState({\n    url: \"\",\n    category: \"General\",\n    caption: \"\",\n    order: \"0\"\n  });\n\n  useEffect(() => {\n    document.title = \"Gallery Management - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: images = [], error: imagesError } = useQuery<any[]>({\n    queryKey: [\"/api/gallery\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (imagesError && isUnauthorizedError(imagesError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin session expired. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [imagesError, toast]);\n\n  const createImageMutation = useMutation({\n    mutationFn: async (imageData: any) => {\n      return apiRequest(\"POST\", \"/api/admin/gallery\", imageData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Image added to gallery successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n      setImageDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateImageMutation = useMutation({\n    mutationFn: async ({ id, ...imageData }: any) => {\n      return apiRequest(\"PUT\", `/api/admin/gallery/${id}`, imageData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Image updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n      setImageDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteImageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/gallery/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Image deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Upload mutations for object storage\n  const uploadImageMutation = useMutation({\n    mutationFn: async (imageData: { imageURL: string; category: string; caption: string; order: number }) => {\n      return apiRequest(\"PUT\", \"/api/admin/gallery-upload\", imageData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Image uploaded and added to gallery successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/gallery\"] });\n      setImageDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save uploaded image.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setImageForm({\n      url: \"\",\n      category: \"General\",\n      caption: \"\",\n      order: \"0\"\n    });\n    setEditingImage(null);\n    setUploadedImageUrl(\"\");\n    setActiveTab(\"upload\");\n  };\n\n  const openEditDialog = (image: any) => {\n    setEditingImage(image);\n    setImageForm({\n      url: image.url,\n      category: image.category,\n      caption: image.caption || \"\",\n      order: image.order?.toString() || \"0\"\n    });\n    setActiveTab(\"manual\"); // Editing always uses manual mode\n    setImageDialog(true);\n  };\n\n  // Handle getting upload parameters for ObjectUploader\n  const handleGetUploadParameters = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/objects/upload\");\n      const data = await response.json();\n      console.log(\"Upload URL response:\", data); // Debug log\n      if (!data.uploadURL) {\n        throw new Error(\"No upload URL received from server\");\n      }\n      return {\n        method: \"PUT\" as const,\n        url: data.uploadURL,\n      };\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get upload URL. Please try again.\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  // Handle upload completion\n  const handleUploadComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const uploadedFile = result.successful[0];\n      // Extract the object URL from the upload URL by removing query parameters\n      const uploadUrl = (uploadedFile as any).uploadURL;\n      if (uploadUrl) {\n        const objectUrl = uploadUrl.split('?')[0]; // Remove query parameters to get the actual object URL\n        setUploadedImageUrl(objectUrl);\n        toast({\n          title: \"Upload Complete\",\n          description: \"File uploaded successfully! Fill in the details below to add it to your gallery.\",\n        });\n      } else {\n        // Fallback: try other possible properties\n        const alternativeUrl = (uploadedFile as any).url || (uploadedFile as any).response?.uploadURL;\n        if (alternativeUrl) {\n          const objectUrl = alternativeUrl.split('?')[0];\n          setUploadedImageUrl(objectUrl);\n          toast({\n            title: \"Upload Complete\",\n            description: \"File uploaded successfully! Fill in the details below to add it to your gallery.\",\n          });\n        } else {\n          console.error('Upload completed but no URL found in result:', uploadedFile);\n          toast({\n            title: \"Upload Error\",\n            description: \"Upload completed but could not determine file URL. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    // For upload tab, check if we have an uploaded image\n    if (activeTab === \"upload\" && !uploadedImageUrl) {\n      toast({\n        title: \"Missing Image\",\n        description: \"Please upload an image first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // For manual tab or editing, check if we have a URL\n    if (activeTab === \"manual\" && !imageForm.url.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide an image URL.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!imageForm.category || !imageForm.caption.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide a category and caption.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const imageData = {\n      ...imageForm,\n      url: activeTab === \"upload\" ? uploadedImageUrl : imageForm.url,\n      order: parseInt(imageForm.order) || 0\n    };\n\n    if (editingImage) {\n      updateImageMutation.mutate({ id: editingImage.id, ...imageData });\n    } else if (activeTab === \"upload\") {\n      // Use the upload endpoint for uploaded files\n      uploadImageMutation.mutate({\n        imageURL: uploadedImageUrl,\n        category: imageForm.category,\n        caption: imageForm.caption,\n        order: parseInt(imageForm.order) || 0\n      });\n    } else {\n      // Use the regular endpoint for manual URLs\n      createImageMutation.mutate(imageData);\n    }\n  };\n\n  const categories = [\"General\", \"Nail\", \"Eyelash\", \"Facial\"];\n  \n  const filteredImages = categoryFilter === \"all\" \n    ? images \n    : images.filter((image: any) => image.category === categoryFilter);\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }, (_, i) => (\n              <div key={i} className=\"h-64 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"gallery-title\">\n              Gallery Management\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"gallery-description\">\n              Manage your salon's photo gallery\n            </p>\n          </div>\n          <Dialog open={imageDialog} onOpenChange={setImageDialog}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} data-testid=\"button-add-image\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Image\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\" data-testid=\"image-dialog\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"dialog-title\">\n                  {editingImage ? \"Edit Image\" : \"Add New Image\"}\n                </DialogTitle>\n              </DialogHeader>\n              \n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n                {!editingImage && (\n                  <TabsList className=\"grid w-full grid-cols-2\">\n                    <TabsTrigger value=\"upload\" data-testid=\"tab-upload\">\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload File\n                    </TabsTrigger>\n                    <TabsTrigger value=\"manual\" data-testid=\"tab-manual\">\n                      <LinkIcon className=\"w-4 h-4 mr-2\" />\n                      Manual URL\n                    </TabsTrigger>\n                  </TabsList>\n                )}\n\n                <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"image-form\">\n                  <TabsContent value=\"upload\" className=\"space-y-6 mt-6\">\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label className=\"text-sm font-semibold mb-3 block\">\n                          Upload Image *\n                        </Label>\n                        <ObjectUploader\n                          maxNumberOfFiles={1}\n                          maxFileSize={10485760} // 10MB\n                          onGetUploadParameters={handleGetUploadParameters}\n                          onComplete={handleUploadComplete}\n                          buttonClassName=\"w-full h-32 border-2 border-dashed border-muted-foreground/25 hover:border-primary/50 transition-colors\"\n                        >\n                          <div className=\"flex flex-col items-center space-y-2 text-muted-foreground\">\n                            <Upload className=\"w-8 h-8\" />\n                            <div className=\"text-center\">\n                              <p className=\"text-sm font-medium\">Upload an image</p>\n                              <p className=\"text-xs\">PNG, JPG up to 10MB</p>\n                            </div>\n                          </div>\n                        </ObjectUploader>\n                        \n                        {uploadedImageUrl && (\n                          <div className=\"mt-4\">\n                            <Label className=\"text-sm font-semibold mb-2 block\">Upload Preview</Label>\n                            <div className=\"relative w-full h-48 bg-muted rounded-lg overflow-hidden\">\n                              <img \n                                src={uploadedImageUrl} \n                                alt=\"Uploaded preview\" \n                                className=\"w-full h-full object-cover\"\n                                data-testid=\"upload-preview\"\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </TabsContent>\n\n                  <TabsContent value=\"manual\" className=\"space-y-6 mt-6\">\n                    <div>\n                      <Label htmlFor=\"url\" className=\"text-sm font-semibold mb-2 block\">\n                        Image URL *\n                      </Label>\n                      <Input\n                        id=\"url\"\n                        value={imageForm.url}\n                        onChange={(e) => setImageForm(prev => ({ ...prev, url: e.target.value }))}\n                        placeholder=\"https://example.com/image.jpg\"\n                        data-testid=\"input-url\"\n                      />\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Enter a direct URL to the image file\n                      </p>\n                    </div>\n                  </TabsContent>\n\n                  {/* Shared form fields for both tabs */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"category\" className=\"text-sm font-semibold mb-2 block\">\n                        Category *\n                      </Label>\n                      <Select \n                        value={imageForm.category} \n                        onValueChange={(value) => setImageForm(prev => ({ ...prev, category: value }))}\n                        data-testid=\"select-category\"\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select category\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {categories.map((category) => (\n                            <SelectItem key={category} value={category} data-testid={`category-option-${category.toLowerCase()}`}>\n                              {category}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"order\" className=\"text-sm font-semibold mb-2 block\">\n                        Display Order\n                      </Label>\n                      <Input\n                        id=\"order\"\n                        type=\"number\"\n                        value={imageForm.order}\n                        onChange={(e) => setImageForm(prev => ({ ...prev, order: e.target.value }))}\n                        placeholder=\"0\"\n                        data-testid=\"input-order\"\n                      />\n                    </div>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"caption\" className=\"text-sm font-semibold mb-2 block\">\n                      Caption *\n                    </Label>\n                    <Input\n                      id=\"caption\"\n                      value={imageForm.caption}\n                      onChange={(e) => setImageForm(prev => ({ ...prev, caption: e.target.value }))}\n                      placeholder=\"Describe what's shown in this image\"\n                      data-testid=\"input-caption\"\n                    />\n                  </div>\n\n                  {/* Manual URL preview - only show for manual tab and when URL exists */}\n                  {activeTab === \"manual\" && imageForm.url && (\n                    <div>\n                      <Label className=\"text-sm font-semibold mb-2 block\">Preview</Label>\n                      <div className=\"relative w-full h-48 bg-muted rounded-lg overflow-hidden\">\n                        <img \n                          src={imageForm.url} \n                          alt=\"Manual URL preview\" \n                          className=\"w-full h-full object-cover\"\n                          onError={(e) => {\n                            (e.target as HTMLImageElement).style.display = 'none';\n                          }}\n                          data-testid=\"manual-preview\"\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setImageDialog(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createImageMutation.isPending || updateImageMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {editingImage ? \"Update\" : \"Add\"}\n                  </Button>\n                </div>\n              </form>\n              </Tabs>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filter */}\n        <div className=\"flex items-center space-x-4\">\n          <Label className=\"text-sm font-semibold\">Filter by category:</Label>\n          <Select value={categoryFilter} onValueChange={setCategoryFilter} data-testid=\"category-filter\">\n            <SelectTrigger className=\"w-40\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              {categories.map((category) => (\n                <SelectItem key={category} value={category} data-testid={`filter-${category.toLowerCase()}`}>\n                  {category}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Images Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" data-testid=\"images-grid\">\n          {filteredImages.map((image: any) => (\n            <Card key={image.id} className=\"hover-lift overflow-hidden\" data-testid={`image-card-${image.id}`}>\n              <div className=\"relative aspect-square\">\n                <img \n                  src={image.url} \n                  alt={image.caption || 'Gallery image'} \n                  className=\"w-full h-full object-cover\"\n                  data-testid={`image-${image.id}`}\n                />\n                <div className=\"absolute top-2 right-2\">\n                  <Badge variant=\"secondary\" data-testid={`image-category-${image.id}`}>\n                    {image.category}\n                  </Badge>\n                </div>\n                <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex-1\">\n                      {image.caption && (\n                        <p className=\"text-white text-sm font-medium truncate\" data-testid={`image-caption-${image.id}`}>\n                          {image.caption}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        className=\"bg-white/20 border-white/30 text-white hover:bg-white/30\"\n                        onClick={() => openEditDialog(image)}\n                        data-testid={`button-edit-${image.id}`}\n                      >\n                        <Edit className=\"w-4 h-4\" />\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\" \n                            className=\"bg-red-600/80 hover:bg-red-600\"\n                            data-testid={`button-delete-${image.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent data-testid={`delete-dialog-${image.id}`}>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete Image</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete this image? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel data-testid={`cancel-delete-${image.id}`}>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteImageMutation.mutate(image.id)}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              data-testid={`confirm-delete-${image.id}`}\n                            >\n                              Delete\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n\n        {filteredImages.length === 0 && (\n          <Card className=\"text-center py-12\" data-testid=\"no-images-card\">\n            <CardContent>\n              <ImageIcon className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"no-images-text\">\n                {categoryFilter === \"all\" \n                  ? \"No images in gallery. Add your first image to get started.\" \n                  : `No images found in the ${categoryFilter} category.`}\n              </p>\n              <Button onClick={() => setImageDialog(true)} data-testid=\"button-add-first-image\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Image\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":25891},"client/src/pages/admin/services.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, DollarSign, Clock } from \"lucide-react\";\n\nexport default function AdminServices() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [serviceDialog, setServiceDialog] = useState(false);\n  const [editingService, setEditingService] = useState<any>(null);\n  const [serviceForm, setServiceForm] = useState({\n    name: \"\",\n    slug: \"\",\n    description: \"\",\n    basePrice: \"\",\n    durationMins: \"\",\n    isNail: false,\n    isEyelash: false,\n    isFacial: false,\n    isActive: true\n  });\n\n  useEffect(() => {\n    document.title = \"Services Management - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: services = [], error: servicesError } = useQuery<any[]>({\n    queryKey: [\"/api/services\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    const errors = [servicesError].filter(Boolean);\n    for (const error of errors) {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n    }\n  }, [servicesError, toast]);\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (serviceData: any) => {\n      const formattedData = {\n        ...serviceData,\n        basePrice: serviceData.basePrice.toString(),\n        durationMins: parseInt(serviceData.durationMins)\n      };\n      return apiRequest(\"POST\", \"/api/admin/services\", formattedData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Service created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setServiceDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, ...serviceData }: any) => {\n      const formattedData = {\n        ...serviceData,\n        basePrice: serviceData.basePrice.toString(),\n        durationMins: parseInt(serviceData.durationMins)\n      };\n      return apiRequest(\"PUT\", `/api/admin/services/${id}`, formattedData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Service updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      setServiceDialog(false);\n      resetForm();\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/services/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Service deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setServiceForm({\n      name: \"\",\n      slug: \"\",\n      description: \"\",\n      basePrice: \"\",\n      durationMins: \"\",\n      isNail: false,\n      isEyelash: false,\n      isFacial: false,\n      isActive: true\n    });\n    setEditingService(null);\n  };\n\n  const openEditDialog = (service: any) => {\n    setEditingService(service);\n    setServiceForm({\n      name: service.name,\n      slug: service.slug,\n      description: service.description || \"\",\n      basePrice: service.basePrice,\n      durationMins: service.durationMins.toString(),\n      isNail: service.isNail || false,\n      isEyelash: service.isEyelash || false,\n      isFacial: service.isFacial || false,\n      isActive: service.isActive\n    });\n    setServiceDialog(true);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!serviceForm.name || !serviceForm.basePrice || !serviceForm.durationMins || (!serviceForm.isNail && !serviceForm.isEyelash && !serviceForm.isFacial)) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields and select at least one category.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const serviceData = {\n      ...serviceForm,\n      basePrice: parseFloat(serviceForm.basePrice),\n      durationMins: parseInt(serviceForm.durationMins),\n      slug: serviceForm.slug || serviceForm.name.toLowerCase().replace(/\\s+/g, '-')\n    };\n\n    if (editingService) {\n      updateServiceMutation.mutate({ id: editingService.id, ...serviceData });\n    } else {\n      createServiceMutation.mutate(serviceData);\n    }\n  };\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }, (_, i) => (\n              <div key={i} className=\"h-32 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"services-title\">\n              Services Management\n            </h1>\n            <p className=\"text-muted-foreground\" data-testid=\"services-description\">\n              Manage your salon services and pricing\n            </p>\n          </div>\n          <Dialog open={serviceDialog} onOpenChange={setServiceDialog}>\n            <DialogTrigger asChild>\n              <Button onClick={resetForm} data-testid=\"button-add-service\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Service\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\" data-testid=\"service-dialog\">\n              <DialogHeader>\n                <DialogTitle data-testid=\"dialog-title\">\n                  {editingService ? \"Edit Service\" : \"Add New Service\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"service-form\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-semibold mb-2 block\">\n                      Categories *\n                    </Label>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"isNail\"\n                          checked={serviceForm.isNail}\n                          onChange={(e) => setServiceForm(prev => ({ ...prev, isNail: e.target.checked }))}\n                          className=\"rounded border-border\"\n                          data-testid=\"checkbox-nail\"\n                        />\n                        <Label htmlFor=\"isNail\" className=\"text-sm\">\n                          Nail\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"isEyelash\"\n                          checked={serviceForm.isEyelash}\n                          onChange={(e) => setServiceForm(prev => ({ ...prev, isEyelash: e.target.checked }))}\n                          className=\"rounded border-border\"\n                          data-testid=\"checkbox-eyelash\"\n                        />\n                        <Label htmlFor=\"isEyelash\" className=\"text-sm\">\n                          Eyelash\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"isFacial\"\n                          checked={serviceForm.isFacial}\n                          onChange={(e) => setServiceForm(prev => ({ ...prev, isFacial: e.target.checked }))}\n                          className=\"rounded border-border\"\n                          data-testid=\"checkbox-facial\"\n                        />\n                        <Label htmlFor=\"isFacial\" className=\"text-sm\">\n                          Facial\n                        </Label>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"name\" className=\"text-sm font-semibold mb-2 block\">\n                      Service Name *\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      value={serviceForm.name}\n                      onChange={(e) => setServiceForm(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"Enter service name\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\" className=\"text-sm font-semibold mb-2 block\">\n                    Description\n                  </Label>\n                  <Textarea\n                    id=\"description\"\n                    value={serviceForm.description}\n                    onChange={(e) => setServiceForm(prev => ({ ...prev, description: e.target.value }))}\n                    placeholder=\"Service description\"\n                    rows={3}\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"basePrice\" className=\"text-sm font-semibold mb-2 block\">\n                      Base Price ($) *\n                    </Label>\n                    <Input\n                      id=\"basePrice\"\n                      type=\"number\"\n                      step=\"0.01\"\n                      value={serviceForm.basePrice}\n                      onChange={(e) => setServiceForm(prev => ({ ...prev, basePrice: e.target.value }))}\n                      placeholder=\"0.00\"\n                      data-testid=\"input-base-price\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"durationMins\" className=\"text-sm font-semibold mb-2 block\">\n                      Duration (minutes) *\n                    </Label>\n                    <Input\n                      id=\"durationMins\"\n                      type=\"number\"\n                      value={serviceForm.durationMins}\n                      onChange={(e) => setServiceForm(prev => ({ ...prev, durationMins: e.target.value }))}\n                      placeholder=\"60\"\n                      data-testid=\"input-duration\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"isActive\"\n                    checked={serviceForm.isActive}\n                    onChange={(e) => setServiceForm(prev => ({ ...prev, isActive: e.target.checked }))}\n                    className=\"rounded border-border\"\n                    data-testid=\"checkbox-active\"\n                  />\n                  <Label htmlFor=\"isActive\" className=\"text-sm\">\n                    Service is active\n                  </Label>\n                </div>\n\n                <div className=\"flex justify-end space-x-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setServiceDialog(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createServiceMutation.isPending || updateServiceMutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {editingService ? \"Update\" : \"Create\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"services-grid\">\n          {services.map((service: any) => (\n            <Card key={service.id} className=\"hover-lift\" data-testid={`service-card-${service.id}`}>\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg\" data-testid={`service-name-${service.id}`}>\n                      {service.name}\n                    </CardTitle>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`service-category-${service.id}`}>\n                      {[\n                        service.isNail && \"Nail\",\n                        service.isEyelash && \"Eyelash\", \n                        service.isFacial && \"Facial\"\n                      ].filter(Boolean).join(\", \") || \"No categories\"}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={service.isActive ? \"default\" : \"secondary\"} data-testid={`service-status-${service.id}`}>\n                      {service.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {service.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`service-description-${service.id}`}>\n                      {service.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"flex items-center justify-between text-sm\">\n                    <div className=\"flex items-center space-x-1\" data-testid={`service-price-${service.id}`}>\n                      <DollarSign className=\"w-4 h-4 text-primary\" />\n                      <span className=\"font-semibold\">${parseFloat(service.basePrice).toFixed(2)}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\" data-testid={`service-duration-${service.id}`}>\n                      <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                      <span>{service.durationMins} mins</span>\n                    </div>\n                  </div>\n\n                  {service.hasDiscount && (\n                    <Badge variant=\"secondary\" className=\"w-full justify-center\" data-testid={`service-discount-${service.id}`}>\n                      On Sale: ${service.effectivePrice?.toFixed(2)}\n                    </Badge>\n                  )}\n                </div>\n\n                <div className=\"flex items-center space-x-2 mt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    onClick={() => openEditDialog(service)}\n                    data-testid={`button-edit-${service.id}`}\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <AlertDialog>\n                    <AlertDialogTrigger asChild>\n                      <Button variant=\"destructive\" size=\"sm\" data-testid={`button-delete-${service.id}`}>\n                        <Trash2 className=\"w-4 h-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent data-testid={`delete-dialog-${service.id}`}>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Service</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{service.name}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel data-testid={`cancel-delete-${service.id}`}>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteServiceMutation.mutate(service.id)}\n                          className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                          data-testid={`confirm-delete-${service.id}`}\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {services.length === 0 && (\n          <Card className=\"text-center py-12\" data-testid=\"no-services-card\">\n            <CardContent>\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"no-services-text\">\n                No services found. Create your first service to get started.\n              </p>\n              <Button onClick={() => setServiceDialog(true)} data-testid=\"button-create-first-service\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create First Service\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":20754},"client/src/pages/admin/settings.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AdminLayout from \"@/components/AdminLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Settings as SettingsIcon, \n  Save, \n  MapPin, \n  Phone, \n  Facebook, \n  Instagram, \n  MessageCircle, \n  Plus, \n  X,\n  Globe,\n  Clock\n} from \"lucide-react\";\n\nexport default function AdminSettings() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [settingsForm, setSettingsForm] = useState({\n    slogans: [\"\"],\n    address: \"\",\n    facebookUrl: \"\",\n    zaloUrl: \"\",\n    instagramUrl: \"\",\n    phone: \"\",\n    openingHours: {\n      monday: { open: \"09:00\", close: \"19:00\", closed: false },\n      tuesday: { open: \"09:00\", close: \"19:00\", closed: false },\n      wednesday: { open: \"09:00\", close: \"19:00\", closed: false },\n      thursday: { open: \"09:00\", close: \"19:00\", closed: false },\n      friday: { open: \"09:00\", close: \"19:00\", closed: false },\n      saturday: { open: \"09:00\", close: \"18:00\", closed: false },\n      sunday: { open: \"10:00\", close: \"17:00\", closed: false }\n    },\n    heroImages: [\"\"],\n    seo: {\n      title: \"\",\n      description: \"\",\n      keywords: \"\"\n    }\n  });\n\n  useEffect(() => {\n    document.title = \"Settings - Admin\";\n    \n    if (!isLoading && (!isAuthenticated || user?.role !== 'ADMIN')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: contentSettings, error: settingsError } = useQuery({\n    queryKey: [\"/api/content-settings\"],\n    enabled: isAuthenticated && user?.role === 'ADMIN',\n    retry: false,\n  });\n\n  // Load existing settings when data is available\n  useEffect(() => {\n    if (contentSettings) {\n      setSettingsForm({\n        slogans: contentSettings.slogans?.length > 0 ? contentSettings.slogans : [\"\"],\n        address: contentSettings.address || \"\",\n        facebookUrl: contentSettings.facebookUrl || \"\",\n        zaloUrl: contentSettings.zaloUrl || \"\",\n        instagramUrl: contentSettings.instagramUrl || \"\",\n        phone: contentSettings.phone || \"\",\n        openingHours: contentSettings.openingHours || {\n          monday: { open: \"09:00\", close: \"19:00\", closed: false },\n          tuesday: { open: \"09:00\", close: \"19:00\", closed: false },\n          wednesday: { open: \"09:00\", close: \"19:00\", closed: false },\n          thursday: { open: \"09:00\", close: \"19:00\", closed: false },\n          friday: { open: \"09:00\", close: \"19:00\", closed: false },\n          saturday: { open: \"09:00\", close: \"18:00\", closed: false },\n          sunday: { open: \"10:00\", close: \"17:00\", closed: false }\n        },\n        heroImages: contentSettings.heroImages?.length > 0 ? contentSettings.heroImages : [\"\"],\n        seo: contentSettings.seo || {\n          title: \"\",\n          description: \"\",\n          keywords: \"\"\n        }\n      });\n    }\n  }, [contentSettings]);\n\n  // Handle unauthorized errors\n  useEffect(() => {\n    if (settingsError && isUnauthorizedError(settingsError as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin session expired. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [settingsError, toast]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settingsData: any) => {\n      return apiRequest(\"PUT\", \"/api/admin/content-settings\", settingsData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/content-settings\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error as Error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"Admin session expired. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update settings.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const settingsData = {\n      ...settingsForm,\n      slogans: settingsForm.slogans.filter(slogan => slogan.trim() !== \"\"),\n      heroImages: settingsForm.heroImages.filter(url => url.trim() !== \"\")\n    };\n\n    updateSettingsMutation.mutate(settingsData);\n  };\n\n  const addSlogan = () => {\n    setSettingsForm(prev => ({\n      ...prev,\n      slogans: [...prev.slogans, \"\"]\n    }));\n  };\n\n  const removeSlogan = (index: number) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      slogans: prev.slogans.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateSlogan = (index: number, value: string) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      slogans: prev.slogans.map((slogan, i) => i === index ? value : slogan)\n    }));\n  };\n\n  const addHeroImage = () => {\n    setSettingsForm(prev => ({\n      ...prev,\n      heroImages: [...prev.heroImages, \"\"]\n    }));\n  };\n\n  const removeHeroImage = (index: number) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      heroImages: prev.heroImages.filter((_, i) => i !== index)\n    }));\n  };\n\n  const updateHeroImage = (index: number, value: string) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      heroImages: prev.heroImages.map((url, i) => i === index ? value : url)\n    }));\n  };\n\n  const updateOpeningHours = (day: string, field: string, value: string | boolean) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      openingHours: {\n        ...prev.openingHours,\n        [day]: {\n          ...prev.openingHours[day as keyof typeof prev.openingHours],\n          [field]: value\n        }\n      }\n    }));\n  };\n\n  const updateSeo = (field: string, value: string) => {\n    setSettingsForm(prev => ({\n      ...prev,\n      seo: {\n        ...prev.seo,\n        [field]: value\n      }\n    }));\n  };\n\n  const daysOfWeek = [\n    { key: 'monday', label: 'Monday' },\n    { key: 'tuesday', label: 'Tuesday' },\n    { key: 'wednesday', label: 'Wednesday' },\n    { key: 'thursday', label: 'Thursday' },\n    { key: 'friday', label: 'Friday' },\n    { key: 'saturday', label: 'Saturday' },\n    { key: 'sunday', label: 'Sunday' }\n  ];\n\n  if (isLoading || (!isAuthenticated || user?.role !== 'ADMIN')) {\n    return (\n      <AdminLayout>\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-muted rounded w-1/3 mb-6\"></div>\n          <div className=\"space-y-6\">\n            {Array.from({ length: 4 }, (_, i) => (\n              <div key={i} className=\"h-48 bg-muted rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </AdminLayout>\n    );\n  }\n\n  return (\n    <AdminLayout>\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground\" data-testid=\"settings-title\">\n            Settings\n          </h1>\n          <p className=\"text-muted-foreground\" data-testid=\"settings-description\">\n            Manage your salon's content and configuration settings\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-8\" data-testid=\"settings-form\">\n          {/* Brand & Slogans */}\n          <Card data-testid=\"brand-settings-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <SettingsIcon className=\"w-5 h-5 text-primary\" />\n                <span>Brand & Slogans</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-semibold mb-3 block\">\n                  Salon Slogans\n                </Label>\n                <div className=\"space-y-3\">\n                  {settingsForm.slogans.map((slogan, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Input\n                        value={slogan}\n                        onChange={(e) => updateSlogan(index, e.target.value)}\n                        placeholder=\"Enter a slogan\"\n                        data-testid={`input-slogan-${index}`}\n                      />\n                      {settingsForm.slogans.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => removeSlogan(index)}\n                          data-testid={`button-remove-slogan-${index}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addSlogan}\n                    className=\"w-full\"\n                    data-testid=\"button-add-slogan\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Slogan\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact Information */}\n          <Card data-testid=\"contact-settings-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Phone className=\"w-5 h-5 text-primary\" />\n                <span>Contact Information</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\" className=\"text-sm font-semibold mb-2 block\">\n                    Phone Number\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    value={settingsForm.phone}\n                    onChange={(e) => setSettingsForm(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"+65 9712 1097\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"address\" className=\"text-sm font-semibold mb-2 block\">\n                    Address\n                  </Label>\n                  <Textarea\n                    id=\"address\"\n                    value={settingsForm.address}\n                    onChange={(e) => setSettingsForm(prev => ({ ...prev, address: e.target.value }))}\n                    placeholder=\"Blk 483A Yishun Ave 6 Singapore 761483\"\n                    rows={2}\n                    data-testid=\"textarea-address\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Social Media */}\n          <Card data-testid=\"social-settings-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Globe className=\"w-5 h-5 text-primary\" />\n                <span>Social Media Links</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"facebookUrl\" className=\"text-sm font-semibold mb-2 block flex items-center space-x-2\">\n                    <Facebook className=\"w-4 h-4\" />\n                    <span>Facebook</span>\n                  </Label>\n                  <Input\n                    id=\"facebookUrl\"\n                    value={settingsForm.facebookUrl}\n                    onChange={(e) => setSettingsForm(prev => ({ ...prev, facebookUrl: e.target.value }))}\n                    placeholder=\"https://facebook.com/homebasebeauty\"\n                    data-testid=\"input-facebook\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"instagramUrl\" className=\"text-sm font-semibold mb-2 block flex items-center space-x-2\">\n                    <Instagram className=\"w-4 h-4\" />\n                    <span>Instagram</span>\n                  </Label>\n                  <Input\n                    id=\"instagramUrl\"\n                    value={settingsForm.instagramUrl}\n                    onChange={(e) => setSettingsForm(prev => ({ ...prev, instagramUrl: e.target.value }))}\n                    placeholder=\"https://instagram.com/homebasebeauty\"\n                    data-testid=\"input-instagram\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"zaloUrl\" className=\"text-sm font-semibold mb-2 block flex items-center space-x-2\">\n                    <MessageCircle className=\"w-4 h-4\" />\n                    <span>Zalo</span>\n                  </Label>\n                  <Input\n                    id=\"zaloUrl\"\n                    value={settingsForm.zaloUrl}\n                    onChange={(e) => setSettingsForm(prev => ({ ...prev, zaloUrl: e.target.value }))}\n                    placeholder=\"https://zalo.me/homebasebeauty\"\n                    data-testid=\"input-zalo\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Opening Hours */}\n          <Card data-testid=\"hours-settings-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"w-5 h-5 text-primary\" />\n                <span>Opening Hours</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {daysOfWeek.map((day) => {\n                const dayHours = settingsForm.openingHours[day.key as keyof typeof settingsForm.openingHours];\n                return (\n                  <div key={day.key} className=\"grid grid-cols-1 md:grid-cols-4 gap-4 items-center\" data-testid={`hours-${day.key}`}>\n                    <div className=\"flex items-center space-x-2\">\n                      <Label className=\"font-medium min-w-[80px]\">{day.label}</Label>\n                    </div>\n                    \n                    {!dayHours.closed ? (\n                      <>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground mb-1 block\">Open</Label>\n                          <Input\n                            type=\"time\"\n                            value={dayHours.open}\n                            onChange={(e) => updateOpeningHours(day.key, 'open', e.target.value)}\n                            data-testid={`input-${day.key}-open`}\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs text-muted-foreground mb-1 block\">Close</Label>\n                          <Input\n                            type=\"time\"\n                            value={dayHours.close}\n                            onChange={(e) => updateOpeningHours(day.key, 'close', e.target.value)}\n                            data-testid={`input-${day.key}-close`}\n                          />\n                        </div>\n                      </>\n                    ) : (\n                      <div className=\"col-span-2 flex items-center\">\n                        <Badge variant=\"secondary\">Closed</Badge>\n                      </div>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id={`${day.key}-closed`}\n                        checked={dayHours.closed}\n                        onChange={(e) => updateOpeningHours(day.key, 'closed', e.target.checked)}\n                        className=\"rounded border-border\"\n                        data-testid={`checkbox-${day.key}-closed`}\n                      />\n                      <Label htmlFor={`${day.key}-closed`} className=\"text-sm\">\n                        Closed\n                      </Label>\n                    </div>\n                  </div>\n                );\n              })}\n            </CardContent>\n          </Card>\n\n          {/* Hero Images */}\n          <Card data-testid=\"hero-settings-card\">\n            <CardHeader>\n              <CardTitle>Hero Images</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-semibold mb-3 block\">\n                  Hero Section Images\n                </Label>\n                <div className=\"space-y-3\">\n                  {settingsForm.heroImages.map((url, index) => (\n                    <div key={index} className=\"flex items-center space-x-2\">\n                      <Input\n                        value={url}\n                        onChange={(e) => updateHeroImage(index, e.target.value)}\n                        placeholder=\"https://example.com/hero-image.jpg\"\n                        data-testid={`input-hero-image-${index}`}\n                      />\n                      {settingsForm.heroImages.length > 1 && (\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"icon\"\n                          onClick={() => removeHeroImage(index)}\n                          data-testid={`button-remove-hero-image-${index}`}\n                        >\n                          <X className=\"w-4 h-4\" />\n                        </Button>\n                      )}\n                    </div>\n                  ))}\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addHeroImage}\n                    className=\"w-full\"\n                    data-testid=\"button-add-hero-image\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Hero Image\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* SEO Settings */}\n          <Card data-testid=\"seo-settings-card\">\n            <CardHeader>\n              <CardTitle>SEO Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"seoTitle\" className=\"text-sm font-semibold mb-2 block\">\n                  Site Title\n                </Label>\n                <Input\n                  id=\"seoTitle\"\n                  value={settingsForm.seo.title}\n                  onChange={(e) => updateSeo('title', e.target.value)}\n                  placeholder=\"HOME BASE Beauty Salon - Luxury Nail, Eyelash & Facial Services\"\n                  data-testid=\"input-seo-title\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"seoDescription\" className=\"text-sm font-semibold mb-2 block\">\n                  Meta Description\n                </Label>\n                <Textarea\n                  id=\"seoDescription\"\n                  value={settingsForm.seo.description}\n                  onChange={(e) => updateSeo('description', e.target.value)}\n                  placeholder=\"Experience luxury beauty services with our expert team. Specializing in premium nail care, eyelash extensions, and rejuvenating facial treatments.\"\n                  rows={3}\n                  data-testid=\"textarea-seo-description\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"seoKeywords\" className=\"text-sm font-semibold mb-2 block\">\n                  Keywords\n                </Label>\n                <Input\n                  id=\"seoKeywords\"\n                  value={settingsForm.seo.keywords}\n                  onChange={(e) => updateSeo('keywords', e.target.value)}\n                  placeholder=\"beauty salon, nail care, eyelash extensions, facial treatments, luxury spa\"\n                  data-testid=\"input-seo-keywords\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Save Button */}\n          <div className=\"flex justify-end\">\n            <Button \n              type=\"submit\" \n              size=\"lg\"\n              disabled={updateSettingsMutation.isPending}\n              data-testid=\"button-save-settings\"\n            >\n              <Save className=\"w-4 h-4 mr-2\" />\n              {updateSettingsMutation.isPending ? \"Saving...\" : \"Save Settings\"}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </AdminLayout>\n  );\n}\n","size_bytes":21694},"client/src/components/CalendarView.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Clock, \n  User, \n  Phone, \n  Mail, \n  Calendar as CalendarIcon,\n  CheckCircle, \n  XCircle, \n  AlertCircle \n} from \"lucide-react\";\nimport { format, \n  startOfMonth, \n  endOfMonth, \n  startOfWeek, \n  endOfWeek, \n  eachDayOfInterval, \n  isSameDay, \n  isSameMonth, \n  addMonths, \n  subMonths \n} from \"date-fns\";\nimport type { Booking, Service, ServiceCategory, User as DBUser, Staff } from \"@shared/schema\";\n\n// Extended booking type with populated relations for calendar display\nexport interface BookingWithRelations extends Omit<Booking, 'userId' | 'serviceId' | 'staffId'> {\n  user?: DBUser;\n  service: Service & {\n    category: ServiceCategory;\n  };\n  staff?: Staff;\n}\n\ninterface CalendarViewProps {\n  bookings: BookingWithRelations[];\n  onUpdateBookingStatus?: (bookingId: string, status: string) => void;\n  onEditBooking?: (booking: BookingWithRelations) => void;\n}\n\nexport default function CalendarView({ bookings, onUpdateBookingStatus, onEditBooking }: CalendarViewProps) {\n  const [currentDate, setCurrentDate] = useState(new Date());\n  const [selectedBooking, setSelectedBooking] = useState<BookingWithRelations | null>(null);\n  const [showBookingDialog, setShowBookingDialog] = useState(false);\n\n  const monthStart = startOfMonth(currentDate);\n  const monthEnd = endOfMonth(currentDate);\n  const calendarStart = startOfWeek(monthStart);\n  const calendarEnd = endOfWeek(monthEnd);\n  \n  const calendarDays = eachDayOfInterval({\n    start: calendarStart,\n    end: calendarEnd\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'PENDING':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'CANCELLED':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'DONE':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'CONFIRMED':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      case 'PENDING':\n        return <AlertCircle className=\"w-3 h-3\" />;\n      case 'CANCELLED':\n        return <XCircle className=\"w-3 h-3\" />;\n      case 'DONE':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      default:\n        return <AlertCircle className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getBookingsForDay = (day: Date) => {\n    return bookings.filter(booking => \n      isSameDay(new Date(booking.dateTime), day)\n    ).sort((a, b) => new Date(a.dateTime).getTime() - new Date(b.dateTime).getTime());\n  };\n\n  const handlePreviousMonth = () => {\n    setCurrentDate(subMonths(currentDate, 1));\n  };\n\n  const handleNextMonth = () => {\n    setCurrentDate(addMonths(currentDate, 1));\n  };\n\n  const handleBookingClick = (booking: BookingWithRelations) => {\n    setSelectedBooking(booking);\n    setShowBookingDialog(true);\n  };\n\n  const handleUpdateStatus = (status: string) => {\n    if (selectedBooking && onUpdateBookingStatus) {\n      onUpdateBookingStatus(selectedBooking.id, status);\n      setShowBookingDialog(false);\n    }\n  };\n\n  const handleEdit = () => {\n    if (selectedBooking && onEditBooking) {\n      onEditBooking(selectedBooking);\n      setShowBookingDialog(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Calendar Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-2xl font-serif\" data-testid=\"calendar-title\">\n              {format(currentDate, 'MMMM yyyy')}\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePreviousMonth}\n                data-testid=\"button-previous-month\"\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleNextMonth}\n                data-testid=\"button-next-month\"\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Calendar Grid */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"grid grid-cols-7 border-b\" data-testid=\"calendar-grid\">\n            {/* Day Headers */}\n            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map((day, index) => (\n              <div\n                key={day}\n                className=\"p-2 md:p-4 text-center font-medium text-muted-foreground border-r last:border-r-0 bg-muted/30 text-sm md:text-base\"\n                data-testid={`day-header-${day.toLowerCase()}`}\n              >\n                <span className=\"hidden sm:inline\">{day}</span>\n                <span className=\"sm:hidden\">{day.charAt(0)}</span>\n              </div>\n            ))}\n            \n            {/* Calendar Days */}\n            {calendarDays.map((day, dayIndex) => {\n              const dayBookings = getBookingsForDay(day);\n              const isCurrentMonth = isSameMonth(day, currentDate);\n              const isToday = isSameDay(day, new Date());\n              \n              return (\n                <div\n                  key={dayIndex}\n                  className={`min-h-[80px] sm:min-h-[100px] lg:min-h-[120px] p-1 sm:p-2 border-r border-b last:border-r-0 ${\n                    isCurrentMonth \n                      ? 'bg-background' \n                      : 'bg-muted/20'\n                  } ${\n                    isToday \n                      ? 'bg-primary/5 border-primary/20' \n                      : ''\n                  }`}\n                  data-testid={`calendar-day-${format(day, 'yyyy-MM-dd')}`}\n                >\n                  <div className={`text-sm font-medium mb-2 ${\n                    isCurrentMonth ? 'text-foreground' : 'text-muted-foreground'\n                  } ${\n                    isToday ? 'text-primary font-bold' : ''\n                  }`}>\n                    {format(day, 'd')}\n                  </div>\n                  \n                  <div className=\"space-y-1\">\n                    {dayBookings.slice(0, 2).map((booking) => (\n                      <div\n                        key={booking.id}\n                        className={`p-1.5 sm:p-1 rounded-sm text-xs cursor-pointer hover:opacity-80 transition-opacity border ${getStatusColor(booking.status)} min-h-[44px] sm:min-h-auto touch-manipulation`}\n                        onClick={() => handleBookingClick(booking)}\n                        data-testid={`calendar-booking-${booking.id}`}\n                      >\n                        <div className=\"flex items-center space-x-1 mb-1\">\n                          {getStatusIcon(booking.status)}\n                          <span className=\"font-medium truncate text-xs sm:text-xs\">\n                            {format(new Date(booking.dateTime), 'HH:mm')}\n                          </span>\n                        </div>\n                        <div className=\"truncate font-medium text-xs\">\n                          {booking.service.name}\n                        </div>\n                        <div className=\"truncate text-xs opacity-75 hidden sm:block\">\n                          {booking.customerName || booking.user?.firstName || 'Guest'}\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {dayBookings.length > 2 && (\n                      <div \n                        className=\"text-xs text-muted-foreground text-center p-1 rounded cursor-pointer hover:bg-muted/20 transition-colors\"\n                        onClick={() => {\n                          // Show the first remaining booking when clicking \"+N more\"\n                          if (dayBookings.length > 2) {\n                            handleBookingClick(dayBookings[2]);\n                          }\n                        }}\n                        data-testid={`more-bookings-${format(day, 'yyyy-MM-dd')}`}\n                      >\n                        +{dayBookings.length - 2} more\n                      </div>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Booking Details Dialog */}\n      <Dialog open={showBookingDialog} onOpenChange={setShowBookingDialog}>\n        <DialogContent className=\"max-w-md mx-4\" data-testid=\"booking-details-dialog\">\n          <DialogHeader>\n            <DialogTitle>Booking Details</DialogTitle>\n          </DialogHeader>\n          \n          {selectedBooking && (\n            <div className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\" data-testid=\"dialog-service-name\">\n                    {selectedBooking.service.name}\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground\" data-testid=\"dialog-service-category\">\n                    {[\n                      selectedBooking.service.isNail && \"Nail\",\n                      selectedBooking.service.isEyelash && \"Eyelash\", \n                      selectedBooking.service.isFacial && \"Facial\"\n                    ].filter(Boolean).join(\", \") || \"General\"}\n                  </p>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <CalendarIcon className=\"w-4 h-4 text-muted-foreground\" />\n                      <span data-testid=\"dialog-booking-date\">\n                        {format(new Date(selectedBooking.dateTime), 'MMM dd, yyyy')}\n                      </span>\n                    </div>\n                    <div className=\"flex items-center space-x-2 text-sm mt-1\">\n                      <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                      <span data-testid=\"dialog-booking-time\">\n                        {format(new Date(selectedBooking.dateTime), 'h:mm a')} ({selectedBooking.durationMins}m)\n                      </span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <div className=\"flex items-center space-x-2 text-sm\">\n                      <User className=\"w-4 h-4 text-muted-foreground\" />\n                      <span data-testid=\"dialog-customer-name\">\n                        {selectedBooking.customerName || selectedBooking.user?.firstName || 'Guest'}\n                      </span>\n                    </div>\n                    {selectedBooking.customerPhone && (\n                      <div className=\"flex items-center space-x-2 text-sm mt-1\">\n                        <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                        <span data-testid=\"dialog-customer-phone\">\n                          {selectedBooking.customerPhone}\n                        </span>\n                      </div>\n                    )}\n                    {selectedBooking.customerEmail && (\n                      <div className=\"flex items-center space-x-2 text-sm mt-1\">\n                        <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                        <span data-testid=\"dialog-customer-email\">\n                          {selectedBooking.customerEmail}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Badge className={getStatusColor(selectedBooking.status)} data-testid=\"dialog-booking-status\">\n                    <span className=\"flex items-center space-x-1\">\n                      {getStatusIcon(selectedBooking.status)}\n                      <span>{selectedBooking.status}</span>\n                    </span>\n                  </Badge>\n                  \n                  {selectedBooking.staff && (\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"dialog-staff-name\">\n                      Staff: {selectedBooking.staff.name}\n                    </div>\n                  )}\n                </div>\n                \n                {selectedBooking.notes && (\n                  <div className=\"p-3 bg-muted/30 rounded text-sm\" data-testid=\"dialog-booking-notes\">\n                    <strong>Notes:</strong> {selectedBooking.notes}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"flex flex-wrap gap-2 pt-4 border-t\">\n                <Button \n                  size=\"sm\" \n                  variant={selectedBooking.status === 'CONFIRMED' ? 'default' : 'outline'}\n                  onClick={() => handleUpdateStatus('CONFIRMED')}\n                  disabled={selectedBooking.status === 'CONFIRMED'}\n                  data-testid=\"dialog-button-confirm\"\n                >\n                  Confirm\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant={selectedBooking.status === 'DONE' ? 'default' : 'outline'}\n                  onClick={() => handleUpdateStatus('DONE')}\n                  disabled={selectedBooking.status === 'DONE'}\n                  data-testid=\"dialog-button-complete\"\n                >\n                  Complete\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant={selectedBooking.status === 'CANCELLED' ? 'destructive' : 'outline'}\n                  onClick={() => handleUpdateStatus('CANCELLED')}\n                  disabled={selectedBooking.status === 'CANCELLED'}\n                  data-testid=\"dialog-button-cancel\"\n                >\n                  Cancel\n                </Button>\n                {onEditBooking && (\n                  <Button \n                    size=\"sm\" \n                    variant=\"outline\"\n                    onClick={handleEdit}\n                    data-testid=\"dialog-button-edit\"\n                  >\n                    Edit\n                  </Button>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14756},"client/src/pages/admin/staff.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertStaffSchema, insertStaffAvailabilitySchema, type Staff, type Service, type StaffAvailability } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, User, Clock, Briefcase, Mail, Phone, Camera, Calendar } from \"lucide-react\";\n\ntype StaffWithDetails = Staff & { \n  availability: StaffAvailability[], \n  services: { id: string; service: Service }[] \n};\n\n// Day mapping for display\nconst dayNames = {\n  MONDAY: \"Monday\",\n  TUESDAY: \"Tuesday\", \n  WEDNESDAY: \"Wednesday\",\n  THURSDAY: \"Thursday\",\n  FRIDAY: \"Friday\",\n  SATURDAY: \"Saturday\",\n  SUNDAY: \"Sunday\"\n};\n\nconst timeSlots = [\n  \"08:00\", \"08:30\", \"09:00\", \"09:30\", \"10:00\", \"10:30\", \"11:00\", \"11:30\",\n  \"12:00\", \"12:30\", \"13:00\", \"13:30\", \"14:00\", \"14:30\", \"15:00\", \"15:30\",\n  \"16:00\", \"16:30\", \"17:00\", \"17:30\", \"18:00\", \"18:30\", \"19:00\", \"19:30\", \"20:00\"\n];\n\nconst staffFormSchema = insertStaffSchema.extend({\n  skills: z.array(z.string()).optional()\n});\n\nconst availabilityFormSchema = insertStaffAvailabilitySchema;\n\nexport default function AdminStaff() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedStaff, setSelectedStaff] = useState<StaffWithDetails | null>(null);\n  const [isStaffDialogOpen, setIsStaffDialogOpen] = useState(false);\n  const [isAvailabilityDialogOpen, setIsAvailabilityDialogOpen] = useState(false);\n  const [isEditMode, setIsEditMode] = useState(false);\n\n  // Staff form\n  const staffForm = useForm<z.infer<typeof staffFormSchema>>({\n    resolver: zodResolver(staffFormSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      phone: \"\",\n      position: \"\",\n      bio: \"\",\n      profileImageUrl: \"\",\n      experienceYears: 0,\n      isActive: true,\n      skills: []\n    }\n  });\n\n  // Availability form\n  const availabilityForm = useForm<z.infer<typeof availabilityFormSchema>>({\n    resolver: zodResolver(availabilityFormSchema),\n    defaultValues: {\n      staffId: \"\",\n      dayOfWeek: \"MONDAY\",\n      startTime: \"09:00\",\n      endTime: \"17:00\",\n      isActive: true\n    }\n  });\n\n  // Queries\n  const { data: staff = [], isLoading: isLoadingStaff } = useQuery({\n    queryKey: ['/api/admin/staff']\n  });\n\n  const { data: services = [] } = useQuery({\n    queryKey: ['/api/services']\n  });\n\n  // Mutations\n  const createStaffMutation = useMutation({\n    mutationFn: (data: z.infer<typeof staffFormSchema>) => \n      apiRequest('POST', '/api/admin/staff', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Staff member created successfully\" });\n      setIsStaffDialogOpen(false);\n      staffForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to create staff member\", variant: \"destructive\" });\n    }\n  });\n\n  const updateStaffMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string, data: Partial<z.infer<typeof staffFormSchema>> }) =>\n      apiRequest('PUT', `/api/admin/staff/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Staff member updated successfully\" });\n      setIsStaffDialogOpen(false);\n      setIsEditMode(false);\n      staffForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to update staff member\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteStaffMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/staff/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Staff member deleted successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete staff member\", variant: \"destructive\" });\n    }\n  });\n\n  const createAvailabilityMutation = useMutation({\n    mutationFn: (data: z.infer<typeof availabilityFormSchema>) =>\n      apiRequest('POST', '/api/admin/staff/availability', data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Availability added successfully\" });\n      setIsAvailabilityDialogOpen(false);\n      availabilityForm.reset();\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to add availability\", variant: \"destructive\" });\n    }\n  });\n\n  const deleteAvailabilityMutation = useMutation({\n    mutationFn: (id: string) => apiRequest('DELETE', `/api/admin/staff/availability/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Availability removed successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to remove availability\", variant: \"destructive\" });\n    }\n  });\n\n  const assignServiceMutation = useMutation({\n    mutationFn: ({ staffId, serviceId }: { staffId: string, serviceId: string }) =>\n      apiRequest('POST', `/api/admin/staff/${staffId}/services/${serviceId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Service assigned successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to assign service\", variant: \"destructive\" });\n    }\n  });\n\n  const removeServiceMutation = useMutation({\n    mutationFn: ({ staffId, serviceId }: { staffId: string, serviceId: string }) =>\n      apiRequest('DELETE', `/api/admin/staff/${staffId}/services/${serviceId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/staff'] });\n      toast({ title: \"Success\", description: \"Service removed successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to remove service\", variant: \"destructive\" });\n    }\n  });\n\n  const handleEditStaff = (staffMember: StaffWithDetails) => {\n    setSelectedStaff(staffMember);\n    setIsEditMode(true);\n    staffForm.reset({\n      name: staffMember.name,\n      email: staffMember.email || \"\",\n      phone: staffMember.phone || \"\",\n      position: staffMember.position || \"\",\n      bio: staffMember.bio || \"\",\n      profileImageUrl: staffMember.profileImageUrl || \"\",\n      experienceYears: staffMember.experienceYears || 0,\n      isActive: staffMember.isActive,\n      skills: staffMember.skills || []\n    });\n    setIsStaffDialogOpen(true);\n  };\n\n  const handleAddAvailability = (staffMember: StaffWithDetails) => {\n    setSelectedStaff(staffMember);\n    availabilityForm.reset({\n      staffId: staffMember.id,\n      dayOfWeek: \"MONDAY\",\n      startTime: \"09:00\",\n      endTime: \"17:00\",\n      isActive: true\n    });\n    setIsAvailabilityDialogOpen(true);\n  };\n\n  const onStaffSubmit = (data: z.infer<typeof staffFormSchema>) => {\n    if (isEditMode && selectedStaff) {\n      updateStaffMutation.mutate({ id: selectedStaff.id, data });\n    } else {\n      createStaffMutation.mutate(data);\n    }\n  };\n\n  const onAvailabilitySubmit = (data: z.infer<typeof availabilityFormSchema>) => {\n    createAvailabilityMutation.mutate(data);\n  };\n\n  if (isLoadingStaff) {\n    return <div className=\"p-6\">Loading staff...</div>;\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Staff Management</h1>\n          <p className=\"text-gray-600 dark:text-gray-400\">Manage staff members, their availability, and service specializations</p>\n        </div>\n        <Dialog open={isStaffDialogOpen} onOpenChange={setIsStaffDialogOpen}>\n          <DialogTrigger asChild>\n            <Button \n              onClick={() => {\n                setIsEditMode(false);\n                staffForm.reset();\n              }}\n              data-testid=\"button-add-staff\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Staff Member\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>{isEditMode ? 'Edit Staff Member' : 'Add New Staff Member'}</DialogTitle>\n            </DialogHeader>\n            <Form {...staffForm}>\n              <form onSubmit={staffForm.handleSubmit(onStaffSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={staffForm.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-staff-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={staffForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} data-testid=\"input-staff-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={staffForm.control}\n                    name=\"phone\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-staff-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={staffForm.control}\n                  name=\"position\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Position</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"e.g., Senior Nail Technician\" data-testid=\"input-staff-position\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={staffForm.control}\n                  name=\"experienceYears\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Years of Experience</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          {...field} \n                          onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          data-testid=\"input-staff-experience\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={staffForm.control}\n                  name=\"bio\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Bio</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={3} data-testid=\"textarea-staff-bio\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={staffForm.control}\n                  name=\"profileImageUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Profile Image URL</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"https://...\" data-testid=\"input-staff-image\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={staffForm.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex items-center space-x-2\">\n                      <FormControl>\n                        <Switch \n                          checked={field.value}\n                          onCheckedChange={field.onChange}\n                          data-testid=\"switch-staff-active\"\n                        />\n                      </FormControl>\n                      <FormLabel>Active</FormLabel>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsStaffDialogOpen(false)}\n                    data-testid=\"button-cancel-staff\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createStaffMutation.isPending || updateStaffMutation.isPending}\n                    data-testid=\"button-save-staff\"\n                  >\n                    {isEditMode ? 'Update' : 'Create'}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid gap-6\">\n        {staff.map((staffMember: StaffWithDetails) => (\n          <Card key={staffMember.id} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex-shrink-0\">\n                    {staffMember.profileImageUrl ? (\n                      <img \n                        src={staffMember.profileImageUrl} \n                        alt={staffMember.name}\n                        className=\"w-16 h-16 rounded-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-16 h-16 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n                        <User className=\"h-8 w-8 text-gray-400\" />\n                      </div>\n                    )}\n                  </div>\n                  <div>\n                    <div className=\"flex items-center space-x-2\">\n                      <h3 className=\"text-xl font-semibold\" data-testid={`text-staff-name-${staffMember.id}`}>\n                        {staffMember.name}\n                      </h3>\n                      <Badge variant={staffMember.isActive ? \"default\" : \"secondary\"}>\n                        {staffMember.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </div>\n                    {staffMember.position && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">{staffMember.position}</p>\n                    )}\n                    {staffMember.experienceYears && (\n                      <p className=\"text-sm text-gray-500\">{staffMember.experienceYears} years experience</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex space-x-2\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => handleEditStaff(staffMember)}\n                    data-testid={`button-edit-staff-${staffMember.id}`}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => deleteStaffMutation.mutate(staffMember.id)}\n                    disabled={deleteStaffMutation.isPending}\n                    data-testid={`button-delete-staff-${staffMember.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"space-y-6\">\n              {/* Contact Info */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {staffMember.email && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Mail className=\"h-4 w-4 text-gray-400\" />\n                    <span>{staffMember.email}</span>\n                  </div>\n                )}\n                {staffMember.phone && (\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <Phone className=\"h-4 w-4 text-gray-400\" />\n                    <span>{staffMember.phone}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Bio */}\n              {staffMember.bio && (\n                <div>\n                  <h4 className=\"font-medium mb-2\">Bio</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{staffMember.bio}</p>\n                </div>\n              )}\n\n              <Separator />\n\n              {/* Services */}\n              <div>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium flex items-center\">\n                    <Briefcase className=\"h-4 w-4 mr-2\" />\n                    Services ({staffMember.services.length})\n                  </h4>\n                  <Select onValueChange={(serviceId) => \n                    assignServiceMutation.mutate({ staffId: staffMember.id, serviceId })\n                  }>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Assign service\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {services\n                        .filter((service: Service) => \n                          !staffMember.services.some(s => s.service.id === service.id)\n                        )\n                        .map((service: Service) => (\n                          <SelectItem key={service.id} value={service.id}>\n                            {service.name}\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"flex flex-wrap gap-2\">\n                  {staffMember.services.map((staffService) => (\n                    <Badge \n                      key={staffService.id} \n                      variant=\"secondary\"\n                      className=\"cursor-pointer\"\n                      onClick={() => removeServiceMutation.mutate({ \n                        staffId: staffMember.id, \n                        serviceId: staffService.service.id \n                      })}\n                      data-testid={`badge-service-${staffService.service.id}`}\n                    >\n                      {staffService.service.name}\n                      <Trash2 className=\"h-3 w-3 ml-1\" />\n                    </Badge>\n                  ))}\n                  {staffMember.services.length === 0 && (\n                    <p className=\"text-sm text-gray-500\">No services assigned</p>\n                  )}\n                </div>\n              </div>\n\n              <Separator />\n\n              {/* Availability */}\n              <div>\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"font-medium flex items-center\">\n                    <Clock className=\"h-4 w-4 mr-2\" />\n                    Availability ({staffMember.availability.length})\n                  </h4>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    onClick={() => handleAddAvailability(staffMember)}\n                    data-testid={`button-add-availability-${staffMember.id}`}\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Hours\n                  </Button>\n                </div>\n                \n                <div className=\"grid gap-2\">\n                  {staffMember.availability.map((availability) => (\n                    <div \n                      key={availability.id}\n                      className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Calendar className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"font-medium\">\n                          {dayNames[availability.dayOfWeek as keyof typeof dayNames]}\n                        </span>\n                        <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {availability.startTime} - {availability.endTime}\n                        </span>\n                        <Badge variant={availability.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                          {availability.isActive ? \"Active\" : \"Inactive\"}\n                        </Badge>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => deleteAvailabilityMutation.mutate(availability.id)}\n                        disabled={deleteAvailabilityMutation.isPending}\n                        data-testid={`button-delete-availability-${availability.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                  {staffMember.availability.length === 0 && (\n                    <p className=\"text-sm text-gray-500 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      No availability set\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Availability Dialog */}\n      <Dialog open={isAvailabilityDialogOpen} onOpenChange={setIsAvailabilityDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Add Availability</DialogTitle>\n          </DialogHeader>\n          <Form {...availabilityForm}>\n            <form onSubmit={availabilityForm.handleSubmit(onAvailabilitySubmit)} className=\"space-y-4\">\n              <FormField\n                control={availabilityForm.control}\n                name=\"dayOfWeek\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Day of Week</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-day\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Object.entries(dayNames).map(([value, label]) => (\n                          <SelectItem key={value} value={value}>\n                            {label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={availabilityForm.control}\n                  name=\"startTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Start Time</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-start-time\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {timeSlots.map((time) => (\n                            <SelectItem key={time} value={time}>\n                              {time}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={availabilityForm.control}\n                  name=\"endTime\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>End Time</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-end-time\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {timeSlots.map((time) => (\n                            <SelectItem key={time} value={time}>\n                              {time}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={availabilityForm.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center space-x-2\">\n                    <FormControl>\n                      <Switch \n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-availability-active\"\n                      />\n                    </FormControl>\n                    <FormLabel>Active</FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsAvailabilityDialogOpen(false)}\n                  data-testid=\"button-cancel-availability\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createAvailabilityMutation.isPending}\n                  data-testid=\"button-save-availability\"\n                >\n                  Add Availability\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":28408},"client/src/components/ObjectUploader.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Supports pasting images from clipboard (Ctrl+V)\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['image/*'], // Only allow images for gallery\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: async (file) => {\n          try {\n            console.log(\"Getting upload parameters for file:\", file.name);\n            const params = await onGetUploadParameters();\n            console.log(\"Received upload parameters:\", params);\n            return params;\n          } catch (error) {\n            console.error(\"Error getting upload parameters:\", error);\n            throw error;\n          }\n        },\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n        setShowModal(false); // Close modal after upload\n      })\n  );\n\n  // Add paste support for images\n  useEffect(() => {\n    const handlePaste = async (e: ClipboardEvent) => {\n      // Only handle paste when modal is open\n      if (!showModal) return;\n      \n      const items = e.clipboardData?.items;\n      if (!items) return;\n\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.type.indexOf('image') !== -1) {\n          e.preventDefault();\n          const blob = item.getAsFile();\n          if (blob) {\n            // Add the pasted image to Uppy\n            try {\n              const fileName = `pasted-image-${Date.now()}.${blob.type.split('/')[1] || 'png'}`;\n              \n              // Check file size before adding\n              if (blob.size > maxFileSize) {\n                console.warn(`Pasted file too large: ${blob.size} bytes, max: ${maxFileSize}`);\n                return;\n              }\n\n              uppy.addFile({\n                name: fileName,\n                type: blob.type,\n                data: blob,\n                source: 'Local',\n                isRemote: false,\n              });\n              console.log(`Added pasted file: ${fileName}, size: ${blob.size} bytes`);\n            } catch (error) {\n              console.error('Error adding pasted file to Uppy:', error);\n            }\n          }\n        }\n      }\n    };\n\n    document.addEventListener('paste', handlePaste);\n    return () => {\n      document.removeEventListener('paste', handlePaste);\n    };\n  }, [showModal, uppy]);\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        data-testid=\"button-upload-image\"\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n        theme=\"light\"\n        note=\"Only image files are allowed. Max file size: 10MB. You can also paste images with Ctrl+V!\"\n      />\n    </div>\n  );\n}","size_bytes":5046},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":8407},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport connectPg from \"connect-pg-simple\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n// Basic CSRF protection middleware\nfunction csrfProtection(req: any, res: any, next: any) {\n  // Only protect state-changing requests\n  if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(req.method)) {\n    // Check for custom header or referrer header as CSRF protection\n    const hasCustomHeader = req.headers['x-requested-with'] === 'XMLHttpRequest' ||\n                           req.headers['content-type']?.includes('application/json');\n    const hasValidReferrer = req.headers.referer && \n                           req.headers.referer.startsWith(`${req.protocol}://${req.get('host')}`);\n    \n    if (!hasCustomHeader && !hasValidReferrer) {\n      return res.status(403).json({ message: 'CSRF protection: Invalid request' });\n    }\n  }\n  next();\n}\n\nexport function setupAuth(app: Express) {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\", // CSRF protection\n      maxAge: sessionTtl,\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      {\n        usernameField: 'email', // Use email instead of username\n        passwordField: 'password'\n      },\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !user.password || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: 'Invalid email or password' });\n          } else {\n            return done(null, user);\n          }\n        } catch (error) {\n          return done(error);\n        }\n      }\n    ),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        // Handle stale sessions - return false instead of null to clear session\n        return done(null, false);\n      }\n      done(null, user);\n    } catch (error) {\n      // On error, also clear the session by returning false\n      done(null, false);\n    }\n  });\n\n  app.post(\"/api/register\", csrfProtection, async (req, res, next) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      const user = await storage.createUser({\n        ...userData,\n        password: userData.password ? await hashPassword(userData.password) : undefined,\n      });\n\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) return next(err);\n        req.login(user, (err) => {\n          if (err) return next(err);\n          res.status(201).json({\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            profileImageUrl: user.profileImageUrl,\n            phone: user.phone,\n            role: user.role,\n            createdAt: user.createdAt,\n            updatedAt: user.updatedAt,\n          });\n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(400).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Admin-only login endpoint\n  app.post(\"/api/admin/login\", csrfProtection, (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectUser, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      // Only allow admin users\n      if (user.role !== 'ADMIN') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) return next(err);\n        req.login(user, (err) => {\n          if (err) {\n            return next(err);\n          }\n          res.status(200).json({\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            profileImageUrl: user.profileImageUrl,\n            phone: user.phone,\n            role: user.role,\n            createdAt: user.createdAt,\n            updatedAt: user.updatedAt,\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  // Customer login endpoint (non-admin users)\n  app.post(\"/api/login\", csrfProtection, (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: SelectUser, info: any) => {\n      if (err) {\n        return next(err);\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      // Only allow customer users (non-admin)\n      if (user.role === 'ADMIN') {\n        return res.status(403).json({ message: \"Please use admin login\" });\n      }\n      // Regenerate session to prevent session fixation\n      req.session.regenerate((err) => {\n        if (err) return next(err);\n        req.login(user, (err) => {\n          if (err) {\n            return next(err);\n          }\n          res.status(200).json({\n            id: user.id,\n            email: user.email,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            profileImageUrl: user.profileImageUrl,\n            phone: user.phone,\n            role: user.role,\n            createdAt: user.createdAt,\n            updatedAt: user.updatedAt,\n          });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", csrfProtection, (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const user = req.user!;\n    res.json({\n      id: user.id,\n      email: user.email,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      profileImageUrl: user.profileImageUrl,\n      phone: user.phone,\n      role: user.role,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    });\n  });\n}\n\nexport function isAuthenticated(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}","size_bytes":7946},"client/src/hooks/useAuth.tsx":{"content":"import React, { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser, InsertUser } from \"../../../shared/schema\";\nimport { apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"../hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  isAuthenticated: boolean;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  adminLoginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"email\" | \"password\">;\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | null, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: async () => {\n      try {\n        const res = await fetch(\"/api/user\");\n        if (res.status === 401) {\n          return null;\n        }\n        if (!res.ok) {\n          throw new Error('Failed to fetch user');\n        }\n        return await res.json();\n      } catch (error) {\n        throw error;\n      }\n    },\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || 'Login failed');\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: `Logged in as ${user.firstName} ${user.lastName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const adminLoginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/login\", credentials);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || 'Admin login failed');\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Admin Access Granted\",\n        description: `Welcome back, ${user.firstName} ${user.lastName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Admin login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      if (!res.ok) {\n        const error = await res.json();\n        throw new Error(error.message || 'Registration failed');\n      }\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome!\",\n        description: `Account created for ${user.firstName} ${user.lastName}`,\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/logout\");\n      if (!res.ok) {\n        throw new Error('Logout failed');\n      }\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        isAuthenticated: !!user,\n        loginMutation,\n        adminLoginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\n// Export types for external use\nexport type { AuthContextType };","size_bytes":4818},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"../hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-background\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return (\n    <Route path={path}>\n      <Component />\n    </Route>\n  );\n}","size_bytes":739},"client/src/pages/AuthPage.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema, InsertUser } from \"../../../shared/schema\";\nimport { z } from \"zod\";\nimport { Loader2, Eye, EyeOff } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const auth = useAuth();\n  const { user, loginMutation, registerMutation } = auth;\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      setLocation(\"/\");\n    }\n  }, [user, setLocation]);\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n    },\n  });\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterFormData) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData as InsertUser);\n  };\n\n  if (user) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-pink-100 via-purple-50 to-blue-100 dark:from-gray-900 dark:via-purple-900 dark:to-blue-900 flex\">\n      {/* Left side - Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground\">Beauty Salon</h1>\n            <p className=\"text-muted-foreground mt-2\">Welcome to your beauty destination</p>\n          </div>\n\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign In</CardTitle>\n                  <CardDescription>\n                    Enter your credentials to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                data-testid=\"input-email-login\"\n                                placeholder=\"your@email.com\"\n                                type=\"email\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  data-testid=\"input-password-login\"\n                                  placeholder=\"••••••••\"\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  data-testid=\"toggle-password-login\"\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login\"\n                      >\n                        {loginMutation.isPending && (\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        )}\n                        Sign In\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Account</CardTitle>\n                  <CardDescription>\n                    Fill in your details to create a new account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  data-testid=\"input-firstname\"\n                                  placeholder=\"John\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  data-testid=\"input-lastname\"\n                                  placeholder=\"Doe\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                data-testid=\"input-email-register\"\n                                placeholder=\"your@email.com\"\n                                type=\"email\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone</FormLabel>\n                            <FormControl>\n                              <Input\n                                data-testid=\"input-phone\"\n                                placeholder=\"+1 (555) 123-4567\"\n                                type=\"tel\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  data-testid=\"input-password-register\"\n                                  placeholder=\"••••••••\"\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  data-testid=\"toggle-password-register\"\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirm Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  data-testid=\"input-confirm-password\"\n                                  placeholder=\"••••••••\"\n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                  data-testid=\"toggle-confirm-password\"\n                                >\n                                  {showConfirmPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={registerMutation.isPending}\n                        data-testid=\"button-register\"\n                      >\n                        {registerMutation.isPending && (\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        )}\n                        Create Account\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex lg:flex-1 lg:items-center lg:justify-center lg:bg-gradient-to-br lg:from-pink-200 lg:via-purple-100 lg:to-blue-200 dark:lg:from-gray-800 dark:lg:via-purple-800 dark:lg:to-blue-800\">\n        <div className=\"text-center p-12\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-6\">\n            Transform Your Beauty Journey\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-md\">\n            Experience premium beauty services including nail care, eyelash extensions, \n            and revitalizing facial treatments in our luxurious salon.\n          </p>\n          <div className=\"space-y-4 text-lg text-muted-foreground\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <span className=\"w-2 h-2 bg-pink-500 rounded-full\"></span>\n              Professional Nail Services\n            </div>\n            <div className=\"flex items-center justify-center gap-2\">\n              <span className=\"w-2 h-2 bg-purple-500 rounded-full\"></span>\n              Expert Eyelash Extensions\n            </div>\n            <div className=\"flex items-center justify-center gap-2\">\n              <span className=\"w-2 h-2 bg-blue-500 rounded-full\"></span>\n              Rejuvenating Facial Treatments\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16068},"client/src/pages/admin/AdminLoginPage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Eye, EyeOff, Shield, Lock } from \"lucide-react\";\n\nconst adminLoginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype AdminLoginFormData = z.infer<typeof adminLoginSchema>;\n\nexport default function AdminLoginPage() {\n  const [, setLocation] = useLocation();\n  const auth = useAuth();\n  const { user, adminLoginMutation } = auth;\n  const [showPassword, setShowPassword] = useState(false);\n\n  // Redirect if already logged in and is admin\n  useEffect(() => {\n    if (user) {\n      if (user.role === 'ADMIN') {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/\");\n      }\n    }\n  }, [user, setLocation]);\n\n  const form = useForm<AdminLoginFormData>({\n    resolver: zodResolver(adminLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onLogin = (data: AdminLoginFormData) => {\n    adminLoginMutation.mutate(data, {\n      onSuccess: (user) => {\n        if (user.role === 'ADMIN') {\n          setLocation(\"/admin\");\n        } else {\n          // Not an admin, redirect to regular user area\n          setLocation(\"/\");\n        }\n      }\n    });\n  };\n\n  if (user) {\n    return null; // Will redirect via useEffect\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md shadow-2xl border-purple-200 dark:border-purple-800\">\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto bg-purple-100 dark:bg-purple-900 p-3 rounded-full w-16 h-16 flex items-center justify-center\">\n            <Shield className=\"h-8 w-8 text-purple-600 dark:text-purple-400\" />\n          </div>\n          <div>\n            <CardTitle className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              Admin Access\n            </CardTitle>\n            <CardDescription className=\"text-gray-600 dark:text-gray-300\">\n              HOME BASE Beauty Salon Management\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onLogin)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 dark:text-gray-300\">Admin Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"admin@homebase.beauty\"\n                        className=\"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600\"\n                        data-testid=\"input-admin-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700 dark:text-gray-300\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Enter admin password\"\n                          className=\"bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-600 pr-10\"\n                          data-testid=\"input-admin-password\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          data-testid=\"button-toggle-password\"\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4 text-gray-400\" />\n                          )}\n                        </Button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-4 rounded-md transition-colors duration-200\"\n                disabled={adminLoginMutation.isPending}\n                data-testid=\"button-admin-login\"\n              >\n                {adminLoginMutation.isPending ? (\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <Lock className=\"h-4 w-4 animate-spin\" />\n                    <span>Authenticating...</span>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center space-x-2\">\n                    <Lock className=\"h-4 w-4\" />\n                    <span>Access Admin Panel</span>\n                  </div>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Need customer access?{\" \"}\n              <button\n                onClick={() => setLocation(\"/auth\")}\n                className=\"text-purple-600 hover:text-purple-700 dark:text-purple-400 dark:hover:text-purple-300 font-medium\"\n                data-testid=\"link-customer-login\"\n              >\n                Customer Login\n              </button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6663},"scripts/production-admin-setup.js":{"content":"#!/usr/bin/env node\n/**\n * Production Admin Setup Script\n * Run this script to create admin account in production database\n * Usage: node scripts/production-admin-setup.js\n */\n\nimport { neon } from '@neondatabase/serverless';\nimport crypto from 'crypto';\nimport { promisify } from 'util';\n\nconst scryptAsync = promisify(crypto.scrypt);\n\nasync function hashPassword(password) {\n  const salt = crypto.randomBytes(16).toString('hex');\n  const buf = await scryptAsync(password, salt, 64);\n  return `${buf.toString('hex')}.${salt}`;\n}\n\nasync function setupProductionAdmin() {\n  try {\n    console.log('🚀 Setting up admin account for production...');\n    \n    // Check if we're in production\n    const isProduction = process.env.NODE_ENV === 'production' || process.env.REPLIT_DEPLOYMENT === '1';\n    console.log(`📍 Environment: ${isProduction ? 'PRODUCTION' : 'DEVELOPMENT'}`);\n    console.log(`📊 Database URL: ${process.env.DATABASE_URL ? 'Connected' : 'Not found'}`);\n    \n    if (!process.env.DATABASE_URL) {\n      throw new Error('DATABASE_URL environment variable not found');\n    }\n    \n    const sql = neon(process.env.DATABASE_URL);\n    \n    // Create admin account with secure credentials\n    const adminEmail = 'admin@homebase.beauty';\n    const adminPassword = 'homebase2024';\n    const hashedPassword = await hashPassword(adminPassword);\n    \n    // First, ensure sessions table exists (for production)\n    try {\n      await sql`\n        CREATE TABLE IF NOT EXISTS sessions (\n          sid VARCHAR PRIMARY KEY,\n          sess JSON NOT NULL,\n          expire TIMESTAMP NOT NULL\n        )\n      `;\n      console.log('✅ Sessions table ready');\n    } catch (sessionError) {\n      console.log('⚠️  Sessions table setup:', sessionError.message);\n    }\n    \n    // Create or update admin account\n    const result = await sql`\n      INSERT INTO users (email, password, first_name, last_name, phone, role) \n      VALUES (\n        ${adminEmail},\n        ${hashedPassword},\n        'Admin',\n        'Manager', \n        '+84123456789',\n        'ADMIN'\n      ) ON CONFLICT (email) DO UPDATE SET\n        password = EXCLUDED.password,\n        role = 'ADMIN',\n        first_name = EXCLUDED.first_name,\n        last_name = EXCLUDED.last_name,\n        phone = EXCLUDED.phone,\n        updated_at = NOW()\n      RETURNING email, role, created_at\n    `;\n    \n    console.log('✅ Admin account setup completed!');\n    console.log('📧 Email:', adminEmail);\n    console.log('🔑 Password:', adminPassword);\n    console.log('👤 Role:', result[0]?.role);\n    console.log('📅 Created:', result[0]?.created_at);\n    \n    // Verify the account works\n    const verification = await sql`\n      SELECT email, role, first_name, last_name FROM users \n      WHERE email = ${adminEmail} AND role = 'ADMIN'\n    `;\n    \n    if (verification.length > 0) {\n      console.log('✅ Verification successful - Admin account ready for production!');\n      console.log('🌐 You can now login at /admin/login on your published website');\n    } else {\n      console.log('❌ Verification failed - Admin account not found');\n    }\n    \n  } catch (error) {\n    console.error('❌ Error setting up production admin:', error.message);\n    console.error('💡 Make sure your DATABASE_URL environment variable is correctly set');\n    process.exit(1);\n  }\n}\n\n// Run the setup\nsetupProductionAdmin();","size_bytes":3373}},"version":1}